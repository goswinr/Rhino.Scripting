<?xml version="1.0" encoding="utf-8"?>
<doc>
<assembly><name>Rhino.Scripting</name></assembly>
<members>
<member name="P:Rhino.Scripting.DefaultDict`2.Items">
<summary>
 Returns a seq of key and value tuples
</summary>
</member>
<member name="M:Rhino.Scripting.DefaultDict`2.Pop(`0)">
<summary>
 Get a value and remove it from Dictionary, like *.pop() in Python 
</summary>
</member>
<member name="T:Rhino.Scripting.DefaultDict`2">
<summary>A System.Collections.Generic.Dictionary with default Values that get created upon accessing a key.
 If accessing a non exiting key , the default function is called to create and set it. 
 Like defaultdict in Python</summary>    
<param name="defaultFun">(unit->'V): The function to create a default Value</param>
</member>
<member name="P:Rhino.Scripting.RhinoScriptSyntax.SynchronizationContext(System.Threading.SynchronizationContext)">
<summary>The Synchronization Context of the Rhino UI Therad.
This MUST be set at the  beginning of every Script if using UI dialogs and script is not running on UI thread</summary>
</member>
<member name="P:Rhino.Scripting.RhinoScriptSyntax.SynchronizationContext">
<summary>The Synchronization Context of the Rhino UI Therad.
This MUST be set at the  beginning of every Script if using UI dialogs and script is not running on UI thread</summary>
</member>
<member name="P:Rhino.Scripting.RhinoScriptSyntax.Sticky">
<summary>
 A Dictionary to store state between scripting session
</summary>
</member>
<member name="P:Rhino.Scripting.RhinoScriptSyntax.Filter">
<summary>
 An Integer Enum of Object types to be use in object selection functions
</summary>
</member>
<member name="M:Rhino.Scripting.RhinoScriptSyntax.TryCoerceSurface(System.Guid)">
<summary>attempt to get Surface class from given Guid</summary>
<param name="objectId">Surface Identifier (Guid)</param>
<returns>(Rhino.Geometry.Surface Option</returns>
</member>
<member name="M:Rhino.Scripting.RhinoScriptSyntax.TryCoerceRhinoObject(System.Guid)">
<summary>attempt to get RhinoObject from the document with a given objectId</summary>
<param name="objectId">object Identifier (Guid or string)</param>
<returns>a RhinoObject Option</returns>
</member>
<member name="M:Rhino.Scripting.RhinoScriptSyntax.TryCoerceMesh(System.Guid)">
<summary>attempt to get Mesh class from given Guid</summary>
<param name="objectId">Mesh Identifier (Guid)</param>
<returns>(Rhino.Geometry.Surface Option</returns>
</member>
<member name="M:Rhino.Scripting.RhinoScriptSyntax.TryCoerceLight(System.Guid)">
<summary>attempt to get Rhino LightObject from the document with a given objectId</summary>
<param name="objectId">(Guid): light Identifier</param>
<returns>a  Rhino.Geometry.Light. Option</returns>
</member>
<member name="M:Rhino.Scripting.RhinoScriptSyntax.TryCoerceGuid``1(``0)">
<summary>attempt to get a Guids from input</summary>
<param name="objectId">objcts , Guid or string</param>
<returns>Guid Option</returns>
</member>
<member name="M:Rhino.Scripting.RhinoScriptSyntax.TryCoerceGeometry(System.Guid)">
<summary>attempt to get GeometryBase class from given Guid</summary>
<param name="objectId">geometry Identifier (Guid)</param>
<returns>(Rhino.Geometry.GeometryBase Option</returns>
</member>
<member name="M:Rhino.Scripting.RhinoScriptSyntax.TryCoerceCurve(System.Guid,System.Int32)">
<summary>attempt to get curve geometry from the document with a given objectId</summary>
<param name="objectId">objectId (Guid or string) to be RhinoScriptSyntax.Coerced into a curve</param>
<param name="segmentIndex">(int) Optional, index of segment to retrieve. To ignore segmentIndex give -1 as argument</param>
<returns>(Rhino.Geometry.Curve. Option</returns>
</member>
<member name="M:Rhino.Scripting.RhinoScriptSyntax.TryCoerceBrep(System.Guid)">
<summary>attempt to get a Polysurface or Brep class from given Guid</summary>
<param name="objectId">Polysurface Identifier (Guid)</param>
<returns>(Rhino.Geometry.Mesh Option</returns>
</member>
<member name="M:Rhino.Scripting.RhinoScriptSyntax.ToNiceString``1(``0,System.Boolean)">
<summary>Returns a nice string for any kinds of objects or values, for most objects this is just calling *.ToString()</summary>
<param name="x">('T): the value or object to represent as string</param>
<param name="state">(bool) Optional, Default Value: <c>true</c>
 Applicable if the value x is a Seq: If true  the string will only show the first 4 items per seq or nested seq. If false all itemes will be in the string</param>
<returns>(stirng) the string</returns>
</member>
<member name="M:Rhino.Scripting.RhinoScriptSyntax.PrintSeq``1(System.Collections.Generic.IEnumerable{``0},System.String)">
<summary>Prints Sequence of objects or values separated by a space charcter or a custom value</summary>
<param name="xs">('T): the values or objects to print</param>
<param name="separator">(string) Optional, Default Value: a space charcater <c>" "</c></param>
<returns>(unit) voId, nothing</returns>
</member>
<member name="M:Rhino.Scripting.RhinoScriptSyntax.PrintFull``2(``0,``1)">
<summary>Prints two objects or value to Rhino Command line. 
  If the value is a Seq the string will conatain a line for each item and per nested item</summary>
<param name="x1">('T): the first value or object to print</param>
<param name="x2">('T): the second value or object to print</param>    
<returns>(unit) voId, nothing</returns>
</member>
<member name="M:Rhino.Scripting.RhinoScriptSyntax.PrintFull``1(``0)">
<summary>Prints an object or value to Rhino Command line. 
  If the value is a Seq the string will conatain a line for each item and per nested item</summary>
<param name="x">('T): the value or object to print</param>   
<returns>(unit) voId, nothing</returns>
</member>
<member name="M:Rhino.Scripting.RhinoScriptSyntax.Print``2(``0,``1)">
<summary>Prints two objects or value to Rhino Command line. 
  If the value is a Seq the string will only show the first 4 items per seq or nested seq</summary>
<param name="x1">('T): the first value or object to print</param>
<param name="x2">('T): the second value or object to print</param>    
<returns>(unit) voId, nothing</returns>
</member>
<member name="M:Rhino.Scripting.RhinoScriptSyntax.Print``1(``0)">
<summary>Prints an object or value to Rhino Command line. 
  If the value is a Seq the string will only show the first 4 items per seq or nested seq</summary>
<param name="x">('T): the value or object to print</param>
<param name="state">(bool) Optional, Default Value: <c>true</c>
If true and the value x is a Seq the string will be no longer than 4 lines per nested Seq by</param>
<returns>(unit) voId, nothing</returns>
</member>
<member name="M:Rhino.Scripting.RhinoScriptSyntax.Fxrange(System.Double,System.Double,System.Double)">
<summary>Like the Python 'xrange' function for integers this creates a range of floating point values.
The last or stop value will NOT be included in range as per python semantics, this is different from F# semantics on range expressions</summary>
<param name="start">(float): first value of range</param> 
<param name="stop">(float): end of range( this last value will not be included in range, Python semantics)</param>    
<param name="step">(float): step size between two values</param>
<returns>(float seq) a lazy seq of loats</returns>
</member>
<member name="M:Rhino.Scripting.RhinoScriptSyntax.Frange(System.Double,System.Double,System.Double)">
<summary>Like the Python 'range' function for integers this creates a range of floating point values.
This last or stop value will NOT be included in range as per python semantics, this is different from F# semantics on range expressions</summary>
<param name="start">(float): first value of range</param> 
<param name="stop">(float): end of range( this last value will not be included in range, Python semantics)</param>    
<param name="step">(float): step size between two values</param>
<returns>(float ResizeArray)</returns>
</member>
<member name="M:Rhino.Scripting.RhinoScriptSyntax.CoerceXform``1(``0)">
<summary>Convert input into a Rhino.Geometry.Transform Transformation Matrix if possible</summary>
<param name="xform">object to convert</param>
<returns>(Rhino.Geometry.Transform) Fails on bad input</returns>   
</member>
<member name="M:Rhino.Scripting.RhinoScriptSyntax.CoerceView``1(``0)">
<summary>Attempt to get Rhino View Object from the name of the view, can be a standart or page view</summary>
<param name="view">(string or Guid): Name or Guid the view, empty string will return the Active view</param> 
<returns>a Doc.View object) Fails on bad input</returns>
</member>
<member name="M:Rhino.Scripting.RhinoScriptSyntax.CoerceTextEntity``1(``0)">
<summary>attempt to get TextEntity Geometry</summary>
<param name="objectId">(Guid): objectId of TextEntity object</param> 
<returns>a Geometry.TextEntity) Fails on bad input</returns>
</member>
<member name="M:Rhino.Scripting.RhinoScriptSyntax.CoerceTextDot``1(``0)">
<summary>attempt to get TextDot Geometry</summary>
<param name="objectId">(Guid): objectId of TextDot object</param> 
<returns>a Geometry.TextDot) Fails on bad input</returns>
</member>
<member name="M:Rhino.Scripting.RhinoScriptSyntax.CoerceSurface``1(``0)">
<summary>attempt to get surface geometry from the document with a given objectId</summary>
<param name="objectId">objectId = the object's Identifier</param>
<returns>(Rhino.Geometry.Surface) Fails on bad input</returns>
</member>
<member name="M:Rhino.Scripting.RhinoScriptSyntax.CoerceRhinoObject(System.Guid)">
<summary>attempt to get RhinoObject from the document with a given objectId</summary>
<param name="objectId">object Identifier (Guid or string)</param>
<returns>a RhinoObject) Fails on bad input</returns>
</member>
<member name="M:Rhino.Scripting.RhinoScriptSyntax.CoercePointCloud``1(``0)">
<summary>attempt to get Rhino PointCloud Geometry</summary>
<param name="objectId">(Guid): objectId of PointCloud object</param> 
<returns>a Geometry.PointCloud) Fails on bad input</returns>
</member>
<member name="M:Rhino.Scripting.RhinoScriptSyntax.CoercePlane``1(``0)">
<summary>Convert input into a Rhino.Geometry.Plane if possible</summary>
<param name="plane">Plane, point, list, tuple</param>
<returns>(Rhino.Geometry.Plane) Fails on bad input</returns>
</member>
<member name="M:Rhino.Scripting.RhinoScriptSyntax.CoercePageView``1(``0)">
<summary>Attempt to get Rhino Page (or Layout) View Object from the name of the Layout</summary>
<param name="view">(string): Name of the Layout</param> 
<returns>a Doc.View object) Fails on bad input</returns>
</member>
<member name="M:Rhino.Scripting.RhinoScriptSyntax.CoerceNurbsSurface``1(``0)">
<summary>attempt to get surface geometry from the document with a given objectId</summary>
<param name="objectId">objectId = the object's Identifier</param>
<returns>(Rhino.Geometry.Surface) Fails on bad input</returns>
</member>
<member name="M:Rhino.Scripting.RhinoScriptSyntax.CoerceMesh``1(``0)">
<summary>attempt to get mesh geometry from the document with a given objectId</summary>
<param name="objectId">object Identifier (Guid or string)</param>
<returns>(Rhino.Geometry.Mesh) Fails on bad input</returns>    
</member>
<member name="M:Rhino.Scripting.RhinoScriptSyntax.CoerceLine``1(``0)">
<summary>attempt to get Rhino Line Geometry</summary>
<param name="line">Line, two points or Guid</param>
<returns>Geometry.Line) Fails on bad input</returns>
</member>
<member name="M:Rhino.Scripting.RhinoScriptSyntax.CoerceLight``1(``0)">
<summary>attempt to get Rhino LightObject from the document with a given objectId</summary>
<param name="objectId">(Guid): light Identifier</param>
<returns>a  Rhino.Geometry.Light) Fails on bad input</returns>
</member>
<member name="M:Rhino.Scripting.RhinoScriptSyntax.CoerceLayer``1(``0)">
<summary>attempt to get Rhino LayerObject from the document with a given objectId or fullame</summary>
<param name="nameOrId">(string or Guid or index): layers Identifier name</param>
<returns>DocObjectys.Layer  Fails on bad input</returns>
</member>
<member name="M:Rhino.Scripting.RhinoScriptSyntax.CoerceHatchObject(System.Guid)">
<summary>attempt to get Rhino Hatch Object</summary>
<param name="objectId">(Guid): objectId of Hatch object</param> 
<returns>(DocObjects.HatchObject) Fails on bad input</returns>
</member>
<member name="M:Rhino.Scripting.RhinoScriptSyntax.CoerceHatch``1(``0)">
<summary>attempt to get Hatch Geometry</summary>
<param name="objectId">(Guid): objectId of Hatch object</param> 
<returns>a Geometry.CoerceHatch) Fails on bad input</returns>
</member>
<member name="M:Rhino.Scripting.RhinoScriptSyntax.CoerceGuid``1(``0)">
<summary>Attempt to get a Guids from input</summary>
<param name="objectId">objcts , Guid or string</param>
<returns>Guid) Fails on bad input</returns>
</member>
<member name="M:Rhino.Scripting.RhinoScriptSyntax.CoerceGeometry``1(``0)">
<summary>attempt to get GeometryBase class from given input,</summary>
<param name="objectId">geometry Identifier (Guid or string)</param>
<returns>(Rhino.Geometry.GeometryBase) Fails on bad input</returns>
</member>
<member name="M:Rhino.Scripting.RhinoScriptSyntax.CoerceDetailViewObject(System.Guid)">
<summary>attempt to get Detail view rectangle Object</summary>
<param name="objectId">(Guid): objectId of Detail object</param> 
<returns>a DocObjects.DetailViewObject) Fails on bad input</returns>
</member>
<member name="M:Rhino.Scripting.RhinoScriptSyntax.CoerceDetailView``1(``0)">
<summary>attempt to get Detail view rectangle Geometry</summary>
<param name="objectId">(Guid): objectId of Detail object</param> 
<returns>a Geometry.DetailView) Fails on bad input</returns>
</member>
<member name="M:Rhino.Scripting.RhinoScriptSyntax.CoerceCurve``1(``0,System.Int32)">
<summary>attempt to get curve geometry from the document with a given objectId</summary>
<param name="objectId">objectId (Guid or string) to be RhinoScriptSyntax.Coerced into a curve</param>
<param name="segmentIndex">(int) Optional, index of segment to retrieve. To ignore segmentIndex give -1 as argument</param>
<returns>(Rhino.Geometry.Curve) Fails on bad input</returns>
</member>
<member name="M:Rhino.Scripting.RhinoScriptSyntax.CoerceColor``1(``0)">
<summary>attempt to get a System.Drawing.Color also works on natrural language color strings see Drawing.ColorTranslator.FromHtml</summary>
<param name="color">string, tuple with  or 3 or 4 items</param>
<returns>System.Drawing.Color in ARGB form (not as named color) this will provIde better comparison to other colors.
 For example the named color Red is not equal to fromRGB(255, 0, 0) ) Fails on bad input</returns>
</member>
<member name="M:Rhino.Scripting.RhinoScriptSyntax.CoerceBrep``1(``0)">
<summary>attempt to get polysurface geometry from the document with a given objectId</summary>
<param name="objectId">objectId (Guid or string) to be RhinoScriptSyntax.Coerced into a brep</param>
<returns>(Rhino.Geometry.Brep) Fails on bad input</returns>
</member>
<member name="M:Rhino.Scripting.RhinoScriptSyntax.CoerceBlockInstanceObject(System.Guid)">
<summary>Returns the Rhino Block instance object for a given Id</summary>
<param name="objectId">(Guid) Id of block instance</param>    
<returns>(DocObjects.InstanceObject) block instance object</returns>
</member>
<member name="M:Rhino.Scripting.RhinoScriptSyntax.CoerceAnnotation(System.Guid)">
<summary>attempt to get Rhino Annotation Object</summary>
<param name="objectId">(Guid): objectId of annotation object</param> 
<returns>(DocObjects.AnnotationObjectBase) Fails on bad input</returns>
</member>
<member name="M:Rhino.Scripting.RhinoScriptSyntax.Coerce3dVector``1(``0)">
<summary>Convert input into a Rhino.Geometry.Vector3d if possible</summary>
<param name="vector">input to convert, Point3d, Vector3d, Point3f, Vector3f, str, Guid, or seq</param>    
<returns>(Rhino.Geometry.Vector3d) Fails on bad input</returns>
</member>
<member name="M:Rhino.Scripting.RhinoScriptSyntax.Coerce3dPoint``1(``0)">
<summary>Converts input into a Rhino.Geometry.Point3d if possible</summary>
<param name="pt">input to convert, Point3d, Vector3d, Point3f, Vector3f, str, Guid, or seq</param>
<returns>(Rhino.Geometry.Point3d) Fails on bad input</returns>
</member>
<member name="M:Rhino.Scripting.RhinoScriptSyntax.Coerce2dPoint``1(``0)">
<summary>Convert input into a Rhino.Geometry.Point2d if possible</summary>
<param name="point">input to convert, Point3d, Vector3d, Point3f, Vector3f, str, Guid, or seq</param>
<returns>(Rhino.Geometry.Point2d) Fails on bad input</returns>
</member>
<member name="M:Rhino.Scripting.RhinoScriptSyntax.Clamp(System.Double,System.Double,System.Double)">
<summary>clamps a value between a lower and an upper bound</summary>
<param name="minVal">(float): lower bound</param>
<param name="maxVal">(float): upper bound</param>
<param name="value">(float): the value to clamp</param>
<returns>(float):clamped value</returns>
</member>
<member name="T:Rhino.Scripting.RhinoScriptSyntax">
<summary>
 A static class with static members provIding functions Identical to RhinoScript in Pyhton or VBscript 
</summary>
</member>
<member name="T:Rhino.Scripting.Filter">
<summary>
 An Integer Enum of Object types to be use in object selection functions
 Don&apos;t create an instance, use the instance in RhinoScriptSyntax.Filter
</summary>
</member>
<member name="M:Rhino.Scripting.ResizeArrayModule.rotate``1(System.Int32,System.Collections.Generic.List{``0})">
<summary>
 shift items poistion  towards the end of ResizeArray. refilling at start from end.
</summary>
</member>
<member name="M:Rhino.Scripting.ResizeArrayModule.unzip``2(System.Collections.Generic.List{System.Tuple{``0,``1}})">
<summary>
 Split an array of pairs into two arrays.
</summary>
</member>
<member name="M:Rhino.Scripting.ResizeArrayModule.zip``2(System.Collections.Generic.List{``0},System.Collections.Generic.List{``1})">
<summary>
 Combine the two arrays into an array of pairs. The two arrays must have equal lengths, 
 otherwise an &lt;c&gt;ArgumentException&lt;/c&gt; is raised..
</summary>
</member>
<member name="M:Rhino.Scripting.ResizeArrayModule.tryFindIndexi``1(Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean}},System.Collections.Generic.List{``0})">
<summary>
 Return the index of the first element in the array
 that satisfies the given predicate.
</summary>
</member>
<member name="M:Rhino.Scripting.ResizeArrayModule.tryFindIndex``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},System.Collections.Generic.List{``0})">
<summary>
 Return the index of the first element in the array
 that satisfies the given predicate.
</summary>
</member>
<member name="M:Rhino.Scripting.ResizeArrayModule.singleton``1(``0)">
<summary>
 Return an array containing the given element.
</summary>
</member>
<member name="M:Rhino.Scripting.ResizeArrayModule.scanBack``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,``1}},System.Collections.Generic.List{``0},``1)">
<summary>
 Like &lt;c&gt;foldBack&lt;/c&gt;, but return both the intermediary and final results.
</summary>
</member>
<member name="M:Rhino.Scripting.ResizeArrayModule.scan``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,``0}},``0,System.Collections.Generic.List{``1})">
<summary>
 Like &lt;c&gt;fold&lt;/c&gt;, but return the intermediary and final results.
</summary>
</member>
<member name="M:Rhino.Scripting.ResizeArrayModule.mapi2``3(Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,``2}}},System.Collections.Generic.List{``0},System.Collections.Generic.List{``1})">
<summary>
 Build a new collection whose elements are the results of applying the given function
 to the corresponding elements of the two collections pairwise.  The two input
 arrays must have the same lengths, otherwise an &lt;c&gt;ArgumentException&lt;/c&gt; is
 raised.
</summary>
</member>
<member name="M:Rhino.Scripting.ResizeArrayModule.iteri2``2(Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.Unit}}},System.Collections.Generic.List{``0},System.Collections.Generic.List{``1})">
<summary>
 Apply the given function to pair of elements drawn from matching indices in two arrays,
 also passing the index of the elements. The two arrays must have the same lengths, 
 otherwise an &lt;c&gt;ArgumentException&lt;/c&gt; is raised.
</summary>
</member>
<member name="M:Rhino.Scripting.ResizeArrayModule.isEmpty``1(System.Collections.Generic.List{``0})">
<summary>
 Return True if the given array is empty, otherwise False.
</summary>
</member>
<member name="M:Rhino.Scripting.ResizeArrayModule.forall2``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,System.Boolean}},System.Collections.Generic.List{``0},System.Collections.Generic.List{``1})">
<summary>
 Test elements of the two arrays pairwise to see if all pairs of elements satisfy the given predicate.
 Raise &lt;c&gt;ArgumentException&lt;/c&gt; if the arrays have different lengths.
</summary>
</member>
<member name="M:Rhino.Scripting.ResizeArrayModule.foldBack2``3(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.FSharpFunc{``2,``2}}},System.Collections.Generic.List{``0},System.Collections.Generic.List{``1},``2)">
<summary>
 Apply a function to pairs of elements drawn from the two collections, right-to-left, 
 threading an accumulator argument through the computation.  The two input
 arrays must have the same lengths, otherwise an &lt;c&gt;ArgumentException&lt;/c&gt; is
 raised.
</summary>
</member>
<member name="M:Rhino.Scripting.ResizeArrayModule.fold2``3(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.FSharpFunc{``2,``0}}},``0,System.Collections.Generic.List{``1},System.Collections.Generic.List{``2})">
<summary>
 Apply a function to pairs of elements drawn from the two collections, 
 left-to-right, threading an accumulator argument
 through the computation.  The two input
 arrays must have the same lengths, otherwise an &lt;c&gt;ArgumentException&lt;/c&gt; is
 raised.
</summary>
</member>
<member name="M:Rhino.Scripting.ResizeArrayModule.reduceBack``1(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``0,``0}},System.Collections.Generic.List{``0})">
<summary>
 Apply a function to each element of the array, threading an accumulator argument
 through the computation. If the input function is &lt;c&gt;f&lt;/c&gt; and the elements are &lt;c&gt;i0...iN&lt;/c&gt; then 
 computes &lt;c&gt;f i0 (...(f iN-1 iN))&lt;/c&gt;. Raises ArgumentException if the array has size zero.
</summary>
</member>
<member name="M:Rhino.Scripting.ResizeArrayModule.reduce``1(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``0,``0}},System.Collections.Generic.List{``0})">
<summary>
 Apply a function to each element of the array, threading an accumulator argument
 through the computation. If the input function is &lt;c&gt;f&lt;/c&gt; and the elements are &lt;c&gt;i0...iN&lt;/c&gt; 
 then computes &lt;c&gt;f (... (f i0 i1)...) iN&lt;/c&gt;. Raises ArgumentException if the array has size zero.
</summary>
</member>
<member name="M:Rhino.Scripting.ResizeArrayModule.findIndexi``1(Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean}},System.Collections.Generic.List{``0})">
<summary>
 Return the index of the first element in the array
 that satisfies the given predicate. Raise &lt;c&gt;KeyNotFoundException&lt;/c&gt; if 
 none of the elements satisfy the predicate.
</summary>
</member>
<member name="M:Rhino.Scripting.ResizeArrayModule.findIndex``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},System.Collections.Generic.List{``0})">
<summary>
 Return the index of the first element in the array
 that satisfies the given predicate. Raise &lt;c&gt;KeyNotFoundException&lt;/c&gt; if 
 none of the elements satisfy the predicate.
</summary>
</member>
<member name="M:Rhino.Scripting.ResizeArrayModule.exists2``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,System.Boolean}},System.Collections.Generic.List{``0},System.Collections.Generic.List{``1})">
<summary>
 Test elements of the two arrays pairwise to see if any pair of element satisfies the given predicate.
 Raise ArgumentException if the arrays have different lengths.
</summary>
</member>
<member name="M:Rhino.Scripting.ResizeArrayModule.ofSeq``1(System.Collections.Generic.IEnumerable{``0})">
<summary>
 Build a &lt;c&gt;ResizeArray&lt;/c&gt; from the given elements.
</summary>
</member>
<member name="M:Rhino.Scripting.ResizeArrayModule.toSeq``1(System.Collections.Generic.List{``0})">
<summary>
 Return a view of the array as an enumerable object.
</summary>
</member>
<member name="M:Rhino.Scripting.ResizeArrayModule.ofArray``1(``0[])">
<summary>
 Build a &lt;c&gt;ResizeArray&lt;/c&gt; from the given elements.
</summary>
</member>
<member name="M:Rhino.Scripting.ResizeArrayModule.toArray``1(System.Collections.Generic.List{``0})">
<summary>
 Return a fixed-length array containing the elements of the input &lt;c&gt;ResizeArray&lt;/c&gt;.
</summary>
</member>
<member name="M:Rhino.Scripting.ResizeArrayModule.sortBy``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},System.Collections.Generic.List{``0})">
<summary>
 Sort the elements using the key extractor and generic comparison on the keys.
</summary>
</member>
<member name="M:Rhino.Scripting.ResizeArrayModule.sort``1(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``0,System.Int32}},System.Collections.Generic.List{``0})">
<summary>
 Sort the elements using the given comparison function.
</summary>
</member>
<member name="M:Rhino.Scripting.ResizeArrayModule.rev``1(System.Collections.Generic.List{``0})">
<summary>
 Return a new array with the elements in reverse order.
</summary>
</member>
<member name="M:Rhino.Scripting.ResizeArrayModule.tryPick``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpOption{``1}},System.Collections.Generic.List{``0})">
<summary>
 Apply the given function to successive elements, returning the first
 result where function returns Some(x) for some x.
</summary>
</member>
<member name="M:Rhino.Scripting.ResizeArrayModule.tryFind``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},System.Collections.Generic.List{``0})">
<summary>
 Return the first element for which the given function returns True.
 Return None if no such element exists.
</summary>
</member>
<member name="M:Rhino.Scripting.ResizeArrayModule.find``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},System.Collections.Generic.List{``0})">
<summary>
 Return the first element for which the given function returns True.
 Raise &lt;c&gt;KeyNotFoundException&lt;/c&gt; if no such element exists.
</summary>
</member>
<member name="M:Rhino.Scripting.ResizeArrayModule.choose``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpOption{``1}},System.Collections.Generic.List{``0})">
<summary>
 Apply the given function to each element of the array. Return
 the array comprised of the results &apos;x&apos; for each element where
 the function returns &lt;c&gt;Some(x)&lt;/c&gt;.
</summary>
</member>
<member name="M:Rhino.Scripting.ResizeArrayModule.partition``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},System.Collections.Generic.List{``0})">
<summary>
 Split the collection into two collections, containing the 
 elements for which the given predicate returns True and False
 respectively.
</summary>
</member>
<member name="M:Rhino.Scripting.ResizeArrayModule.filter``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},System.Collections.Generic.List{``0})">
<summary>
 Return a new collection containing only the elements of the collection
 for which the given predicate returns True.
</summary>
</member>
<member name="M:Rhino.Scripting.ResizeArrayModule.forall``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},System.Collections.Generic.List{``0})">
<summary>
 Test if all elements of the array satisfy the given predicate.
 If the input function is &lt;c&gt;f&lt;/c&gt; and the elements are &lt;c&gt;i0...iN&lt;/c&gt; and &quot;j0...jN&quot;
 then computes &lt;c&gt;p i0 &amp;&amp; ... &amp;&amp; p iN&lt;/c&gt;.
</summary>
</member>
<member name="M:Rhino.Scripting.ResizeArrayModule.exists``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},System.Collections.Generic.List{``0})">
<summary>
 Test if any element of the array satisfies the given predicate.
 If the input function is &lt;c&gt;f&lt;/c&gt; and the elements are &lt;c&gt;i0...iN&lt;/c&gt; 
 then computes &lt;c&gt;p i0 or ... or p iN&lt;/c&gt;.
</summary>
</member>
<member name="M:Rhino.Scripting.ResizeArrayModule.mapi``2(Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.FSharpFunc{``0,``1}},System.Collections.Generic.List{``0})">
<summary>
 Build a new array whose elements are the results of applying the given function
 to each of the elements of the array. The integer index passed to the
 function indicates the index of element being transformed.
</summary>
</member>
<member name="M:Rhino.Scripting.ResizeArrayModule.iteri``1(Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.Unit}},System.Collections.Generic.List{``0})">
<summary>
 Apply the given function to each element of the array.  The integer passed to the
 function indicates the index of element.
</summary>
</member>
<member name="M:Rhino.Scripting.ResizeArrayModule.map2``3(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,``2}},System.Collections.Generic.List{``0},System.Collections.Generic.List{``1})">
<summary>
 Build a new collection whose elements are the results of applying the given function
 to the corresponding elements of the two collections pairwise.  The two input
 arrays must have the same lengths.
</summary>
</member>
<member name="M:Rhino.Scripting.ResizeArrayModule.iter2``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.Unit}},System.Collections.Generic.List{``0},System.Collections.Generic.List{``1})">
<summary>
 Apply the given function to two arrays simultaneously. The
 two arrays must have the same lengths, otherwise an Invalid Argument exception is
 raised.
</summary>
</member>
<member name="M:Rhino.Scripting.ResizeArrayModule.map``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},System.Collections.Generic.List{``0})">
<summary>
 Build a new array whose elements are the results of applying the given function
 to each of the elements of the array.
</summary>
</member>
<member name="M:Rhino.Scripting.ResizeArrayModule.iter``1(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.Unit},System.Collections.Generic.List{``0})">
<summary>
 Apply the given function to each element of the array. 
</summary>
</member>
<member name="M:Rhino.Scripting.ResizeArrayModule.foldBack``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,``1}},System.Collections.Generic.List{``0},``1)">
<summary>
 Apply a function to each element of the array, threading an accumulator argument
 through the computation. If the input function is &lt;c&gt;f&lt;/c&gt; and the elements are &lt;c&gt;i0...iN&lt;/c&gt; then 
 computes &lt;c&gt;f i0 (...(f iN s))&lt;/c&gt;.
</summary>
</member>
<member name="M:Rhino.Scripting.ResizeArrayModule.fold``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,``0}},``0,System.Collections.Generic.List{``1})">
<summary>
 Apply a function to each element of the collection, threading an accumulator argument
 through the computation. If the input function is &lt;c&gt;f&lt;/c&gt; and the elements are &lt;c&gt;i0...iN&lt;/c&gt; 
 then computes &lt;c&gt;f (... (f s i0)...) iN&lt;/c&gt;
</summary>
</member>
<member name="M:Rhino.Scripting.ResizeArrayModule.ofList``1(Microsoft.FSharp.Collections.FSharpList{``0})">
<summary>
 Build an array from the given list.
</summary>
</member>
<member name="M:Rhino.Scripting.ResizeArrayModule.toList``1(System.Collections.Generic.List{``0})">
<summary>
 Build a list from the given array.
</summary>
</member>
<member name="M:Rhino.Scripting.ResizeArrayModule.blit``1(System.Collections.Generic.List{``0},System.Int32,System.Collections.Generic.List{``0},System.Int32,System.Int32)">
<summary>
 Read a range of elements from the first array and write them into the second.
</summary>
</member>
<member name="M:Rhino.Scripting.ResizeArrayModule.fill``1(System.Collections.Generic.List{``0},System.Int32,System.Int32,``0)">
<summary>
 Fill a range of the collection with the given element.
</summary>
</member>
<member name="M:Rhino.Scripting.ResizeArrayModule.copy``1(System.Collections.Generic.List{``0})">
<summary>
 Build a new array that contains the elements of the given array.
</summary>
</member>
<member name="M:Rhino.Scripting.ResizeArrayModule.sub``1(System.Collections.Generic.List{``0},System.Int32,System.Int32)">
<summary>
 Build a new array that contains the given subrange specified by
 starting index and length.
</summary>
</member>
<member name="M:Rhino.Scripting.ResizeArrayModule.concat``1(Microsoft.FSharp.Collections.FSharpList{System.Collections.Generic.List{``0}})">
<summary>
 Build a new array that contains the elements of each of the given list of arrays.
</summary>
</member>
<member name="M:Rhino.Scripting.ResizeArrayModule.append``1(System.Collections.Generic.List{``0},System.Collections.Generic.List{``0})">
<summary>
 Build a new array that contains the elements of the first array followed by the elements of the second array.
</summary>
</member>
<member name="M:Rhino.Scripting.ResizeArrayModule.init``1(System.Int32,Microsoft.FSharp.Core.FSharpFunc{System.Int32,``0})">
<summary>
 Create an array by calling the given generator on each index.
</summary>
</member>
<member name="M:Rhino.Scripting.ResizeArrayModule.create``1(System.Int32,``0)">
<summary>
 Create an array whose elements are all initially the given value.
</summary>
</member>
<member name="M:Rhino.Scripting.ResizeArrayModule.set``1(System.Collections.Generic.List{``0},System.Int32,``0)">
<summary>
 Set the value of an element in the collection. You can also use the syntax &lt;c&gt;arr.[idx] &lt;- e&lt;/c&gt;.
</summary>
</member>
<member name="M:Rhino.Scripting.ResizeArrayModule.get``1(System.Collections.Generic.List{``0},System.Int32)">
<summary>
 Fetch an element from the collection.  You can also use the syntax &lt;c&gt;arr.[idx]&lt;/c&gt;.
</summary>
</member>
<member name="M:Rhino.Scripting.ResizeArrayModule.length``1(System.Collections.Generic.List{``0})">
<summary>
 Return the length of the collection.  You can also use property &lt;c&gt;arr.Length&lt;/c&gt;.
</summary>
</member>
<member name="T:Rhino.Scripting.ResizeArrayModule">
<summary>
 Generic operations on the type System.Collections.Generic.List, which is called ResizeArray in the F# libraries.
</summary>
</member>
<member name="M:Rhino.Scripting.MinMaxSort.diff``2(``0,``0)">
<summary>
Gets the positiv differnce between 2 numbers. 
Avoids the integer( or byte) overflow and underflow risk of &quot;abs(a-b)&quot;
</summary>
</member>
<member name="M:Rhino.Scripting.MinMaxSort.sort3By``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},``0,``0,``0)">
<summary>
If any are equal after Function is applied then the the order is kept
</summary>
</member>
<member name="M:Rhino.Scripting.MinMaxSort.sort3``1(``0,``0,``0)">
<summary>
If any are equal then the the order is kept
</summary>
</member>
<member name="M:Rhino.Scripting.MinMaxSort.sort2By``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},``0,``0)">
<summary>
If they are equal then the the order is kept
</summary>
</member>
<member name="M:Rhino.Scripting.MinMaxSort.sort2``1(``0,``0)">
<summary>
If they are equal then the the order is kept
</summary>
</member>
<member name="M:Rhino.Scripting.MinMaxSort.maxBy``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},``0,``0)">
<summary>
If both are equal then the first is returned
</summary>
</member>
<member name="M:Rhino.Scripting.MinMaxSort.minBy``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},``0,``0)">
<summary>
If both are equal then the first is returned
</summary>
</member>
<member name="M:Rhino.Scripting.Compare.op_DotGreaterDot``1(System.Boolean,``0,``0)">
<summary>
For inner expressions: like this: min &lt;. x .&lt;. y .&lt; max
</summary>
</member>
<member name="M:Rhino.Scripting.Compare.op_DotLessDot``1(System.Boolean,``0,``0)">
<summary>
For inner expressions: like this: min &lt;. x .&lt;. y .&lt; max
</summary>
</member>
<member name="M:Rhino.Scripting.Compare.op_DotGreater``1(System.Boolean,``0,``0)">
<summary>
Point must be at middle of expression: like this: min &lt;. x .&lt; max
</summary>
</member>
<member name="M:Rhino.Scripting.Compare.op_DotLess``1(System.Boolean,``0,``0)">
<summary>
Point must be at middle of expression: like this: min &lt;. x .&lt; max
</summary>
</member>
<member name="M:Rhino.Scripting.Compare.op_GreaterDot``1(``0,``0)">
<summary>
Point must be at middle of expression: like this: min &lt;. x .&lt; max
</summary>
</member>
<member name="M:Rhino.Scripting.Compare.op_LessDot``1(``0,``0)">
<summary>
Point must be at middle of expression: like this: min &lt;. x .&lt; max
</summary>
</member>
<member name="M:Rhino.Scripting.Compare.op_DotGreaterEqualsDot``1(System.Boolean,``0,``0)">
<summary>
for inner expressions: like this: min &lt;. x .&lt;. y .&lt; max
</summary>
</member>
<member name="M:Rhino.Scripting.Compare.op_DotLessEqualsDot``1(System.Boolean,``0,``0)">
<summary>
for inner expressions: like this: min &lt;. x .&lt;. y .&lt; max
</summary>
</member>
<member name="M:Rhino.Scripting.Compare.op_DotGreaterEquals``1(System.Boolean,``0,``0)">
<summary>
Point must be at middle of expression: like this: min &lt;=. x .&lt;= max
</summary>
</member>
<member name="M:Rhino.Scripting.Compare.op_DotLessEquals``1(System.Boolean,``0,``0)">
<summary>
Point must be at middle of expression: like this: min &lt;=. x .&lt;= max
</summary>
</member>
<member name="M:Rhino.Scripting.Compare.op_GreaterEqualsDot``1(``0,``0)">
<summary>
Point must be at middle of expression: like this: min &lt;=. x .&lt;= max
</summary>
</member>
<member name="M:Rhino.Scripting.Compare.op_LessEqualsDot``1(``0,``0)">
<summary>
Point must be at middle of expression: like this: min &lt;=. x .&lt;= max
</summary>
</member>
<member name="M:Rhino.Scripting.UtilMath.randomStandardDeviation(System.Double,System.Double)">
<summary>
given mean  and standardDeviation returns a random value from this Gaussian distribution
if mean is 0 and stDev is 1 then 99% of values are  are within -2.3 to +2.3 ; 70% within -1 to +1
</summary>
</member>
<member name="M:Rhino.Scripting.UtilMath.toDegrees(System.Double)">
<summary>
converts Angels from Radians to Degrees
</summary>
</member>
<member name="M:Rhino.Scripting.UtilMath.toRadians(System.Double)">
<summary>
converts Angels from Degrees to Radians
</summary>
</member>
<member name="M:Rhino.Scripting.UtilMath.isNanOrInf(System.Double)">
<summary>
Test is a floating point value is Infinity or Not a Number
</summary>
</member>
<member name="M:Rhino.Scripting.UtilMath.op_DivideDot(System.Int32,System.Int32)">
<summary>
Gives a float from int / int division
&lt;c&gt;(float(i)) / (float(j))&lt;/c&gt; 
</summary>
</member>
<member name="M:Rhino.Scripting.UtilMath.op_MultiplyDot(System.Int32,System.Double)">
<summary>
Allows ints to be multiplied by floats
&lt;c&gt;int(round(float(i) * f))&lt;/c&gt; 
</summary>
</member>
<member name="M:Rhino.Scripting.UtilMath.floatOfObj``1(``0)">
<summary>
Get Float from any input. This helper enables more generic code in parsing sequences
</summary>
</member>
<member name="M:Rhino.Scripting.UtilMath.parseFloatEnDe(System.String)">
<summary>
First tries to parses english float (period as decimal separator),
if this fails tries to parse german floats,(comma as decimal separator)
</summary>
</member>
<member name="M:Rhino.Scripting.Util.ifZero2(System.Double,System.Double)">
<summary>
if second value is 0.0 return first else second
</summary>
</member>
<member name="M:Rhino.Scripting.Util.ifZero1(System.Double,System.Double)">
<summary>
if first value is 0.0 return second else first
</summary>
</member>
<member name="M:Rhino.Scripting.Util.range(System.Int32)">
<summary>
so that python range expressions dont need top be translated to F#
</summary>
</member>
<member name="M:Rhino.Scripting.Util.t3``3(``0,``1,``2)">
<summary>
Get third element of triple (tuple of three element)
</summary>
</member>
<member name="M:Rhino.Scripting.Util.t2``3(``0,``1,``2)">
<summary>
Get second element of triple (tuple of three element)
</summary>
</member>
<member name="M:Rhino.Scripting.Util.t1``3(``0,``1,``2)">
<summary>
Get first element of triple (tuple of three element)
</summary>
</member>
<member name="M:Rhino.Scripting.Util.op_BarGreaterGreater``2(``0,Microsoft.FSharp.Core.FSharpFunc{``0,``1})">
<summary>
apply function ( like |&gt; ) but ignore result. return original input
</summary>
</member>
<member name="M:Rhino.Scripting.Util.op_BarQmark``1(``0,``0)">
<summary>
Returns the value on the left unless it is null, then it returns the value on the right.
</summary>
</member>
<member name="M:Rhino.Scripting.NiceString.toNiceStringFull``1(``0)">
<summary>
 Nice formating for floats , some Rhino Objects and sequences of any kind, all items including nested items are printed out.
</summary>
</member>
<member name="M:Rhino.Scripting.NiceString.toNiceString``1(``0)">
<summary>
 Nice formating for floats , some Rhino Objects and sequences of any kind, first four items are printed out.
 set NiceString.toNiceStringMaxItemsPerSeq to other value if more or less shall be shown (default is 4)
 set NiceString.toNiceStringMaxDepth to change how deep nested lists are printed (default is 2)
</summary>
</member>
<member name="P:Rhino.Scripting.NiceString.sb">
<summary>
 the internal stringbuilder for recursive function
</summary>
</member>
<member name="M:Rhino.Scripting.NiceString.vector3fToString(Rhino.Geometry.Vector3f)">
<summary>
Like the ToString function but with appropiate precision formating       
</summary>
</member>
<member name="M:Rhino.Scripting.NiceString.vector3dToString(Rhino.Geometry.Vector3d)">
<summary>
Like the ToString function but with appropiate precision formating       
</summary>
</member>
<member name="M:Rhino.Scripting.NiceString.point3fToString(Rhino.Geometry.Point3f)">
<summary>
Like the ToString function but with appropiate precision formating       
</summary>
</member>
<member name="M:Rhino.Scripting.NiceString.point3dToString(Rhino.Geometry.Point3d)">
<summary>
Like the ToString function but with appropiate precision formating       
</summary>
</member>
<member name="M:Rhino.Scripting.NiceString.singleToString(System.Single)">
<summary>
 with automatic formationg of precision
</summary>
</member>
<member name="M:Rhino.Scripting.NiceString.floatToString(System.Double)">
<summary>
 with automatic formationg of precision
</summary>
</member>
<member name="M:Rhino.Scripting.ResizeArrayBuilder.resizeArray``1">
<summary>
 Computational Expression:  use &apos;yield&apos; to add alements to a ResizeArray (= Collections.Generic.List).
</summary>
</member>
<member name="P:Rhino.Scripting.StringBufferBuilder.stringBuffer">
<summary>
Computational Expression:  
use &apos;yield&apos; to append text
and &apos;yield!&apos; (with an exclamation mark)  to append text followed by a new line character.
accepts ints and floats too.(including nice Formating)
</summary>
</member>
<member name="T:Rhino.Scripting.OptionBuilder.MaybeBuilder">
<summary>
 The maybe monad. 
</summary>
</member>
<member name="P:Rhino.Scripting.OptionBuilder.maybe">
<summary>
 A maybe monad. 
</summary>
</member>
<member name="M:Rhino.Scripting.TypeExtensions.[]`1.SetItem``1(``0[],System.Int32,``0)">
<summary>
 Allows for negtive index too (like python)
</summary>
</member>
<member name="M:Rhino.Scripting.TypeExtensions.[]`1.GetItem``1(``0[],System.Int32)">
<summary>
 Allows for negtive index too (like python)
</summary>
</member>
<member name="M:Rhino.Scripting.TypeExtensions.List`1.SetItem``1(System.Collections.Generic.List{``0},System.Int32,``0)">
<summary>
 Allows for negtive index too (like python)
</summary>
</member>
<member name="M:Rhino.Scripting.TypeExtensions.List`1.GetItem``1(System.Collections.Generic.List{``0},System.Int32)">
<summary>
 Allows for negtive index too (like python)
</summary>
</member>
<member name="M:Rhino.Scripting.TypeExtensions.List`1.GetSlice``1(System.Collections.Generic.List{``0},Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{System.Int32})">
<summary>
 Allows for negtive slice index too ( -1 = last element), returns a shallow copy including the end index.
</summary>
</member>
<member name="M:Rhino.Scripting.TypeExtensions.Dictionary`2.get_Items``2(System.Collections.Generic.Dictionary{``0,``1})">
<summary>
 Returns a seq of key and value tuples
</summary>
</member>
<member name="M:Rhino.Scripting.TypeExtensions.Dictionary`2.Pop``2(System.Collections.Generic.Dictionary{``0,``1},``0)">
<summary>
 get a value and remove it from Dictionary, like *.pop() in Python         
</summary>
</member>
<member name="M:Rhino.Scripting.TypeExtensions.Color.AreEqualARGB.Static(System.Drawing.Color,System.Drawing.Color)">
<summary>
Compare two colors only by Alpha, Red, Green and Blue values ignoring other fields such as IsNamedColor
</summary>
</member>
<member name="M:Rhino.Scripting.TypeExtensions.Color.EqualsARGB(System.Drawing.Color,System.Drawing.Color)">
<summary>
Compare to another color only by Alpha, Red, Green and Blue values ignoring other fields such as IsNamedColor        
</summary>
</member>
<member name="M:Rhino.Scripting.TypeExtensions.Single.get_ToNiceString(System.Single)">
<summary>
 with automatic formating of display precision depending on float size
</summary>
</member>
<member name="M:Rhino.Scripting.TypeExtensions.Double.get_ToNiceString(System.Double)">
<summary>
 with automatic formating of display precision depending on float size
</summary>
</member>
<member name="M:Rhino.Scripting.TypeExtensions.Double.get_ToInt(System.Double)">
<summary>
converts int to float including rounding: 
int(round(x))
</summary>
</member>
<member name="M:Rhino.Scripting.TypeExtensions.Object.get_ToNiceString(System.Object)">
<summary>
A property like the ToString() method, 
but with richer formationg for collections.
</summary>
</member>
<member name="M:Rhino.Scripting.StringModule.betweenIncl(System.String,System.String,System.String)">
<summary>
 finds text betwween two strings including delimiters on middle string 
betweenIncl &quot;((&quot; &quot;))&quot; &quot;c((ab))d&quot; = &quot;c&quot;, &quot;((ab))&quot;, &quot;d&quot;
</summary>
</member>
<member name="M:Rhino.Scripting.StringModule.between(System.String,System.String,System.String)">
<summary>
finds text betwween two strings
between &quot;((&quot; &quot;)&quot; &quot;c((ab)c&quot; = (&quot;c&quot;, &quot;ab&quot;, &quot;c&quot;)
</summary>
</member>
<member name="M:Rhino.Scripting.StringModule.replace(System.String,System.String,System.String)">
<summary>
s.Replace(a, b)
</summary>
</member>
<member name="M:Rhino.Scripting.StringModule.split2(System.String,System.String)">
<summary>
split string into maximum two elements
.Split( [| spliter |],2, StringSplitOptions.RemoveEmptyEntries) in if xs.Length &gt; 1 then xs.[0],xs.[1] else s,&quot;&quot;
</summary>
</member>
<member name="M:Rhino.Scripting.StringModule.splitkeep(System.String,System.String)">
<summary>
s.Split([| spliter |], StringSplitOptions.None)  
</summary>
</member>
<member name="M:Rhino.Scripting.StringModule.split(System.String,System.String)">
<summary>
s.Split([| spliter |], StringSplitOptions.RemoveEmptyEntries)
</summary>
</member>
<member name="M:Rhino.Scripting.StringModule.before(System.String,System.String)">
<summary>
 Returns everytrhing before a given splitting string
 Full strring if splitter not present
</summary>
</member>
<member name="M:Rhino.Scripting.SeqModule.iPrevThisNextLooped``1(System.Collections.Generic.IEnumerable{``0})">
<summary>
Yields looped Seq of (index, previous, this, next): from (0, last, first, second)  upto (lastIndex, second-last, last, first)
Consider &quot;iThisNextNextafterLooped&quot; as faster since the last element is not required from the start on.
</summary>
</member>
<member name="M:Rhino.Scripting.SeqModule.prevThisNextLooped``1(System.Collections.Generic.IEnumerable{``0})">
<summary>
Yields looped Seq of (previous, this, next): from (last, first, second)  upto (second-last, last, first)
Consider &quot;thisNextNextafterLooped&quot; as faster since the last element is not required from the start on.
</summary>
</member>
<member name="M:Rhino.Scripting.SeqModule.iThisNextAndNextafterLooped``1(System.Collections.Generic.IEnumerable{``0})">
<summary>
Yields looped Seq of (Index of next, this, next, Nextafter): from (1, first, second, third)  upto (0, last, first, second)
</summary>
</member>
<member name="M:Rhino.Scripting.SeqModule.thisNextAndNextafterLooped``1(System.Collections.Generic.IEnumerable{``0})">
<summary>
Yields looped Seq of (this, next, Nextafter): from (first, second, third)  upto (last, first, second)
</summary>
</member>
<member name="M:Rhino.Scripting.SeqModule.thisNextAndNextafter``1(System.Collections.Generic.IEnumerable{``0})">
<summary>
Yields Seq of (this, next, Nextafter): from (first, second, third)  upto (third-last, second-last, last)
</summary>
</member>
<member name="M:Rhino.Scripting.SeqModule.iThisAndNextLooped``1(System.Collections.Generic.IEnumerable{``0})">
<summary>
Yields looped Seq of (this, next) from (first, second)  upto (last, first)
</summary>
</member>
<member name="M:Rhino.Scripting.SeqModule.thisAndNextLooped``1(System.Collections.Generic.IEnumerable{``0})">
<summary>
Yields looped Seq of (this, next) from (first, second)  upto (last, first)
</summary>
</member>
<member name="M:Rhino.Scripting.SeqModule.iThisAndNext``1(System.Collections.Generic.IEnumerable{``0})">
<summary>
Yields Seq of (index this, this, next) from (first, second)  upto (second-last, last)
</summary>
</member>
<member name="M:Rhino.Scripting.SeqModule.thisAndNext``1(System.Collections.Generic.IEnumerable{``0})">
<summary>
Yields Seq of (this, next) from (first, second)  upto (second-last, last)
</summary>
</member>
<member name="M:Rhino.Scripting.SeqModule.rotate``1(System.Int32,System.Collections.Generic.IEnumerable{``0})">
<summary>
Considers sequence cirular and move elements up or down
 e.g.: rotate +1 [ a, b, c, d] = [ d, a, b, c]
 e.g.: rotate -1 [ a, b, c, d] = [ b, c, d, a]
</summary>
</member>
<member name="M:Rhino.Scripting.SeqModule.slice``1(System.Int32,System.Int32,System.Collections.Generic.IEnumerable{``0})">
<summary>
Allows for negtive slice index too ( -1 = last element), returns a shallow copy including the end index.
</summary>
</member>
<member name="M:Rhino.Scripting.TypeExtensionsRhino.Vector3f.get_ToNiceString(Rhino.Geometry.Vector3f)">
<summary>
Like the ToString function but with appropiate precision formating
</summary>
</member>
<member name="M:Rhino.Scripting.TypeExtensionsRhino.Vector3d.get_ToNiceString(Rhino.Geometry.Vector3d)">
<summary>
Like the ToString function but with appropiate precision formating
</summary>
</member>
<member name="M:Rhino.Scripting.TypeExtensionsRhino.Point3f.get_ToNiceString(Rhino.Geometry.Point3f)">
<summary>
Like the ToString function but with appropiate precision formating
</summary>
</member>
<member name="M:Rhino.Scripting.TypeExtensionsRhino.Point3d.get_ToNiceString(Rhino.Geometry.Point3d)">
<summary>
Like the ToString function but with appropiate precision formating
</summary>
</member>
<member name="M:Rhino.Scripting.ActiceDocument.rhtype(System.Guid)">
<summary>
 gets a localised descritipn on rhino object type (curve , point, surface ....)
</summary>
</member>
<member name="P:Rhino.Scripting.ActiceDocument.commandSerialNumbers">
<summary>
 to store last created object form executing a rs.Command(...)
</summary>
</member>
<member name="P:Rhino.Scripting.ActiceDocument.syncContext">
<summary>
of the currently Running Rhino Instance, to be set via RhinoScriptSyntax.SynchronizationContext from running script
</summary>
</member>
<member name="P:Rhino.Scripting.ActiceDocument.Doc">
<summary>
 the current active Rhino document (= the file currently open)
</summary>
</member>
<member name="P:Rhino.Scripting.Internals.sticky">
<summary>
 A Dictionary to store state between scripting session
</summary>
</member>
<member name="M:Rhino.Scripting.ExtensionsApplication.RhinoScriptSyntax.WorkingFolder.Static(System.String)">
<summary>Sets Rhino's working folder (directory).
 The working folder is the default folder for all file operations</summary>
<param name="folder">(string) The new working folder for the current Rhino session</param>
<returns>(unit) void, nothing</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsApplication.RhinoScriptSyntax.WorkingFolder.Static">
<summary>Returns Rhino's working folder (directory).
 The working folder is the default folder for all file operations</summary>
<returns>(string) The current working folder</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsApplication.RhinoScriptSyntax.WindowHandle.Static">
<summary>Returns the windows handle of Rhino's main window</summary>
<returns>(IntPtr) the Window's handle of Rhino's main window. IntPtr is a platform-specific type that is used to represent a pointer or a handle</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsApplication.RhinoScriptSyntax.TemplateFolder.Static(System.String)">
<summary>Sets the location of Rhino's template folder</summary>
<param name="folder">(string) The location of Rhino's template files. Note, the location must exist</param>
<returns>(unit) void, nothing</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsApplication.RhinoScriptSyntax.TemplateFolder.Static">
<summary>Returns the location of Rhino's template folder</summary>
<returns>(string) The current template file folder</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsApplication.RhinoScriptSyntax.TemplateFile.Static(System.String)">
<summary>Sets Rhino's default template file. This is the file used
 when Rhino starts</summary>
<param name="filename">(string) The name of the new default template file.</param>
<returns>(unit) void, nothing</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsApplication.RhinoScriptSyntax.TemplateFile.Static">
<summary>Returns Rhino's default template file. This is the file used
 when Rhino starts</summary>
<returns>(string) The current default template file</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsApplication.RhinoScriptSyntax.StatusBarProgressMeterHide.Static">
<summary>Hide the progress meter</summary>
<returns>(unit) void, nothing</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsApplication.RhinoScriptSyntax.StatusBarProgressMeterUpdate.Static(System.Int32,System.Boolean)">
<summary>Set the current position of the progress meter</summary>
<param name="position">(int) The new position in the progress meter</param>
<param name="absolute">(bool) Optional, Default Value: <c>true</c>
The position is set absolute (True) or relative (False) to its current position. If omitted the absolute (True) is used</param>
<returns>(unit) void, nothing</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsApplication.RhinoScriptSyntax.StatusBarProgressMeterShow.Static(System.String,System.Int32,System.Int32,System.Boolean,System.Boolean)">
<summary>Start the Rhino status bar progress meter</summary>
<param name="label">(string) Short description of the progesss</param>
<param name="lower">(int) Lower limit of the progress meter's range</param>
<param name="upper">(int) Upper limit of the progress meter's range</param>
<param name="embedLabel">(bool) Optional, Default Value: <c>true</c>
  If true, the label will show inside the meter.
  If false, the label will show to the left of the meter</param>
<param name="showPercent">(bool) Optional, Default Value: <c>true</c>
  Show the percent complete if True</param>
<returns>(bool) True or False indicating success or failure</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsApplication.RhinoScriptSyntax.StatusBarPoint.Static(Rhino.Geometry.Point3d)">
<summary>Sets Rhino's status bar point coordinate pane</summary>
<param name="point">(Point3d) The 3d coordinates of the status bar</param>
<returns>(unit) void, nothing</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsApplication.RhinoScriptSyntax.StatusBarMessage.Static(System.String)">
<summary>Sets Rhino's status bar message pane</summary>
<param name="message">(string) The message to display</param>
<returns>(unit) void, nothing</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsApplication.RhinoScriptSyntax.StatusBarDistance.Static(System.Double)">
<summary>Sets Rhino's status bar distance pane</summary>
<param name="distance">(float) The distance to set the status bar</param>
<returns>(unit) void, nothing</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsApplication.RhinoScriptSyntax.Snap.Static(System.Boolean)">
<summary>Enables or disables Rhino's grid snap modeling aid</summary>
<param name="enable">(bool) The new enabled status.</param>
</member>
<member name="M:Rhino.Scripting.ExtensionsApplication.RhinoScriptSyntax.Snap.Static">
<summary>Get status of Rhino's grid snap modeling aid</summary>
<returns>(bool) the current grid snap status</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsApplication.RhinoScriptSyntax.SendKeystrokes.Static(System.String,System.Boolean)">
<summary>Sends a string of printable characters to Rhino's command line</summary>
<param name="keys">(string) A string of characters to send to the command line</param>
<param name="addReturn">(bool) Optional, Default Value: <c>true</c>
Append a return character to the end of the string. If omitted an return character will be added (True)</param>
<returns>(unit) void, nothing</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsApplication.RhinoScriptSyntax.SearchPathList.Static">
<summary>Returns all of the path items in Rhino's search path list.
  See "Options Files settings" in the Rhino help file for more details</summary>
<returns>(string array) list of search paths</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsApplication.RhinoScriptSyntax.SearchPathCount.Static">
<summary>Returns the number of path items in Rhino's search path list.
  See "Options Files settings" in the Rhino help file for more details</summary>
<returns>(int) the number of path items in Rhino's search path list</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsApplication.RhinoScriptSyntax.SdkVersion.Static">
<summary>Returns version of the Rhino SDK supported by the executing Rhino</summary>
<returns>(int) the version of the Rhino SDK supported by the executing Rhino. Rhino SDK versions are 9 digit numbers in the form of YYYYMMDDn</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsApplication.RhinoScriptSyntax.ScreenSize.Static">
<summary>Returns current width and height, of the screen of the primary monitor</summary>
<returns>(int * int) containing two numbers identifying the width and height in pixels</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsApplication.RhinoScriptSyntax.Prompt.Static(System.String)">
<summary>Change Rhino's command window prompt</summary>
<param name="message">(string) The new prompt on the commandline</param>
<returns>(unit) void, nothing</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsApplication.RhinoScriptSyntax.ProjectOsnaps.Static(System.Boolean)">
<summary>Enables or disables object snap projection</summary>
<param name="enable">(bool) The new enabled status.</param>
</member>
<member name="M:Rhino.Scripting.ExtensionsApplication.RhinoScriptSyntax.ProjectOsnaps.Static">
<summary>Get status of object snap projection</summary>
<returns>(bool) the current object snap projection status</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsApplication.RhinoScriptSyntax.PlugIns.Static(System.Int32,System.Int32)">
<summary>Returns a array of registered Rhino plug-ins</summary>
<param name="types">(int) Optional, Default Value: <c>0</c>
The type of plug-ins to return.
  0= all
  1= render
  2= file export
  4= file import
  8= digitizer
  16= utility.
  If omitted, all are returned</param>
<param name="status">(int) Optional, Default Value: <c>0</c>
 0= both loaded and unloaded, 
 1= loaded, 
 2= unloaded.  If omitted both status is returned</param>
<returns>(string array) array of registered Rhino plug-ins</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsApplication.RhinoScriptSyntax.PlugInId.Static(System.String)">
<summary>Returns the identifier of a plug-in given the plug-in name</summary>
<param name="plugin">(string) the name  of the plug-in</param>
<returns>(Guid) the  Unique Guid of the plug-in</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsApplication.RhinoScriptSyntax.Planar.Static(System.Boolean)">
<summary>Enables or disables Rhino's planar modeling aid</summary>
<param name="enable">(bool) The new enable status.</param>
<returns>(unit) void, nothing</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsApplication.RhinoScriptSyntax.Planar.Static">
<summary>Get status of Rhino's planar modeling aid</summary>
<returns>(bool) The current planar status</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsApplication.RhinoScriptSyntax.OsnapMode.Static(System.Int32)">
<summary>Sets the object snap mode. Object snaps are tools for
 specifying points on existing objects</summary>
<param name="mode">(int) The object snap mode or modes to set.
  0          None
  2          Near
  8          Focus
  32         Center
  64         Vertex
  128        Knot
  512        Quadrant
  2048       Midpoint
  8192       Intersection
  131072     End
  524288     Perpendicular
  2097152    Tangent
  134217728  Point
  Object snap modes can be added together to set multiple modes</param>
<returns>(unit) void, nothing</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsApplication.RhinoScriptSyntax.OsnapMode.Static">
<summary>Returns the object snap mode. Object snaps are tools for
 specifying points on existing objects</summary>
<returns>(int) The current object snap mode(s)
  0          None
  2          Near
  8          Focus
  32         Center
  64         Vertex
  128        Knot
  512        Quadrant
  2048       Midpoint
  8192       Intersection
  131072     End
  524288     Perpendicular
  2097152    Tangent
  134217728  Point
  Object snap modes can be added together to set multiple modes</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsApplication.RhinoScriptSyntax.OsnapDialog.Static(System.Boolean)">
<summary>Shows or hides Rhino's dockable object snap bar</summary>
<param name="visible">(bool) The new visibility state.</param>
<returns>(unit) void, nothing</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsApplication.RhinoScriptSyntax.OsnapDialog.Static">
<summary>Get status of Rhino's dockable object snap bar</summary>
<returns>(bool) The current visible state</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsApplication.RhinoScriptSyntax.Osnap.Static(System.Boolean)">
<summary>Enables or disables Rhino's object snap modeling aid.
  Object snaps are tools for specifying points on existing objects</summary>
<param name="enable">(bool) The new enabled status</param>
<returns>(unit) void, nothing</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsApplication.RhinoScriptSyntax.Osnap.Static">
<summary>Get status of Rhino's object snap modeling aid.
  Object snaps are tools for specifying points on existing objects</summary>
<returns>(bool) The current osnap status</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsApplication.RhinoScriptSyntax.Ortho.Static(System.Boolean)">
<summary>Enables or disables Rhino's ortho modeling aid</summary>
<param name="enable">(bool) The new enabled status</param>
<returns>(unit) void, nothing</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsApplication.RhinoScriptSyntax.Ortho.Static">
<summary>Get status of Rhino's ortho modeling aid</summary>
<returns>(bool) The current ortho status</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsApplication.RhinoScriptSyntax.LocaleID.Static">
<summary>Returns the current language used for the Rhino interface.  The current
  language is returned as a locale ID, or LCID, value</summary>
<returns>(int) the current language used for the Rhino interface as a locale ID, or LCID.
  1029  Czech
  1031  German-Germany
  1033  English-United States
  1034  Spanish-Spain
  1036  French-France
  1040  Italian-Italy
  1041  Japanese
  1042  Korean
  1045  Polish</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsApplication.RhinoScriptSyntax.LastCommandResult.Static">
<summary>Returns the result code for the last executed command</summary>
<returns>(int) the result code for the last executed command.
  0 = success (command successfully completed)
  1 = cancel (command was cancelled by the user)
  2 = nothing (command did nothing, but was not cancelled)
  3 = failure (command failed due to bad input, computational problem...)
  4 = unknown command (the command was not found)</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsApplication.RhinoScriptSyntax.LastCommandName.Static">
<summary>Returns the name of the last executed command</summary>
<returns>(string) the name of the last executed command</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsApplication.RhinoScriptSyntax.IsRunningOnWindows.Static">
<summary>Returns True if this script is being executed on a Windows platform</summary>
<returns>(bool) True if currently running on the Widows platform. False if it is not Windows</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsApplication.RhinoScriptSyntax.IsPlugIn.Static(System.String)">
<summary>Verifies that a plug-in is registered</summary>
<param name="plugin">(string) The unique objectId of the plug-in</param>
<returns>(bool) True if the Guid is registered or False if it is not</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsApplication.RhinoScriptSyntax.IsCommand.Static(System.String)">
<summary>Verifies that a command exists in Rhino. Useful when scripting commands
  found in 3rd party plug-ins</summary>
<param name="commandName">(string) The command name to test</param>
<returns>(bool) True if the string is a command or False if it is not a command</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsApplication.RhinoScriptSyntax.IsAlias.Static(System.String)">
<summary>Verifies that a command alias exists in Rhino</summary>
<param name="alias">(string) The name of an existing command alias</param>
<returns>(bool) True if exists or False if the alias does not exist</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsApplication.RhinoScriptSyntax.InstallFolder.Static">
<summary>The full path to Rhino's installation folder</summary>
<returns>(string) the full path to Rhino's installation folder</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsApplication.RhinoScriptSyntax.InCommand.Static">
<summary>Determines if Rhino is currently running a command. Because Rhino allows
  for transparent commands (commands run from inside of other commands), this
  method returns the total number of active commands</summary>
<returns>(int) the number of active commands</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsApplication.RhinoScriptSyntax.GetPlugInObject.Static(System.String)">
<summary>Returns a scriptable object from a specified plug-in. Not all plug-ins
  contain scriptable objects. Check with the manufacturer of your plug-in
  to see if they support this capability</summary>
<param name="plugIn">(string) The name of a registered plug-in that supports scripting.
  If the plug-in is registered but not loaded, it will be loaded</param>
<returns>(object) a scriptable plugin object</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsApplication.RhinoScriptSyntax.FindFile.Static(System.String)">
<summary>Searches for a file using Rhino's search path. Rhino will look for a file in the following locations:
    1. The current document's folder.
    2. Folder's specified in Options dialog, File tab.
    3. Rhino's System folders</summary>
<param name="filename">(string) A short file name to search for</param>
<returns>(string) full path on success</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsApplication.RhinoScriptSyntax.Exit.Static">
<summary>Closes the rhino application</summary>
<returns>(unit) void, nothing</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsApplication.RhinoScriptSyntax.ExeVersion.Static">
<summary>Returns the major version number of the Rhino executable</summary>
<returns>(int) the major version number of the Rhino executable</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsApplication.RhinoScriptSyntax.ExeServiceRelease.Static">
<summary>Returns the service release number of the Rhino executable</summary>
<returns>(int) the service release number of the Rhino executable</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsApplication.RhinoScriptSyntax.ExePlatform.Static">
<summary>Returns the platform of the Rhino executable</summary>
<returns>(int) 1 for 64 bit, 0 for 32 bit</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsApplication.RhinoScriptSyntax.ExeFolder.Static">
<summary>Returns the full path to Rhino's executable folder</summary>
<returns>(string) the full path to Rhino's executable folder</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsApplication.RhinoScriptSyntax.EnablePlugIn.Static(System.String,System.Boolean)">
<summary>Enables or disables a Rhino plug-in</summary>
<param name="plugin">(string) The name of the plugin</param>
<param name="enable">(bool) Load silently if True</param>
<returns>(unit) void, nothing</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsApplication.RhinoScriptSyntax.EnablePlugIn.Static(System.String)">
<summary>Get status of a Rhino plug-in</summary>
<param name="plugin">(string) The name of the plugin</param>
<returns>(bool) True if set to load silently otherwise False</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsApplication.RhinoScriptSyntax.EnableAutosave.Static(System.Boolean)">
<summary>Enables or disables Rhino's automatic file saving mechanism</summary>
<param name="enable">(bool) Optional, Default Value: <c>true</c>
The autosave state. If omitted automatic saving is enabled (True)</param>
<returns>(unit) void, nothing</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsApplication.RhinoScriptSyntax.EdgeAnalysisMode.Static(System.Int32)">
<summary>Modifies edge analysis mode displayed by the ShowEdges command</summary>
<param name="mode">(int) The new display mode. The available modes are
  0 - display all edges
  1 - display naked edges</param>
<returns>(unit) void, nothing</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsApplication.RhinoScriptSyntax.EdgeAnalysisMode.Static">
<summary>Returns edge analysis mode displayed by the ShowEdges command</summary>
<returns>(int) The current edge analysis mode
  0 - display all edges
  1 - display naked edges</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsApplication.RhinoScriptSyntax.EdgeAnalysisColor.Static(System.Drawing.Color)">
<summary>Modifies edge analysis color displayed by the ShowEdges command</summary>
<param name="color">(Drawing.Color), optional): The new color for the analysis</param>
<returns>(unit) void, nothing</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsApplication.RhinoScriptSyntax.EdgeAnalysisColor.Static">
<summary>Returns edge analysis color displayed by the ShowEdges command</summary>
<returns>(Drawing.Color) The current edge analysis color</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsApplication.RhinoScriptSyntax.DisplayOleAlerts.Static(System.Boolean)">
<summary>Enables/disables OLE Server Busy/Not Responding dialog boxes</summary>
<param name="enable">(bool) Whether alerts should be visible (True or False)</param>
<returns>(unit) void, nothing</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsApplication.RhinoScriptSyntax.DeleteSearchPath.Static(System.String)">
<summary>Removes existing path from Rhino's search path list. Search path items
  can be removed manually by using Rhino's options command and modifying the
  contents of the files tab</summary>
<param name="folder">(string) A folder to remove</param>
<returns>(bool) True or False indicating success or failure</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsApplication.RhinoScriptSyntax.DeleteAlias.Static(System.String)">
<summary>Delete an existing alias from Rhino</summary>
<param name="alias">(string) The name of an existing alias</param>
<returns>(bool) True or False indicating success or failure</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsApplication.RhinoScriptSyntax.DefaultRenderer.Static(System.String)">
<summary>Changes the default render plug-in</summary>
<param name="renderer">(string) The name of the renderer to set as default renderer</param>
<returns>(bool) True or False indicating success or failure</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsApplication.RhinoScriptSyntax.DefaultRenderer.Static">
<summary>Returns the default render plug-in</summary>
<returns>(string) Name of default renderer</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsApplication.RhinoScriptSyntax.CommandHistory.Static">
<summary>Returns the contents of Rhino's command history window</summary>
<returns>(string) the contents of Rhino's command history window</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsApplication.RhinoScriptSyntax.Command.Static(System.String,System.Boolean)">
<summary>Runs a Rhino command script. All Rhino commands can be used in command
  scripts. The command can be a built-in Rhino command or one provided by a
  3rd party plug-in.
  Write command scripts just as you would type the command sequence at the
  command line. A space or a new line acts like pressing 'Enter' at the
  command line. For more information, see "Scripting" in Rhino help.
  Note, this function is designed to run one command and one command only.
  Do not combine multiple Rhino commands into a single call to this method.
    WRONG:
      rs.Command("_Line _SelLast _Invert")
    CORRECT:
      rs.Command("_Line")
      rs.Command("_SelLast")
      rs.Command("_Invert")
  Also, the exclamation point and space character ( ! ) combination used by
  button macros and batch-driven scripts to cancel the previous command is
  not valid.
    WRONG:
      rs.Command("! _Line _Pause _Pause")
    CORRECT:
      rs.Command("_Line _Pause _Pause")
  After the command script has run, you can obtain the identifiers of most
  recently created or changed object by calling LastCreatedObjects</summary>
<param name="commandString">(string) A Rhino command including any arguments</param>
<param name="echo">(bool) Optional, Default Value: <c>true</c>
The command echo mode True will display the commands on the commandline. If omitted, command prompts are echoed (True)</param>
<returns>(bool) True or False indicating success or failure</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsApplication.RhinoScriptSyntax.ClearCommandHistory.Static">
<summary>Clears contents of Rhino's command history window. You can view the
  command history window by using the CommandHistory command in Rhino</summary>
<returns>(unit) void, nothing</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsApplication.RhinoScriptSyntax.BuildDate.Static">
<summary>Returns the build date of Rhino</summary>
<returns>(DateTime) the build date of Rhino. Will be converted to a string by most functions</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsApplication.RhinoScriptSyntax.AutosaveInterval.Static(System.Double)">
<summary>Changes how often the document will be saved when Rhino's
 automatic file saving mechanism is enabled</summary>
<param name="minutes">(float) The number of minutes between saves</param>
<returns>(unit) void, nothing</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsApplication.RhinoScriptSyntax.AutosaveInterval.Static">
<summary>Returns how often the document will be saved when Rhino's
 automatic file saving mechanism is enabled</summary>
<returns>(float) The current interval in minutes</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsApplication.RhinoScriptSyntax.AutosaveFile.Static(System.String)">
<summary>Changes the file name used by Rhino's automatic file saving</summary>
<param name="filename">(string) Name of the new autosave file</param>
<returns>(unit) void, nothing</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsApplication.RhinoScriptSyntax.AutosaveFile.Static">
<summary>Returns the file name used by Rhino's automatic file saving</summary>
<returns>(string) The name of the current autosave file</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsApplication.RhinoScriptSyntax.AppearanceColor.Static(System.Int32,System.Drawing.Color)">
<summary>Modifies an application interface item's color</summary>
<param name="item">(int) Item number to either query or modify
  0  = View background
  1  = Major grid line
  2  = Minor grid line
  3  = X-Axis line
  4  = Y-Axis line
  5  = Selected Objects
  6  = Locked Objects
  7  = New layers
  8  = Feedback
  9  = Tracking
  10 = Crosshair
  11 = Text
  12 = Text Background
  13 = Text hover</param>
<param name="color">(Drawing.Color ) The new color value as System.Drawing.Color </param>
<returns>(unit) void, nothing</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsApplication.RhinoScriptSyntax.AppearanceColor.Static(System.Int32)">
<summary>Returns an application interface item's color</summary>
<param name="item">(int) Item number to either query or modify
  0  = View background
  1  = Major grid line
  2  = Minor grid line
  3  = X-Axis line
  4  = Y-Axis line
  5  = Selected Objects
  6  = Locked Objects
  7  = New layers
  8  = Feedback
  9  = Tracking
  10 = Crosshair
  11 = Text
  12 = Text Background
  13 = Text hover</param>
<returns>(Drawing.Color) The current item color.
  0  = View background
  1  = Major grid line
  2  = Minor grid line
  3  = X-Axis line
  4  = Y-Axis line
  5  = Selected Objects
  6  = Locked Objects
  7  = New layers
  8  = Feedback
  9  = Tracking
  10 = Crosshair
  11 = Text
  12 = Text Background
  13 = Text hover</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsApplication.RhinoScriptSyntax.AliasNames.Static">
<summary>Returns a array of command alias names</summary>
<returns>(string array) a array of command alias names</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsApplication.RhinoScriptSyntax.AliasMacro.Static(System.String,System.String)">
<summary>Modifies the macro of a command alias</summary>
<param name="alias">(string) The name of an existing command alias</param>
<param name="macro">(string) The new macro to run when the alias is executed.</param>
<returns>(unit) void, nothing</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsApplication.RhinoScriptSyntax.AliasMacro.Static(System.String)">
<summary>Returns the macro of a command alias</summary>
<param name="alias">(string) The name of an existing command alias</param>
<returns>(string) The existing macro </returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsApplication.RhinoScriptSyntax.AliasCount.Static">
<summary>Returns number of command aliases in Rhino</summary>
<returns>(int) the number of command aliases in Rhino</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsApplication.RhinoScriptSyntax.AddSearchPath.Static(System.String,System.Int32)">
<summary>Add new path to Rhino's search path list. Search paths can be added by
  using Rhino's Options command and modifying the contents of the files tab</summary>
<param name="folder">(string) A valid folder, or path, to add</param>
<param name="index">(int) Optional, Zero-based position in the search path list to insert.
  If omitted, path will be appended to the end of the search path list.
<returns>(int) The index where the item was inserted.
  -1 on failure</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsApplication.RhinoScriptSyntax.AddAlias.Static(System.String,System.String)">
<summary>Add new command alias to Rhino. Command aliases can be added manually by
  using Rhino's Options command and modifying the contents of the Aliases tab</summary>
<param name="alias">(string) Name of new command alias. Cannot match command names or existing
  aliases</param>
<param name="macro">(string) The macro to run when the alias is executed</param>
<returns>(bool) True or False indicating success or failure</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsBlock.RhinoScriptSyntax.RenameBlock.Static(System.String,System.String)">
<summary>Renames an existing block definition</summary>
<param name="blockName">(string) Name of an existing block definition</param>
<param name="newName">(string) Name to change to</param>
<returns>(bool) True or False indicating success or failure</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsBlock.RhinoScriptSyntax.IsBlockReference.Static(System.String)">
<summary>Verifies that a block definition is from a reference file</summary>
<param name="blockName">(string) Name of an existing block definition</param>
<returns>(bool) True or False</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsBlock.RhinoScriptSyntax.IsBlockInUse.Static(System.String,System.Int32)">
<summary>Verifies that a block definition is being used by an inserted instance</summary>
<param name="blockName">(string) Name of an existing block definition</param>
<param name="whereToLook">(int) Optional, Default Value: <c>0</c>
One of the following values
  0 = Check for top level references in active document
  1 = Check for top level and nested references in active document
  2 = Check for references in other instance definitions</param>
<returns>(bool) True or False</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsBlock.RhinoScriptSyntax.IsBlockInstance.Static(System.Guid)">
<summary>Verifies an object is a block instance</summary>
<param name="objectId">(Guid) The identifier of an existing block insertion object</param>
<returns>(bool) True or False</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsBlock.RhinoScriptSyntax.IsBlockEmbedded.Static(System.String)">
<summary>Verifies a block definition is embedded, or linked, from an external file</summary>
<param name="blockName">(string) Name of an existing block definition</param>
<returns>(bool) True or False</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsBlock.RhinoScriptSyntax.IsBlock.Static(System.String)">
<summary>Verifies the existence of a block definition in the document</summary>
<param name="blockName">(string) Name of an existing block definition</param>
<returns>(bool) True or False</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsBlock.RhinoScriptSyntax.InsertBlock.Static(System.String,Rhino.Geometry.Point3d,Rhino.Geometry.Vector3d,System.Double,Rhino.Geometry.Vector3d)">
<summary>Inserts a block whose definition already exists in the document</summary>
<param name="blockName">(string) Name of an existing block definition</param>
<param name="insertionPoint">(Point3d) Insertion point for the block</param>
<param name="scale">(Vector3d) Optional, Default Value: <c>Vector3d(1.0 , 1.0 , 1.0)</c>
  X, y, z scale factors</param>
<param name="angleDegrees">(float) Optional, Default Value: <c>0</c>
  Rotation angle in degrees</param>
<param name="rotationNormal">(Vector3d) Optional, Default Value: <c> Vector3d.ZAxis</c>
  The axis of rotation</param>
<returns>(Guid) objectId for the block that was added to the doc</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsBlock.RhinoScriptSyntax.InsertBlock2.Static(System.String,Rhino.Geometry.Transform)">
<summary>Inserts a block whose definition already exists in the document</summary>
<param name="blockName">(string) Name of an existing block definition</param>
<param name="xform">(Transform) 4x4 transformation matrix to apply</param>
<returns>(Guid) objectId for the block that was added to the doc on success</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsBlock.RhinoScriptSyntax.ExplodeBlockInstance.Static(System.Guid,System.Boolean)">
<summary>Explodes a block instance into it's geometric components. The
  exploded objects are added to the document</summary>
<param name="objectId">(Guid) The identifier of an existing block insertion object</param>
<param name="explodeNestedInstances">(bool) Optional, Default Value: <c>false</c>
By default nested blocks are not exploded</param>
<returns>(Guid array) identifiers for the newly exploded objects on success</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsBlock.RhinoScriptSyntax.DeleteBlock.Static(System.String)">
<summary>Deletes a block definition and all of it's inserted instances</summary>
<param name="blockName">(string) Name of an existing block definition</param>
<returns>(bool) True or False indicating success or failure</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsBlock.RhinoScriptSyntax.BlockStatus.Static(System.String)">
<summary>Returns the status of a linked block</summary>
<param name="blockName">(string) Name of an existing block</param>
<returns>(int) the status of a linked block
  Value Description
  -3    Not a linked block definition.
  -2    The linked block definition's file could not be opened or could not be read.
  -1    The linked block definition's file could not be found.
    0    The linked block definition is up-to-date.
    1    The linked block definition's file is newer than definition.
    2    The linked block definition's file is older than definition.
    3    The linked block definition's file is different than definition</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsBlock.RhinoScriptSyntax.BlockPath.Static(System.String)">
<summary>Returns path to the source of a linked or embedded block definition.
  A linked or embedded block definition is a block definition that was
  inserted from an external file</summary>
<param name="blockName">(string) Name of an existing block definition</param>
<returns>(string) path to the linked block on success</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsBlock.RhinoScriptSyntax.BlockObjects.Static(System.String)">
<summary>Returns identifiers of the objects that make up a block definition</summary>
<param name="blockName">(string) Name of an existing block definition</param>
<returns>(Guid ResizeArray) list of identifiers on success</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsBlock.RhinoScriptSyntax.BlockObjectCount.Static(System.String)">
<summary>Returns number of objects that make up a block definition</summary>
<param name="blockName">(string) Name of an existing block definition</param>
<returns>(int) the number of objects that make up a block definition</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsBlock.RhinoScriptSyntax.BlockNames.Static">
<summary>Returns the names of all block definitions in the document</summary>
<returns>(string ResizeArray) the names of all block definitions in the document</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsBlock.RhinoScriptSyntax.BlockInstanceXform.Static(System.Guid)">
<summary>Returns the location of a block instance relative to the world coordinate
  system origin (0, 0, 0). The position is returned as a 4x4 transformation
  matrix</summary>
<param name="objectId">(Guid) The identifier of an existing block insertion object</param>
<returns>(Transform) the location, as a transform matrix, of a block instance relative to the world coordinate
  system origin</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsBlock.RhinoScriptSyntax.BlockInstances.Static(System.String,System.Int32)">
<summary>Returns the identifiers of the inserted instances of a block</summary>
<param name="blockName">(string) The name of an existing block definition</param>
<param name="whereToLook">(int) Optional, Default Value: <c>0</c>
0 = get top level references in active document.
  1 = get top level and nested references in active document.
  2 = check for references from other instance definitions</param>
<returns>(Guid ResizeArray) Ids identifying the instances of a block in the model</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsBlock.RhinoScriptSyntax.BlockInstanceName.Static(System.Guid)">
<summary>Returns the block name of a block instance</summary>
<param name="objectId">(Guid) The identifier of an existing block insertion object</param>
<returns>(string) the block name of a block instance</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsBlock.RhinoScriptSyntax.BlockInstanceInsertPoint.Static(System.Guid)">
<summary>Returns the insertion point of a block instance</summary>
<param name="objectId">(Guid) The identifier of an existing block insertion object</param>
<returns>(Point3d) The insertion 3D point</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsBlock.RhinoScriptSyntax.BlockInstanceCount.Static(System.String,System.Int32)">
<summary>Counts number of instances of the block in the document.
  Nested instances are not included in the count. Attention this may include deleted blocks</summary>
<param name="blockName">(string) The name of an existing block definition</param>
<param name="whereToLook">(int) Optional, Default Value: <c>0</c>
0 = get top level references in active document.
  1 = get top level and nested references in active document.
    If a block is nested more than once within another block it will be counted only once.
  2 = check for references from other instance definitions, counts every instance of nested block</param>
<returns>(int) the number of instances of the block in the document</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsBlock.RhinoScriptSyntax.BlockDescription.Static(System.String,System.String)">
<summary>Sets the description of a block definition</summary>
<param name="blockName">(string) The name of an existing block definition</param>
<param name="description">(string) The new description</param>
<returns>(unit) void, nothing</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsBlock.RhinoScriptSyntax.BlockDescription.Static(System.String)">
<summary>Returns the description of a block definition</summary>
<param name="blockName">(string) The name of an existing block definition</param>
<returns>(string) The current description</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsBlock.RhinoScriptSyntax.BlockCount.Static">
<summary>Returns the number of block definitions in the document</summary>
<returns>(int) the number of block definitions in the document</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsBlock.RhinoScriptSyntax.BlockContainerCount.Static(System.String)">
<summary>Returns number of block definitions that contain a specified
  block definition</summary>
<param name="blockName">(string) The name of an existing block definition</param>
<returns>(int) the number of block definitions that contain a specified block definition</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsBlock.RhinoScriptSyntax.BlockContainers.Static(System.String)">
<summary>Returns names of the block definitions that contain a specified block
  definition</summary>
<param name="blockName">(string) The name of an existing block definition</param>
<returns>(string ResizeArray) A list of block definition names</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsBlock.RhinoScriptSyntax.AddBlock.Static(System.Collections.Generic.IEnumerable{System.Guid},Rhino.Geometry.Point3d,System.String,System.Boolean)">
<summary>Adds a new block definition to the document</summary>
<param name="objectIds">(Guid seq) Objects that will be included in the block</param>
<param name="basePoint">(Point3d) 3D base point for the block definition</param>
<param name="name">(string) Optional, Default Value: <c>InstanceDefinitions.GetUnusedInstanceDefinitionName()</c>
Name of the block definition. If omitted a name will be automatically generated</param>
<param name="deleteInput">(bool) Optional, Default Value: <c>false</c>
If True, the objectIds will be deleted</param>
<returns>(string) name of new block definition on success</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsCurve.RhinoScriptSyntax.AddTweenCurves.Static(System.Guid,System.Guid,System.Int32,System.Int32,System.Int32)">
<summary>Creates curves between two open or closed input curves</summary>
<param name="fromCurveId">(Guid) Identifier of the first curve object</param>
<param name="toCurveId">(Guid) Identifier of the second curve object</param>
<param name="numberOfCurves">(int) Optional, Default Value: <c>1</c>
The number of curves to create. The default is 1</param>
<param name="method">(int) Optional, Default Value: <c>0</c>
The method for refining the output curves, where:
  0: (Default) Uses the control points of the curves for matching. So the first control point of first curve is matched to first control point of the second curve.
  1: Refits the output curves like using the FitCurve method.  Both the input curve and the output curve will have the same structure. The resulting curves are usually more complex than input unless input curves are compatible.
  2: Input curves are divided to the specified number of points on the curve, corresponding points define new points that output curves go through. If you are making one tween curve, the method essentially does the following: divides the two curves into an equal number of points, finds the midpoint between the corresponding points on the curves, and interpolates the tween curve through those points</param>
<param name="sampleNumber">(int) Optional, Default Value: <c>10</c>
  The number of samples points to use if method is 2. The default is 10</param>
<returns>(Guid ResizeArray) The identifiers of the new tween objects , </returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsCurve.RhinoScriptSyntax.ChangeCurveDegree.Static(System.Guid,System.Int32)">
<summary>Changes the degree of a curve object. For more information see the Rhino help file for the ChangeDegree command</summary>
<param name="curveId">(Guid) The object's identifier</param>
<param name="degree">(int) The new degree</param>
<returns>(bool) True of False indicating success or failure</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsCurve.RhinoScriptSyntax.TrimCurve.Static(System.Guid,System.Tuple{System.Double,System.Double},System.Boolean)">
<summary>Trims a curve by removing portions of the curve outside a specified interval</summary>
<param name="curveId">(Guid) The curve to trim</param>
<param name="interval">(float * float) Two numbers identifying the interval to keep. Portions of
  the curve before domain[0] and after domain[1] will be removed. If the
  input curve is open, the interval must be increasing. If the input
  curve is closed and the interval is decreasing, then the portion of
  the curve across the start and end of the curve is returned</param>
<param name="deleteInput">(bool) Optional, Default Value: <c>true</c>
Delete the input curve. If omitted the input curve is deleted</param>
<returns>(Guid) identifier of the new curve on success</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsCurve.RhinoScriptSyntax.SplitCurve.Static(System.Guid,System.Collections.Generic.IEnumerable{System.Double},System.Boolean)">
<summary>Splits, or divides, a curve at a specified parameter. The parameter must
  be in the interior of the curve's domain</summary>
<param name="curveId">(Guid) The curve to split</param>
<param name="parameter">(float seq) One or more parameters to split the curve at</param>
<param name="deleteInput">(bool) Optional, Default Value: <c>true</c>
Delete the input curve</param>
<returns>(Guid ResizeArray) list of new curves on success</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsCurve.RhinoScriptSyntax.SimplifyCurve.Static(System.Guid,System.Int32)">
<summary>Replace a curve with a geometrically equivalent polycurve.
  The polycurve will have the following properties:
    - All the polycurve segments are lines, polylines, arcs, or NURBS curves.
    - The NURBS curves segments do not have fully multiple interior knots.
    - Rational NURBS curves do not have constant weights.
    - Any segment for which IsCurveLinear or IsArc is True is a line, polyline segment, or an arc.
    - Adjacent co-linear or co-circular segments are combined.
    - Segments that meet with G1-continuity have there ends tuned up so that they meet with G1-continuity to within machine precision.
    - If the polycurve is a polyline, a polyline will be created</summary>
<param name="curveId">(Guid) The object's identifier</param>
<param name="flags">(int) Optional, Default Value: <c>0</c>
The simplification methods to use. By default, all methods are used (flags = 0)
  Value Description
  0     Use all methods.
  1     Do not split NURBS curves at fully multiple knots.
  2     Do not replace segments with IsCurveLinear = True with line curves.
  4     Do not replace segments with IsArc = True with arc curves.
  8     Do not replace rational NURBS curves with constant denominator with an equivalent non-rational NURBS curve.
  16    Do not adjust curves at G1-joins.
  32    Do not merge adjacent co-linear lines or co-circular arcs or combine consecutive line segments into a polyline</param>
<returns>(bool) True or False</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsCurve.RhinoScriptSyntax.ReverseCurve.Static(System.Guid)">
<summary>Reverses the direction of a curve object. Same as Rhino's Dir command</summary>
<param name="curveId">(Guid) Identifier of the curve object</param>
<returns>(bool) True or False indicating success or failure</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsCurve.RhinoScriptSyntax.RemoveCurveKnot.Static(System.Guid,System.Double)">
<summary>Deletes a knot from a curve object</summary>
<param name="curve">(Guid) The reference of the source object</param>
<param name="parameter">(float) The parameter on the curve. Note, if the parameter is not equal to one
  of the existing knots, then the knot closest to the specified parameter
  will be removed</param>
<returns>(bool) True of False indicating success or failure</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsCurve.RhinoScriptSyntax.RebuildCurve.Static(System.Guid,System.Int32,System.Int32)">
<summary>Rebuilds a curve to a given degree and control point count. For more
  information, see the Rhino help for the Rebuild command</summary>
<param name="curveId">(Guid) Identifier of the curve object</param>
<param name="degree">(int) New degree (must be greater than 0)</param>
<param name="pointCount">(int) New point count, which must be bigger than degree</param>
<returns>(bool) True of False indicating success or failure</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsCurve.RhinoScriptSyntax.ProjectCurveToSurface.Static(System.Collections.Generic.IEnumerable{System.Guid},System.Collections.Generic.IEnumerable{System.Guid},Rhino.Geometry.Vector3d)">
<summary>Projects one or more curves onto one or more surfaces or polysurfaces</summary>
<param name="curveIds">(Guid seq) Identifiers of curves to project</param>
<param name="surfaceIds">(Guid seq) Identifiers of surfaces to project onto</param>
<param name="direction">(Vector3d) Projection direction</param>
<returns>(Guid ResizeArray) list of identifiers</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsCurve.RhinoScriptSyntax.ProjectCurveToMesh.Static(System.Collections.Generic.IEnumerable{System.Guid},System.Collections.Generic.IEnumerable{System.Guid},Rhino.Geometry.Vector3d)">
<summary>Projects one or more curves onto one or more surfaces or meshes</summary>
<param name="curveIds">(Guid seq) Identifiers of curves to project</param>
<param name="meshIds">(Guid seq) Identifiers of meshes to project onto</param>
<param name="direction">(Vector3d) Projection direction</param>
<returns>(Guid ResizeArray) list of identifiers for the resulting curves</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsCurve.RhinoScriptSyntax.PolylineVertices.Static(System.Guid,System.Int32)">
<summary>Returns the vertices of a polyline curve on success</summary>
<param name="curveId">(Guid) The object's identifier</param>
<param name="segmentIndex">(int) Optional,
  If curveId identifies a polycurve object, then segmentIndex identifies the curve segment of the polycurve to query</param>
<returns>(Point3d ResizeArray) an list of Point3d vertex points</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsCurve.RhinoScriptSyntax.PolyCurveCount.Static(System.Guid,System.Int32)">
<summary>Returns the number of curve segments that make up a polycurve</summary>
<param name="curveId">(Guid) The object's identifier</param>
<param name="segmentIndex">(int) Optional,
  If `curveId` identifies a polycurve object, then `segmentIndex` identifies the curve segment of the polycurve to query</param>
<returns>(int) the number of curve segments in a polycurve</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsCurve.RhinoScriptSyntax.PointInPlanarClosedCurve.Static(Rhino.Geometry.Point3d,System.Guid,Rhino.Geometry.Plane,System.Double)">
<summary>Determines if a point is inside of a closed curve, on a closed curve, or
  outside of a closed curve</summary>
<param name="point">(Point3d) Text point</param>
<param name="curve">(Guid) Identifier of a curve object</param>
<param name="plane">(Plane) Optional, Default Value: <c>Plane.WorldXY</c>
Plane containing the closed curve and point. If omitted, Plane.WorldXY  is used</param>
<param name="tolerance">(float) Optional, Default Value: <c>Doc.ModelAbsoluteTolerance</c></param>
<returns>(int) number identifying the result
  0 = point is outside of the curve
  1 = point is inside of the curve
  2 = point is on the curve</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsCurve.RhinoScriptSyntax.PlanarCurveCollision.Static(System.Guid,System.Guid,Rhino.Geometry.Plane,System.Double)">
<summary>Determines if two coplanar curves intersect</summary>
<param name="curveA">(Guid) identifier of the first  planar curve</param>
<param name="curveB">(Guid) identifier of the second planar curve</param>
<param name="plane">(Plane) Optional, Default Value: <c>Plane.WorldXY</c>
Test plane. If omitted, the Plane.WorldXY plane is used</param>
<param name="tolerance">(float) Optional, Default Value: <c>Doc.ModelAbsoluteTolerance</c></param>
<returns>(bool) True if the curves intersect; otherwise False</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsCurve.RhinoScriptSyntax.PlanarClosedCurveContainment.Static(System.Guid,System.Guid,Rhino.Geometry.Plane,System.Double)">
<summary>Determines the relationship between the regions bounded by two coplanar simple closed curves</summary>
<param name="curveA">(Guid) identifier of the first  planar, closed curve</param>
<param name="curveB">(Guid) identifier of the second planar, closed curve</param>
<param name="plane">(Plane) Optional, Default Value: <c>Plane.WorldXY</c>
Test plane. If omitted, the Plane.WorldXY plane is used</param>
<param name="tolerance">(float) Optional, Default Value: <c>Doc.ModelAbsoluteTolerance</c></param>
<returns>(int) a number identifying the relationship
  0 = the regions bounded by the curves are disjoint
  1 = the two curves intersect
  2 = the region bounded by curveA is inside of curveB
  3 = the region bounded by curveB is inside of curveA</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsCurve.RhinoScriptSyntax.OffsetCurveOnSurface.Static(System.Guid,System.Guid,System.Double)">
<summary>Offset a curve on a surface. The source curve must lie on the surface.
  The offset curve or curves will be added to Rhino</summary>
<param name="curveId">(Guid) Curve identifiers</param>
<param name="surfaceId">(Guid) Surface identifiers</param>
<param name="distance">(float) ):the distance of the offset. Based on the curve's direction, a positive value
  will offset to the left and a negative value will offset to the right</param>
<returns>(Guid ResizeArray) identifiers of the new curves</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsCurve.RhinoScriptSyntax.OffsetCurveOnSurfaceUV.Static(System.Guid,System.Guid,Rhino.Geometry.Point2d)">
<summary>Offset a curve on a surface. The source curve must lie on the surface.
  The offset curve or curves will be added to Rhino</summary>
<param name="curveId">(Guid) Curve identifiers</param>
<param name="surfaceId">(Guid) Surface identifiers</param>
<param name="parameter">(Point2d) ):  U, V parameter that the curve will be offset through</param>
<returns>(Guid ResizeArray) identifiers of the new curves</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsCurve.RhinoScriptSyntax.OffsetCurve.Static(System.Guid,Rhino.Geometry.Point3d,System.Double,Rhino.Geometry.Vector3d,System.Int32)">
<summary>Offsets a curve by a distance. The offset curve will be added to Rhino</summary>
<param name="curveId">(Guid) Identifier of a curve object</param>
<param name="direction">(Point3d) Point describing direction of the offset</param>
<param name="distance">(float) Distance of the offset</param>
<param name="normal">(Vector3d) Optional, Default Value: <c>Vector3d.ZAxis</c>
  Normal of the plane in which the offset will occur.
  If omitted, the WorldXY  plane will be used</param>
<param name="style">(int) Optional, Default Value: <c>1</c>
The corner style. If omitted, the style is sharp.
  0 = None
  1 = Sharp
  2 = Round
  3 = Smooth
  4 = Chamfer</param>
<returns>(Guid ResizeArray) list of ids for the new curves on success</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsCurve.RhinoScriptSyntax.MeshPolyline.Static(System.Guid)">
<summary>Creates a polygon mesh object based on a closed polyline curve object.
  The created mesh object is added to the document</summary>
<param name="polylineId">(Guid) Identifier of the polyline curve object</param>
<returns>(Guid) identifier of the new mesh object</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsCurve.RhinoScriptSyntax.MeanCurve.Static(System.Guid,System.Guid,System.Double)">
<summary>Creates an average curve from two curves</summary>
<param name="curve0">(Guid) identifiers of first curve</param>
<param name="curve1">(Guid) identifiers of second curve</param>
<param name="tolerance">(float) Optional, Default Value: <c>Doc.ModelAbsoluteTolerance</c>
Angle tolerance used to match kinks between curves</param>
<returns>(Guid) objectId of the new or modified curve</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsCurve.RhinoScriptSyntax.MakeCurveNonPeriodic.Static(System.Guid,System.Boolean)">
<summary>Makes a periodic curve non-periodic. Non-periodic curves can develop
  kinks when deformed</summary>
<param name="curveId">(Guid) Identifier of the curve object</param>
<param name="deleteInput">(bool) Optional, Default Value: <c>false</c>
Delete the input curve. If omitted, the input curve will not be deleted</param>
<returns>(Guid) objectId of the new or modified curve</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsCurve.RhinoScriptSyntax.LineFitFromPoints.Static(System.Collections.Generic.IEnumerable{Rhino.Geometry.Point3d})">
<summary>Returns a line that was fit through an array of 3D points</summary>
<param name="points">(Point3d seq) A list of at least two 3D points</param>
<returns>(Line) line on success</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsCurve.RhinoScriptSyntax.JoinCurves.Static(System.Guid[],System.Boolean,System.Double)">
<summary>Joins multiple curves together to form one or more curves or polycurves</summary>
<param name="curveIds">(Guid) List of multiple curves</param>
<param name="deleteInput">(bool) Optional, Default Value: <c>false</c>
Delete input objects after joining</param>
<param name="tolerance">(float) Optional, Default Value: <c>2.1 * Doc.ModelAbsoluteTolerance</c>
Join tolerance. If omitted, 2.1 * document absolute
  tolerance is used</param>
<returns>(Guid ResizeArray) Object objectId representing the new curves</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsCurve.RhinoScriptSyntax.IsPolyline.Static(System.Guid,System.Int32)">
<summary>Verifies an object is a Polyline curve object</summary>
<param name="curveId">(Guid) Identifier of the curve object</param>
<param name="segmentIndex">(int) Optional, The curve segment index if `curveId` identifies a polycurve</param>
<returns>(bool) True or False</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsCurve.RhinoScriptSyntax.IsPolyCurve.Static(System.Guid,System.Int32)">
<summary>Verifies an object is a PolyCurve curve</summary>
<param name="curveId">(Guid) Identifier of the curve object</param>
<param name="segmentIndex">(int) Optional, The curve segment index if `curveId` identifies a polycurve</param>
<returns>(bool) True or False</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsCurve.RhinoScriptSyntax.IsPointOnCurve.Static(System.Guid,Rhino.Geometry.Point3d,System.Double,System.Int32)">
<summary>Verifies that a point is on a curve</summary>
<param name="curveId">(Guid) Identifier of the curve object</param>
<param name="point">(Point3d) The test point</param>
<param name="tolerance">(float) Optional, Default Value: <c>RhinoMath.SqrtEpsilon</c></param>
<param name="segmentIndex">(int) Optional, The curve segment index if `curveId` identifies a polycurve</param>
<returns>(bool) True or False indicating success or failure</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsCurve.RhinoScriptSyntax.IsLine.Static(System.Guid,System.Double,System.Int32)">
<summary>Verifies an object is a line curve</summary>
<param name="curveId">(Guid) Identifier of the curve object</param>
<param name="tolerance">(float) Optional, Default Value: <c>RhinoMath.ZeroTolerance</c></param>
<param name="segmentIndex">(int) Optional,
  The curve segment index if `curveId` identifies a polycurve</param>
<returns>(bool) True or False indicating success or failure</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsCurve.RhinoScriptSyntax.IsEllipse.Static(System.Guid,System.Double,System.Int32)">
<summary>Verifies an object is an elliptical-shaped curve</summary>
<param name="curveId">(Guid) Identifier of the curve object</param>
<param name="tolerance">(float) Optional, Default Value: <c>RhinoMath.ZeroTolerance</c></param>
<param name="segmentIndex">(int) Optional,
  The curve segment index if `curveId` identifies a polycurve</param>
<returns>(bool) True or False indicating success or failure</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsCurve.RhinoScriptSyntax.IsCurveRational.Static(System.Guid,System.Int32)">
<summary>Verifies an object is a rational NURBS curve</summary>
<param name="curveId">(Guid) Identifier of the curve object</param>
<param name="segmentIndex">(int) Optional, The curve segment index if `curveId` identifies a polycurve</param>
<returns>(bool) True or False indicating success or failure</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsCurve.RhinoScriptSyntax.IsCurvePlanar.Static(System.Guid,System.Double,System.Int32)">
<summary>Verifies an object is a planar curve</summary>
<param name="curveId">(Guid) Identifier of the curve object</param>
<param name="tolerance">(float) Optional, Default Value: <c>RhinoMath.ZeroTolerance</c></param>
<param name="segmentIndex">(int) Optional, The curve segment index if `curveId` identifies a polycurve</param>
<returns>(bool) True or False indicating success or failure</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsCurve.RhinoScriptSyntax.IsCurvePeriodic.Static(System.Guid,System.Int32)">
<summary>Verifies an object is a periodic curve object</summary>
<param name="curveId">(Guid) Identifier of the curve object</param>
<param name="segmentIndex">(int) Optional,
  The curve segment index if `curveId` identifies a polycurve</param>
<returns>(bool) True or False</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsCurve.RhinoScriptSyntax.IsCurveLinear.Static(System.Guid,System.Double,System.Int32)">
<summary>Verifies an object is a linear curve</summary>
<param name="curveId">(Guid) Identifier of the curve object</param>    ///
<param name="tolerance">(float) Optional, Default Value: <c>RhinoMath.ZeroTolerance</c></param>
<param name="segmentIndex">(int) Optional,The curve segment index if `curveId` identifies a polycurve</param>
<returns>(bool) True or False indicating success or failure</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsCurve.RhinoScriptSyntax.IsCurveInPlane.Static(System.Guid,Rhino.Geometry.Plane,System.Double)">
<summary>Test a curve to see if it lies in a specific plane</summary>
<param name="curveId">(Guid) The object's identifier</param>
<param name="plane">(Plane) Plane to test</param>
<param name="tolerance">(float) Optional, Default Value: <c>RhinoMath.ZeroTolerance</c></param>
<returns>(bool) True or False</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsCurve.RhinoScriptSyntax.IsCurveClosed.Static(System.Guid)">
<summary>Verifies an object is a closed curve object</summary>
<param name="curveId">(Guid) The object's identifier</param>
<returns>(bool) True  otherwise False</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsCurve.RhinoScriptSyntax.IsCurveClosable.Static(System.Guid,System.Double)">
<summary>Decide if it makes sense to close off the curve by moving the end point
  to the start point based on start-end gap size and length of curve as
  approximated by chord defined by 6 points</summary>
<param name="curveId">(Guid) Identifier of the curve object</param>
<param name="tolerance">(float) Optional, Default Value: <c>Doc.ModelAbsoluteTolerance</c>
  Maximum allowable distance between start point and end point.</param>
<returns>(bool) True or False</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsCurve.RhinoScriptSyntax.IsCurve.Static(System.Guid)">
<summary>Verifies an object is a curve</summary>
<param name="curveId">(Guid) The object's identifier</param>
<returns>(bool) True or False</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsCurve.RhinoScriptSyntax.IsCircle.Static(System.Guid,System.Double)">
<summary>Verifies an object is a circle curve</summary>
<param name="curveId">(Guid) Identifier of the curve object</param>
<param name="tolerance">(float) Optional, Default Value: <c>RhinoMath.ZeroTolerance</c>
If the curve is not a circle, then the tolerance used
  to determine whether or not the NURBS form of the curve has the
  properties of a circle.</param>
<returns>(bool) True or False</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsCurve.RhinoScriptSyntax.IsArc.Static(System.Guid,System.Double,System.Int32)">
<summary>Verifies an object is an open arc curve</summary>
<param name="curveId">(Guid) Identifier of the curve object</param>
<param name="tolerance">(float) Optional, Default Value: <c>RhinoMath.ZeroTolerance</c>
  If the curve is not a circle, then the tolerance used
  to determine whether or not the NURBS form of the curve has the
  properties of a arc.</param>
<param name="segmentIndex">(int) Optional, The curve segment index if `curveId` identifies a polycurve</param>
<returns>(bool) True or False</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsCurve.RhinoScriptSyntax.InsertCurveKnot.Static(System.Guid,System.Double,System.Boolean)">
<summary>Inserts a knot into a curve object</summary>
<param name="curveId">(Guid) Identifier of the curve object</param>
<param name="parameter">(float) Parameter on the curve</param>
<param name="symmetrical">(bool) Optional, Default Value: <c>false</c>
If True, then knots are added on both sides of
  the center of the curve</param>
<returns>(bool) True or False indicating success or failure</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsCurve.RhinoScriptSyntax.FitCurve.Static(System.Guid,System.Int32,System.Double,System.Double)">
<summary>Reduces number of curve control points while maintaining the curve's same
  general shape. Use this function for replacing curves with many control
  points. For more information, see the Rhino help for the FitCrv command</summary>
<param name="curveId">(Guid) Identifier of the curve object</param>
<param name="degree">(int) Optional, Default Value: <c>3</c>
The curve degree, which must be greater than 1.
  The default is 3</param>
<param name="distanceTolerance">(float) Optional, Default Value: <c>Doc.ModelAbsoluteTolerance</c>
  The fitting tolerance. </param>
<param name="angleTolerance">(float) Optional, Default Value: <c>Doc.ModelAngleToleranceRadians</c>
The kink smoothing tolerance in degrees. If
  angleTolerance is 0.0, all kinks are smoothed. If angleTolerance
  is bigger than  0.0, kinks smaller than angleTolerance are smoothed. If
  angleTolerance is not specified or smaller than 0.0, the document angle
  tolerance is used for the kink smoothing</param>
<returns>(Guid) The identifier of the new object</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsCurve.RhinoScriptSyntax.FairCurve.Static(System.Guid,System.Double)">
<summary>Fairs a curve. Fair works best on degree 3 (cubic) curves. Fair attempts
  to remove large curvature variations while limiting the geometry changes to
  be no more than the specified tolerance. Sometimes several applications of
  this method are necessary to remove nasty curvature problems</summary>
<param name="curveId">(Guid) Curve to fair</param>
<param name="tolerance">(float) Fairing tolerance</param>
<returns>(bool) True or False indicating success or failure</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsCurve.RhinoScriptSyntax.ExtendCurvePoint.Static(System.Guid,System.Int32,Rhino.Geometry.Point3d)">
<summary>Extends a non-closed curve by smooth extension to a point</summary>
<param name="curveId">(Guid) Curve to extend</param>
<param name="side">(int) 0= extend from start of the curve
  1= extend from end of the curve</param>
<param name="point">(Point3d) Point to extend to</param>
<returns>(Guid) The identifier of the new object </returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsCurve.RhinoScriptSyntax.ExtendCurveLength.Static(System.Guid,System.Int32,System.Int32,System.Double)">
<summary>Extends a non-closed curve by a line, arc, or smooth extension for a
  specified distance</summary>
<param name="curveId">(Guid) Curve to extend</param>
<param name="extensionType">(int) 0 = line
  1 = arc
  2 = smooth</param>
<param name="side">(int) 0= extend from start of the curve
  1= extend from end of the curve
  2= Extend from both ends</param>
<param name="length">(float) Distance to extend</param>
<returns>(Guid) The identifier of the new object</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsCurve.RhinoScriptSyntax.ExtendCurve.Static(System.Guid,System.Int32,System.Int32,System.Collections.Generic.IEnumerable{System.Guid},System.Boolean)">
<summary>Extends a non-closed curve object by a line, arc, or smooth extension
  until it intersects a collection of objects</summary>
<param name="curveId">(Guid) Identifier of curve to extend</param>
<param name="extensionType">(int) 0 = line
  1 = arc
  2 = smooth</param>
<param name="side">(int) 0= extend from the start of the curve
  1= extend from the end of the curve
  2= extend from both the start and the end of the curve</param>
<param name="boundarycurveIds">(Guid seq) Curve, surface, and polysurface objects to extend to</param>
<param name="replaceInput">(bool) Optional, Default Value <c>false</c> Replace input or add new?</param>
<returns>(Guid) The identifier of the new object or orignal curve ( depending on 'replaceInput')</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsCurve.RhinoScriptSyntax.ExplodeCurve.Static(System.Guid,System.Boolean)">
<summary>Explodes, or un-joins, one curve. Polycurves will be exploded into curve
  segments. Polylines will be exploded into line segments. ExplodeCurves will
  return the curves in topological order</summary>
<param name="curveId">(Guid) The curve object to explode</param>
<param name="deleteInput">(bool) Optional, Default Value: <c>false</c>
Delete input objects after exploding if True</param>
<returns>(Guid ResizeArray) identifying the newly created curve objects</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsCurve.RhinoScriptSyntax.EvaluateCurve.Static(System.Guid,System.Double,System.Int32)">
<summary>Evaluates a curve at a parameter and returns a 3D point</summary>
<param name="curveId">(Guid) Identifier of the curve object</param>
<param name="t">(float) The parameter to evaluate</param>
<param name="segmentIndex">(int) Optional, The curve segment index if `curveId` identifies a polycurve</param>
<returns>(Point3d) a 3-D point</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsCurve.RhinoScriptSyntax.EllipseQuadPoints.Static(System.Guid)">
<summary>Returns the quadrant points of an elliptical-shaped curve object</summary>
<param name="curveId">(Guid) Identifier of the curve object</param>
<returns>(Point3d * Point3d * Point3d * Point3d) Four points identifying the quadrants of the ellipse</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsCurve.RhinoScriptSyntax.EllipseCenterPoint.Static(System.Guid)">
<summary>Returns the center point of an elliptical-shaped curve object</summary>
<param name="curveId">(Guid) Identifier of the curve object</param>
<returns>(Point3d) The 3D center point of the ellipse </returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsCurve.RhinoScriptSyntax.DivideCurveLength.Static(System.Guid,System.Double)">
<summary>Divides a curve object into segments of a specified length</summary>
<param name="curveId">(Guid) Identifier of the curve object</param>
<param name="length">(float) The length of each segment</param>
<returns>( float array) a list containing division parameters</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsCurve.RhinoScriptSyntax.DivideCurveLengthIntoPoints.Static(System.Guid,System.Double)">
<summary>Divides a curve object into segments of a specified length</summary>
<param name="curveId">(Guid) Identifier of the curve object</param>
<param name="length">(float) The length of each segment</param>
<returns>(Point3d ResizeArray) a list containing division points</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsCurve.RhinoScriptSyntax.DivideCurveEquidistant.Static(System.Guid,System.Double)">
<summary>Divides a curve such that the linear distance between the points is equal</summary>
<param name="curveId">(Guid) The object's identifier</param>
<param name="distance">(float) Linear distance between division points</param>
<returns>(Point3d array) array containing 3D division points</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsCurve.RhinoScriptSyntax.DivideCurve.Static(System.Guid,System.Int32)">
<summary>Divides a curve object into a specified number of segments</summary>
<param name="curveId">(Guid) Identifier of the curve object</param>
<param name="segments">(int) The number of segments</param>
<returns>( float array ) array containing 3D division points</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsCurve.RhinoScriptSyntax.DivideCurveIntoPoints.Static(System.Guid,System.Int32)">
<summary>Divides a curve object into a specified number of segments</summary>
<param name="curveId">(Guid) Identifier of the curve object</param>
<param name="segments">(int) The number of segments</param>
<returns>(Point3d array) Array containing division curve parameters</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsCurve.RhinoScriptSyntax.CurveWeights.Static(System.Guid,System.Int32)">
<summary>Returns list of weights that are assigned to the control points of a curve</summary>
<param name="curveId">(Guid) Identifier of the curve object</param>
<param name="segmentIndex">(int) Optional, The curve segment index if `curveId` identifies a polycurve</param>
<returns>(float ResizeArray) The weight values of the curve </returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsCurve.RhinoScriptSyntax.CurveTangent.Static(System.Guid,System.Double,System.Int32)">
<summary>Returns a 3D vector that is the tangent to a curve at a parameter</summary>
<param name="curveId">(Guid) Identifier of the curve object</param>
<param name="parameter">(float) Parameter to evaluate</param>
<param name="segmentIndex">(int) Optional, The curve segment index if `curveId` identifies a polycurve</param>
<returns>(Vector3d) A 3D vector </returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsCurve.RhinoScriptSyntax.CurveSurfaceIntersection.Static(System.Guid,System.Guid,System.Double,System.Double)">
<summary>Calculates intersection of a curve object with a surface object.
  Note, this function works on the untrimmed portion of the surface</summary>
<param name="curveId">(Guid) The identifier of the first curve object</param>
<param name="surfaceId">(Guid) The identifier of the second curve object. If omitted,
  the a self-intersection test will be performed on curve</param>
<param name="tolerance">(float) Optional, Default Value: <c>Doc.ModelAbsoluteTolerance</c>
The absolute tolerance in drawing units. </param>
<param name="angleTolerance">(float) Optional, Default Value: <c>Doc.ModelAngleToleranceRadians</c>
Angle tolerance in degrees. The angle
  tolerance is used to determine when the curve is tangent to the
  surface.</param>
<returns>(ResizeArray of int*Point3d*Point3d*Point3d*Point3d*float*float*float*float) of intersection information .
  The list will contain one or more of the following elements:
    Element Type     Description
    [n][0]  Number   The intersection event type, either Point(1) or Overlap(2).
    [n][1]  Point3d  If the event type is Point(1), then the intersection point
      on the first curve. If the event type is Overlap(2), then
      intersection start point on the first curve.
    [n][2]  Point3d  If the event type is Point(1), then the intersection point
      on the first curve. If the event type is Overlap(2), then
      intersection end point on the first curve.
    [n][3]  Point3d  If the event type is Point(1), then the intersection point
      on the second curve. If the event type is Overlap(2), then
      intersection start point on the surface.
    [n][4]  Point3d  If the event type is Point(1), then the intersection point
      on the second curve. If the event type is Overlap(2), then
      intersection end point on the surface.
    [n][5]  Number   If the event type is Point(1), then the first curve parameter.
      If the event type is Overlap(2), then the start value of the
      first curve parameter range.
    [n][6]  Number   If the event type is Point(1), then the first curve parameter.
      If the event type is Overlap(2), then the end value of the
      curve parameter range.
    [n][7]  Number   If the event type is Point(1), then the U surface parameter.
      If the event type is Overlap(2), then the U surface parameter
      for curve at (n, 5).
    [n][8]  Number   If the event type is Point(1), then the V surface parameter.
      If the event type is Overlap(2), then the V surface parameter
      for curve at (n, 5).
    [n][9]  Number   If the event type is Point(1), then the U surface parameter.
      If the event type is Overlap(2), then the U surface parameter
      for curve at (n, 6).
    [n][10] Number   If the event type is Point(1), then the V surface parameter.
      If the event type is Overlap(2), then the V surface parameter
      for curve at (n, 6)</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsCurve.RhinoScriptSyntax.CurveStartPoint.Static(System.Guid,Rhino.Geometry.Point3d)">
<summary>Sets the start point of a curve object</summary>
<param name="curveId">(Guid) Identifier of the curve object</param>
<param name="point">(Point3d) New start point</param>
<returns>(unit)</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsCurve.RhinoScriptSyntax.CurveStartPoint.Static(System.Guid,System.Int32)">
<summary>Returns the start point of a curve object</summary>
<param name="curveId">(Guid) Identifier of the curve object</param>
<param name="segmentIndex">(int) Optional, The curve segment index if `curveId` identifies a polycurve</param>
<param name="point">(Point3d) Optional, New start point</param>
<returns>(Point3d) The 3D starting point of the curve </returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsCurve.RhinoScriptSyntax.CurveSeam.Static(System.Guid,System.Double)">
<summary>Adjusts the seam, or start/end, point of a closed curve</summary>
<param name="curveId">(Guid) Identifier of the curve object</param>
<param name="parameter">(float) The parameter of the new start/end point.
  Note, if successful, the resulting curve's
  domain will start at `parameter`</param>
<returns>(bool) True or False indicating success or failure</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsCurve.RhinoScriptSyntax.CurveRadius.Static(System.Guid,Rhino.Geometry.Point3d,System.Int32)">
<summary>Returns the radius of curvature at a point on a curve</summary>
<param name="curveId">(Guid) Identifier of the curve object</param>
<param name="testPoint">(Point3d) Sampling point</param>
<param name="segmentIndex">(int) Optional, The curve segment if curveId identifies a polycurve</param>
<returns>(float) The radius of curvature at the point on the curve </returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsCurve.RhinoScriptSyntax.CurvePoints.Static(System.Guid,System.Int32)">
<summary>Returns the control points, or control vertices, of a curve object.
  If the curve is a rational NURBS curve, the euclidean control vertices
  are returned</summary>
<param name="curveId">(Guid) The object's identifier</param>
<param name="segmentIndex">(int) Optional, The curve segment if `curveId` identifies a polycurve</param>
<returns>(Point3d ResizeArray) the control points, or control vertices, of a curve object</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsCurve.RhinoScriptSyntax.CurvePointCount.Static(System.Guid,System.Int32)">
<summary>Returns the control points count of a curve object</summary>
<param name="curveId">(Guid) Identifier of the curve object</param>
<param name="segmentIndex">(int) Optional, The curve segment if `curveId` identifies a polycurve</param>
<returns>(int) Number of control points </returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsCurve.RhinoScriptSyntax.CurvePlane.Static(System.Guid,System.Int32)">
<summary>Returns the plane in which a planar curve lies. Note, this function works
  only on planar curves</summary>
<param name="curveId">(Guid) Identifier of the curve object</param>
<param name="segmentIndex">(int) Optional, The curve segment index if `curveId` identifies a polycurve</param>
<returns>(Plane) The plane in which the curve lies </returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsCurve.RhinoScriptSyntax.CurvePerpFrame.Static(System.Guid,System.Double)">
<summary>Returns the perpendicular plane at a parameter of a curve. The result
  is relatively parallel (zero-twisting) plane</summary>
<param name="curveId">(Guid) Identifier of the curve object</param>
<param name="parameter">(float) Parameter to evaluate</param>
<returns>(Plane) Plane on success</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsCurve.RhinoScriptSyntax.CurveParameter.Static(System.Guid,System.Double)">
<summary>Converts a normalized curve parameter to a curve parameter;
  one within the curve's domain</summary>
<param name="curveId">(Guid) Identifier of the curve object</param>
<param name="parameter">(float) The normalized curve parameter to convert</param>
<returns>(float) curve parameter</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsCurve.RhinoScriptSyntax.CurveNormalizedParameter.Static(System.Guid,System.Double)">
<summary>Converts a curve parameter to a normalized curve parameter;
  one that ranges between 0-1</summary>
<param name="curveId">(Guid) Identifier of the curve object</param>
<param name="parameter">(float) The curve parameter to convert</param>
<returns>(float) normalized curve parameter</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsCurve.RhinoScriptSyntax.CurveNormal.Static(System.Guid,System.Int32)">
<summary>Returns the normal direction of the plane in which a planar curve object lies</summary>
<param name="curveId">(Guid) Identifier of the curve object</param>
<param name="segmentIndex">(int) Optional, The curve segment if curveId identifies a polycurve</param>
<returns>(Vector3d) The 3D normal vector </returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsCurve.RhinoScriptSyntax.CurveMidPoint.Static(System.Guid,System.Int32)">
<summary>Returns the mid point of a curve object</summary>
<param name="curveId">(Guid) Identifier of the curve object</param>
<param name="segmentIndex">(int) Optional, The curve segment index if `curveId` identifies a polycurve</param>
<returns>(Point3d) The 3D midpoint of the curve </returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsCurve.RhinoScriptSyntax.CurveLength.Static(System.Guid,System.Int32,Rhino.Geometry.Interval)">
<summary>Returns the length of a curve object</summary>
<param name="curveId">(Guid) Identifier of the curve object</param>
<param name="segmentIndex">(int) Optional, The curve segment index if `curveId` identifies a polycurve</param>
<param name="subDomain">(Interval) Optional, List of two numbers identifying the sub-domain of the
  curve on which the calculation will be performed. The two parameters
  (sub-domain) must be non-decreasing. If omitted, the length of the
  entire curve is returned</param>
<returns>(float) The length of the curve </returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsCurve.RhinoScriptSyntax.CurveKnots.Static(System.Guid,System.Int32)">
<summary>Returns the knots, or knot vector, of a curve object</summary>
<param name="curveId">(Guid) Identifier of the curve object</param>
<param name="segmentIndex">(int) Optional, The curve segment index if `curveId` identifies a polycurve</param>
<returns>(float ResizeArray) knot values </returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsCurve.RhinoScriptSyntax.CurveKnotCount.Static(System.Guid,System.Int32)">
<summary>Returns the knot count of a curve object</summary>
<param name="curveId">(Guid) Identifier of the curve object</param>
<param name="segmentIndex">(int) Optional, The curve segment if `curveId` identifies a polycurve</param>
<returns>(int) The number of knots </returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsCurve.RhinoScriptSyntax.CurveFrame.Static(System.Guid,System.Double,System.Int32)">
<summary>Returns the plane at a parameter of a curve. The plane is based on the
  tangent and curvature vectors at a parameter</summary>
<param name="curveId">(Guid) Identifier of the curve object</param>
<param name="parameter">(float) Parameter to evaluate</param>
<param name="segmentIndex">(int) Optional, The curve segment index if `curveId` identifies a polycurve</param>
<returns>(Plane) The plane at the specified parameter </returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsCurve.RhinoScriptSyntax.CurveFilletPoints.Static(System.Guid,System.Guid,System.Double,Rhino.Geometry.Point3d,Rhino.Geometry.Point3d)">
<summary>Find points at which to cut a pair of curves so that a fillet of a
  specified radius fits. A fillet point is a pair of points (point0, point1)
  such that there is a circle of radius tangent to curve curve0 at point0 and
  tangent to curve curve1 at point1. Of all possible fillet points, this
  function returns the one which is the closest to the base point basePointA,
  basePointB. Distance from the base point is measured by the sum of arc
  lengths along the two curves</summary>
<param name="curveA">(Guid) Identifier of the first curve object</param>
<param name="curveB">(Guid) Identifier of the second curve object</param>
<param name="radius">(float) The fillet radius</param>
<param name="basePointA">(Point3d) Optional, The base point on the first curve.
  If omitted, the starting point of the curve is used</param>
<param name="basePointB">(Point3d) Optional, The base point on the second curve. If omitted,
  the starting point of the curve is used</param>
<returns>(Point3d * Point3d * Plane)
  . The list elements are as follows:
    [0]    A point on the first curve at which to cut (point).
    [1]    A point on the second curve at which to cut (point).
    [2]    The fillet plane</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsCurve.RhinoScriptSyntax.CurveEndPoint.Static(System.Guid,System.Int32)">
<summary>Returns the end point of a curve object</summary>
<param name="curveId">(Guid) Identifier of the curve object</param>
<param name="segmentIndex">(int) Optional, The curve segment index if `curveId` identifies a polycurve</param>
<returns>(Point3d) The 3d endpoint of the curve </returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsCurve.RhinoScriptSyntax.CurveEditPoints.Static(System.Guid,System.Boolean,System.Int32)">
<summary>Returns the edit, or Greville, points of a curve object.
  For each curve control point, there is a corresponding edit point</summary>
<param name="curveId">(Guid) Identifier of the curve object</param>
<param name="returnParameters">(bool) Optional, Default Value: <c>false</c>
If True, return as a list of curve parameters.
  If False, return as a list of 3d points</param>
<param name="segmentIndex">(int) Optional, The curve segment index is `curveId` identifies a polycurve</param>
<returns>(Collections.Point3dList) curve edit points on success</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsCurve.RhinoScriptSyntax.CurveDomain.Static(System.Guid,System.Int32)">
<summary>Returns the domain of a curve object
  as an indexable object with two elements</summary>
<param name="curveId">(Guid) Identifier of the curve object</param>
<param name="segmentIndex">(int) Optional, The curve segment index if `curveId` identifies a polycurve</param>
<returns>(Interval) the domain of the curve </returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsCurve.RhinoScriptSyntax.CurveDiscontinuity.Static(System.Guid,System.Int32)">
<summary>Search for a derivatitive, tangent, or curvature discontinuity in
  a curve object</summary>
<param name="curveId">(Guid) Identifier of curve object</param>
<param name="style">(int) The type of continuity to test for. The types of
  continuity are as follows:
  Value    Description
  1        C0 - Continuous function
  2        C1 - Continuous first derivative
  3        C2 - Continuous first and second derivative
  4        G1 - Continuous unit tangent
  5        G2 - Continuous unit tangent and curvature</param>
<returns>(Point3d ResizeArray) 3D points where the curve is discontinuous</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsCurve.RhinoScriptSyntax.CurveDirectionsMatch.Static(System.Guid,System.Guid)">
<summary>Tests if two curve objects are generally in the same direction or if they
  would be more in the same direction if one of them were flipped. When testing
  curve directions, both curves must be either open or closed - you cannot test
  one open curve and one closed curve</summary>
<param name="curveA">(Guid) Identifier of first curve object</param>
<param name="curveB">(Guid) Identifier of second curve object</param>
<returns>(bool) True if the curve directions match, otherwise False</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsCurve.RhinoScriptSyntax.CurveDim.Static(System.Guid,System.Int32)">
<summary>Returns the dimension of a curve object</summary>
<param name="curveId">(Guid) Identifier of a curve object</param>
<param name="segmentIndex">(int) Optional,
  The curve segment if curveId identifies a polycurve</param>
<returns>(int) The dimension of the curve . </returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsCurve.RhinoScriptSyntax.CurveDeviation.Static(System.Guid,System.Guid)">
<summary>Returns the minimum and maximum deviation between two curve objects</summary>
<param name="curveA">(Guid) first Curve</param>
<param name="curveB">(Guid) second Curve</param>
<returns>(float * float * float * float * float * float) of deviation information on success
  [0] = curveA parameter at maximum overlap distance point
  [1] = curveB parameter at maximum overlap distance point
  [2] = maximum overlap distance
  [3] = curveAparameter at minimum overlap distance point
  [4] = curveB parameter at minimum overlap distance point
  [5] = minimum distance between curves</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsCurve.RhinoScriptSyntax.CurveDegree.Static(System.Guid,System.Int32)">
<summary>Returns the degree of a curve object</summary>
<param name="curveId">(Guid) Identifier of a curve object</param>
<param name="segmentIndex">(int) Optional, The curve segment index if `curveId` identifies a polycurve</param>
<returns>(int) The degree of the curve </returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsCurve.RhinoScriptSyntax.CurveCurveIntersection.Static(System.Guid,System.Guid,System.Double)">
<summary>Calculates intersection of two curve objects</summary>
<param name="curveA">(Guid) Identifier of the first curve object</param>
<param name="curveB">(Guid) Optional, Identifier of the second curve object. If omitted, then a
  self-intersection test will be performed on curveA</param>
<param name="tolerance">(float) Optional, Default Value: <c>Doc.ModelAbsoluteTolerance</c>
  Absolute tolerance in drawing units. If omitted,
  the document's current absolute tolerance is used</param>
<returns>( a ResizeArray of int*Point3d*Point3d*Point3d*Point3d*float*float*float*float)
  List of tuples: containing intersection information .
  The list will contain one or more of the following elements:
    Element Type     Description
    [n][0]  Number   The intersection event type, either Point (1) or Overlap (2).
    [n][1]  Point3d  If the event type is Point (1), then the intersection point
      on the first curve. If the event type is Overlap (2), then
      intersection start point on the first curve.
    [n][2]  Point3d  If the event type is Point (1), then the intersection point
      on the first curve. If the event type is Overlap (2), then
      intersection end point on the first curve.
    [n][3]  Point3d  If the event type is Point (1), then the intersection point
      on the second curve. If the event type is Overlap (2), then
      intersection start point on the second curve.
    [n][4]  Point3d  If the event type is Point (1), then the intersection point
      on the second curve. If the event type is Overlap (2), then
      intersection end point on the second curve.
    [n][5]  Number   If the event type is Point (1), then the first curve parameter.
      If the event type is Overlap (2), then the start value of the
      first curve parameter range.
    [n][6]  Number   If the event type is Point (1), then the first curve parameter.
      If the event type is Overlap (2), then the end value of the
      first curve parameter range.
    [n][7]  Number   If the event type is Point (1), then the second curve parameter.
      If the event type is Overlap (2), then the start value of the
      second curve parameter range.
    [n][8]  Number   If the event type is Point (1), then the second curve parameter.
      If the event type is Overlap (2), then the end value of the
      second curve parameter range</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsCurve.RhinoScriptSyntax.CurveCurvature.Static(System.Guid,System.Double)">
<summary>Returns the curvature of a curve at a parameter. See the Rhino help for
  details on curve curvature</summary>
<param name="curveId">(Guid) Identifier of the curve</param>
<param name="parameter">(float) Parameter to evaluate</param>
<returns>(Point3d * Vector3d * Point3d * float * Vector3d) of curvature information on success
  [0] = point at specified parameter
  [1] = tangent vector
  [2] = center of radius of curvature
  [3] = radius of curvature
  [4] = curvature vector</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsCurve.RhinoScriptSyntax.CurveContourPoints.Static(System.Guid,Rhino.Geometry.Point3d,Rhino.Geometry.Point3d,System.Double)">
<summary>Returns the 3D point locations calculated by contouring a curve object</summary>
<param name="curveId">(Guid) Identifier of a curve object</param>
<param name="startPoint">(Point3d) 3D starting point of a center line</param>
<param name="endPoint">(Point3d) 3D ending point of a center line</param>
<param name="interval">(float) The distance between contour curves</param>
<returns>(Point3d array) A list of 3D points, one for each contour</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsCurve.RhinoScriptSyntax.CurveClosestPoint.Static(System.Guid,Rhino.Geometry.Point3d,System.Int32)">
<summary>Returns the point on a curve that is closest to a test point</summary>
<param name="curveId">(Guid) Identifier of a curve object</param>
<param name="point">(Point3d) Sampling point</param>
<param name="segmentIndex">(int) Optional,
Curve segment index if `curveId` identifies a polycurve</param>
<returns>(Point3d) The closest point on the curve</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsCurve.RhinoScriptSyntax.CurveClosestParameter.Static(System.Guid,Rhino.Geometry.Point3d,System.Int32)">
<summary>Returns parameter of the point on a curve that is closest to a test point</summary>
<param name="curveId">(Guid) Identifier of a curve object</param>
<param name="point">(Point3d) Sampling point</param>
<param name="segmentIndex">(int) Optional,
Curve segment index if `curveId` identifies a polycurve</param>
<returns>(float) The parameter of the closest point on the curve</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsCurve.RhinoScriptSyntax.CurveClosestObject.Static(System.Guid,System.Collections.Generic.IEnumerable{System.Guid})">
<summary>Returns the 3D point locations on two objects where they are closest to
  each other. Note, this function provides similar functionality to that of
  Rhino's ClosestPt command</summary>
<param name="curveId">(Guid) Identifier of the curve object to test</param>
<param name="curveIds">(Guid seq) List of identifiers of point cloud, curve, surface, or
  polysurface to test against</param>
<returns>(Guid * Point3d * Point3d) containing the results of the closest point calculation.
  The elements are as follows:
    [0]    The identifier of the closest object.
    [1]    The 3-D point that is closest to the closest object.
    [2]    The 3-D point that is closest to the test curve</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsCurve.RhinoScriptSyntax.CurveBrepIntersect.Static(System.Guid,System.Guid,System.Double)">
<summary>Intersects a curve object with a brep object. Note, unlike the
  CurveSurfaceIntersection function, this function works on trimmed surfaces</summary>
<param name="curveId">(Guid) Identifier of a curve object</param>
<param name="brepId">(Guid) Identifier of a brep object</param>
<param name="tolerance">(float) Optional, Default Value: <c>Doc.ModelAbsoluteTolerance</c>
Distance tolerance at segment midpoints.</param>
<returns>(Guid ResizeArray * Guid ResizeArray) List of Curves and List of points </returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsCurve.RhinoScriptSyntax.CurveBooleanUnion.Static(System.Collections.Generic.IEnumerable{System.Guid},System.Double)">
<summary>Calculate the union of two or more closed, planar curves and
  add the results to the document. Note, curves must be coplanar</summary>
<param name="curveIds">(Guid seq) List of two or more close planar curves identifiers</param>
<param name="tolerance">(float) Optional, Default Value: <c>Doc.ModelAbsoluteTolerance</c>
A positive tolerance value, or None for the doc default</param>
<returns>(Guid ResizeArray) The identifiers of the new objects</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsCurve.RhinoScriptSyntax.CurveBooleanIntersection.Static(System.Guid,System.Guid,System.Double)">
<summary>Calculates the intersection of two closed, planar curves and adds
  the results to the document. Note, curves must be coplanar</summary>
<param name="curveA">(Guid) Identifier of the first curve object</param>
<param name="curveB">(Guid) Identifier of the second curve object</param>
<param name="tolerance">(float) Optional, Default Value: <c>Doc.ModelAbsoluteTolerance</c>
A positive tolerance value, or None for the doc default</param>
<returns>(Guid ResizeArray) The identifiers of the new objects</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsCurve.RhinoScriptSyntax.CurveBooleanDifference.Static(System.Guid,System.Guid,System.Double)">
<summary>Calculates the difference between two closed, planar curves and
  adds the results to the document. Note, curves must be coplanar</summary>
<param name="curveA">(Guid) Identifier of the first curve object</param>
<param name="curveB">(Guid) Identifier of the second curve object</param>
<param name="tolerance">(float) Optional, Default Value: <c>Doc.ModelAbsoluteTolerance</c>
A positive tolerance value, or None for the doc default</param>
<returns>(Guid ResizeArray) The identifiers of the new objects , </returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsCurve.RhinoScriptSyntax.CurveArrows.Static(System.Collections.Generic.IEnumerable{System.Guid},System.Int32)">
<summary>Enables or disables multiple curve objects's annotation arrows</summary>
<param name="curveIds">(Guid seq) Identifier of multiple curve</param>
<param name="arrowStyle">(int) The style of annotation arrow to be displayed.
  0 = no arrows
  1 = display arrow at start of curve
  2 = display arrow at end of curve
  3 = display arrow at both start and end of curve</param>
<returns>(unit) void, nothing</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsCurve.RhinoScriptSyntax.CurveArrows.Static(System.Guid,System.Int32)">
<summary>Enables or disables a curve object's annotation arrows</summary>
<param name="curveId">(Guid) Identifier of a curve</param>
<param name="arrowStyle">(int) The style of annotation arrow to be displayed.
  0 = no arrows
  1 = display arrow at start of curve
  2 = display arrow at end of curve
  3 = display arrow at both start and end of curve</param>
<returns>(unit) void, nothing</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsCurve.RhinoScriptSyntax.CurveArrows.Static(System.Guid)">
<summary>Get status of a curve object's annotation arrows</summary>
<param name="curveId">(Guid) Identifier of a curve</param>
<returns>(int) The current annotation arrow style
  0 = no arrows
  1 = display arrow at start of curve
  2 = display arrow at end of curve
  3 = display arrow at both start and end of curve</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsCurve.RhinoScriptSyntax.CurveAreaCentroid.Static(System.Guid)">
<summary>Returns area centroid of closed, planar curves. The results are based
  on the current drawing units</summary>
<param name="curveId">(Guid) The identifier of a closed, planar curve object</param>
<returns>(Point3d ) The 3d centroid point</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsCurve.RhinoScriptSyntax.CurveArea.Static(System.Guid)">
<summary>Returns area of closed planar curves. The results are based on the
  current drawing units</summary>
<param name="curveId">(Guid) The identifier of a closed, planar curve object</param>
<returns>(float) The area</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsCurve.RhinoScriptSyntax.CurveArcLengthPoint.Static(System.Guid,System.Double,System.Boolean)">
<summary>Returns the point on the curve that is a specified arc length
  from the start of the curve</summary>
<param name="curveId">(Guid) Identifier of a curve object</param>
<param name="length">(float) The arc length from the start of the curve to evaluate</param>
<param name="fromStart">(bool) Optional, Default Value: <c>true</c>
If not specified or True, then the arc length point is
  calculated from the start of the curve. If False, the arc length
  point is calculated from the end of the curve</param>
<returns>(Point3d) on curve</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsCurve.RhinoScriptSyntax.ConvertCurveToPolyline.Static(System.Guid,System.Double,System.Double,System.Boolean,System.Double,System.Double)">
<summary>Convert curve to a polyline curve</summary>
<param name="curveId">(Guid) Identifier of a curve object</param>
<param name="angleTolerance">(float) Optional, Default Value: <c>5.0</c>
The maximum angle between curve tangents at line endpoints.</param>
<param name="tolerance">(float) Optional, Default Value: <c>0.01</c>
The distance tolerance at segment midpoints.</param>
<param name="deleteInput">(bool) Optional, Default Value: <c>false</c>
Delete the curve object specified by curveId. If omitted, curveId will not be deleted</param>
<param name="minEdgeLength">(float) Optional, Minimum segment length</param>
<param name="maxEdgeLength">(float) Optional, Maximum segment length</param>
<returns>(Guid) The new curve </returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsCurve.RhinoScriptSyntax.ClosedCurveOrientation.Static(System.Guid,Rhino.Geometry.Vector3d)">
<summary>Determine the orientation (counter-clockwise or clockwise) of a closed,
  planar curve</summary>
<param name="curveId">(Guid) Identifier of a curve object</param>
<param name="direction">(Vector3d) Optional, Default Value: <c>Vector3d.ZAxis</c>
3d vector that identifies up, or Z axs, direction of
  the plane to test against</param>
<returns>(int) 1 if the curve's orientation is clockwise
  -1 if the curve's orientation is counter-clockwise
   0 if unable to compute the curve's orientation</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsCurve.RhinoScriptSyntax.CloseCurve.Static(System.Guid,System.Double)">
<summary>Closes an open curve object by making adjustments to the end points so
  they meet at a point</summary>
<param name="curveId">(Guid) Identifier of a curve object</param>
<param name="tolerance">(float) Optional, Default Value: <c>Doc.ModelAbsoluteTolerance</c>
  Maximum allowable distance between start and end point</param>
<returns>(Guid) objectId of the new curve object</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsCurve.RhinoScriptSyntax.CircleRadius.Static(System.Guid,System.Int32)">
<summary>Returns the radius of a circle curve object</summary>
<param name="curveId">(Guid) Identifier of a curve object</param>
<param name="segmentIndex">(int) Optional, The curve segment index if `curveId` identifies a polycurve</param>
<returns>(float) The radius of the circle </returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsCurve.RhinoScriptSyntax.CircleCircumference.Static(System.Guid,System.Int32)">
<summary>Returns the circumference of a circle curve object</summary>
<param name="curveId">(Guid) Identifier of a curve object</param>
<param name="segmentIndex">(int) Optional, The curve segment index if `curveId` identifies a polycurve</param>
<returns>(float) The circumference of the circle </returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsCurve.RhinoScriptSyntax.CircleCenterPlane.Static(System.Guid,System.Int32)">
<summary>Returns the center plane of a circle curve object</summary>
<param name="curveId">(Guid) Identifier of a curve object</param>
<param name="segmentIndex">(int) Optional, The curve segment index if `curveId` identifies a polycurve</param>
<returns>(Plane) The 3D plane at the center point of the circle </returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsCurve.RhinoScriptSyntax.CircleCenterPoint.Static(System.Guid,System.Int32)">
<summary>Returns the center point of a circle curve object</summary>
<param name="curveId">(Guid) Identifier of a curve object</param>
<param name="segmentIndex">(int) Optional, The curve segment index if `curveId` identifies a polycurve</param>
<returns>(Point3d) The 3D center point of the circle </returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsCurve.RhinoScriptSyntax.ArcRadius.Static(System.Guid,System.Int32)">
<summary>Returns the radius of an arc curve object</summary>
<param name="curveId">(Guid) Identifier of a curve object</param>
<param name="segmentIndex">(int) Optional, The curve segment index if `curveId` identifies a polycurve</param>
<returns>(float) The radius of the arc </returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsCurve.RhinoScriptSyntax.ArcMidPoint.Static(System.Guid,System.Int32)">
<summary>Returns the mid point of an arc curve object</summary>
<param name="curveId">(Guid) Identifier of a curve object</param>
<param name="segmentIndex">(int) Optional, The curve segment index if `curveId` identifies a polycurve</param>
<returns>(Point3d) The 3D mid point of the arc </returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsCurve.RhinoScriptSyntax.ArcCenterPoint.Static(System.Guid,System.Int32)">
<summary>Returns the center point of an arc curve object</summary>
<param name="curveId">(Guid) Identifier of a curve object</param>
<param name="segmentIndex">(int) Optional, The curve segment index if `curveId` identifies a polycurve</param>
<returns>(Point3d) The 3D center point of the arc </returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsCurve.RhinoScriptSyntax.ArcAngle.Static(System.Guid,System.Int32)">
<summary>Returns the angle of an arc curve object</summary>
<param name="curveId">(Guid) Identifier of a curve object</param>
<param name="segmentIndex">(int) Optional,
Identifies the curve segment if curveId identifies a polycurve</param>
<returns>(float) The angle in degrees </returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsCurve.RhinoScriptSyntax.AddSubCrv.Static(System.Guid,System.Double,System.Double)">
<summary>Add a curve object based on a portion, or interval of an existing curve
  object. Similar in operation to Rhino's SubCrv command</summary>
<param name="curveId">(Guid) Identifier of a closed planar curve object</param>
<param name="param0">(float) First parameters on the source curve</param>
<param name="param1">(float) Second parameters on the source curve</param>
<returns>(Guid) objectId of the new curve object</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsCurve.RhinoScriptSyntax.AddSpiral.Static(Rhino.Geometry.Point3d,Rhino.Geometry.Point3d,System.Double,System.Double,System.Double,System.Double)">
<summary>Adds a spiral or helical curve to the document</summary>
<param name="point0">(Point3d) Helix axis start point or center of spiral</param>
<param name="point1">(Point3d) Helix axis end point or point normal on spiral plane</param>
<param name="pitch">(float) Distance between turns. If 0, then a spiral. If > 0 then the
  distance between helix "threads"</param>
<param name="turns">(float) Number of turns</param>
<param name="radius0">(float) Starting radius of spiral</param>
<param name="radius1">(float) Optional, Ending radius of spiral. If omitted, the starting radius is used for the complete spiral</param>
<returns>(Guid) objectId of new curve on success</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsCurve.RhinoScriptSyntax.AddRectangle.Static(Rhino.Geometry.Plane,System.Double,System.Double)">
<summary>Add a rectangular curve to the document</summary>
<param name="plane">(Plane) Plane on which the rectangle will lie</param>
<param name="width">(float) Width of rectangle as measured along the plane's
  x and y axes</param>
<param name="height">(float) Height of rectangle as measured along the plane's
  x and y axes</param>
<returns>(Guid) objectId of new rectangle</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsCurve.RhinoScriptSyntax.AddPolyline.Static(System.Collections.Generic.IEnumerable{Rhino.Geometry.Point3d})">
<summary>Adds a polyline curve to the current model</summary>
<param name="points">(Point3d seq) List of 3D points. Duplicate, consecutive points will be
  removed. The list must contain at least two points. If the
  list contains less than four points, then the first point and
  last point must be different</param>
<returns>(Guid) objectId of the new curve object</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsCurve.RhinoScriptSyntax.AddNurbsCurve.Static(System.Collections.Generic.IEnumerable{Rhino.Geometry.Point3d},System.Collections.Generic.IEnumerable{System.Double},System.Int32,System.Collections.Generic.IEnumerable{System.Double})">
<summary>Adds a NURBS curve object to the document</summary>
<param name="points">(Point3d seq) A list containing 3D control points</param>
<param name="knots">(float seq) Knot values for the curve. The number of elements in knots must
  equal the number of elements in points plus degree minus 1</param>
<param name="degree">(int) Degree of the curve. must be greater than of equal to 1</param>
<param name="weights">(float seq) Optional, Weight values for the curve. Number of elements should
  equal the number of elements in points. Values must be greater than 0</param>
<returns>(Guid) the identifier of the new object , otherwise None</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsCurve.RhinoScriptSyntax.AddLine.Static(Rhino.Geometry.Point3d,Rhino.Geometry.Point3d)">
<summary>Adds a line curve to the current model</summary>
<param name="start">(Point3d) Startpoint of the line</param>
<param name="ende">(Point3d) Endpoint of the line</param>
<returns>(Guid) objectId of the new curve object</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsCurve.RhinoScriptSyntax.AddInterpCurve.Static(System.Collections.Generic.IEnumerable{Rhino.Geometry.Point3d},System.Int32,System.Int32,Rhino.Geometry.Vector3d,Rhino.Geometry.Vector3d)">
<summary>Adds an interpolated curve object to the document. Options exist to make
  a periodic curve or to specify the tangent at the endpoints. The resulting
  curve is a non-rational NURBS curve of the specified degree</summary>
<param name="points">(Point3d seq) A list containing 3D points to interpolate. For periodic curves,
  if the final point is a duplicate of the initial point, it is
  ignored. The number of control points must be bigger than 'degree' number</param>
<param name="degree">(int) Optional, Default Value: <c>3</c>    
  Periodic curves must have a degree bigger than 1. For knotstyle = 1 or 2,
  the degree must be 3. For knotstyle = 4 or 5, the degree must be odd</param>
<param name="knotstyle">(int) Optional, Default Value: <c>0</c>
  0 Uniform knots.  Parameter spacing between consecutive knots is 1.0.
  1 Chord length spacing.  Requires degree = 3 with arrCV1 and arrCVn1 specified.
  2 Sqrt (chord length).  Requires degree = 3 with arrCV1 and arrCVn1 specified.
  3 Periodic with uniform spacing.
  4 Periodic with chord length spacing.  Requires an odd degree value.
  5 Periodic with sqrt (chord length) spacing.  Requires an odd degree value</param>
<param name="startTangent">(Vector3d) Optional, A vector that specifies a tangency condition at the
  beginning of the curve. If the curve is periodic, this argument must be omitted</param>
<param name="endTangent">(Vector3d) Optional, 3d vector that specifies a tangency condition at the
  end of the curve. If the curve is periodic, this argument must be omitted</param>
<returns>(Guid) objectId of the new curve object</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsCurve.RhinoScriptSyntax.AddInterpCrvOnSrfUV.Static(System.Guid,System.Collections.Generic.IEnumerable{Rhino.Geometry.Point2d})">
<summary>Adds an interpolated curve object based on surface parameters,
  that lies on a specified surface. Note, this function will not
  create periodic curves, but it will create closed curves</summary>
<param name="surfaceId">(Guid) Identifier of the surface to create the curve on</param>
<param name="points">(Point2d seq) A list of 2D surface parameters. The list must contain
  at least 2 sets of parameters</param>
<returns>(Guid) objectId of the new curve object</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsCurve.RhinoScriptSyntax.AddInterpCrvOnSrf.Static(System.Guid,System.Collections.Generic.IEnumerable{Rhino.Geometry.Point3d})">
<summary>Adds an interpolated curve object that lies on a specified
  surface.  Note, this function will not create periodic curves,
  but it will create closed curves</summary>
<param name="surfaceId">(Guid) Identifier of the surface to create the curve on</param>
<param name="points">(Point3d seq) List of 3D points that lie on the specified surface.
  The list must contain at least 2 points</param>
<returns>(Guid) objectId of the new curve object</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsCurve.RhinoScriptSyntax.AddFilletCurve.Static(System.Guid,System.Guid,System.Double,Rhino.Geometry.Point3d,Rhino.Geometry.Point3d)">
<summary>Adds a fillet curve between two curve objects</summary>
<param name="curveA">(Guid) Identifier of the first curve object</param>
<param name="curveB">(Guid) Identifier of the second curve object</param>
<param name="radius">(float) Optional, Default Value: <c>1.0</c>
Fillet radius</param>
<param name="basePointA">(Point3d) Optional, Base point of the first curve. If omitted,
  starting point of the curve is used</param>
<param name="basePointB">(Point3d) Optional, Base point of the second curve. If omitted,
  starting point of the curve is used</param>
<returns>(Guid) objectId of the new curve object</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsCurve.RhinoScriptSyntax.AddEllipse3Pt.Static(Rhino.Geometry.Point3d,Rhino.Geometry.Point3d,Rhino.Geometry.Point3d)">
<summary>Adds a 3-point elliptical curve to the document</summary>
<param name="center">(Point3d) Center point of the ellipse</param>
<param name="second">(Point3d) End point of the x axis</param>
<param name="third">(Point3d) End point of the y axis</param>
<returns>(Guid) objectId of the new curve object</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsCurve.RhinoScriptSyntax.AddEllipse.Static(Rhino.Geometry.Plane,System.Double,System.Double)">
<summary>Adds an elliptical curve to the document</summary>
<param name="plane">(Plane) The plane on which the ellipse will lie. The origin of
  the plane will be the center of the ellipse</param>
<param name="radiusX">(float) radius in the X axis direction</param>
<param name="radiusY">(float) radius in the Y axis direction</param>
<returns>(Guid) objectId of the new curve object</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsCurve.RhinoScriptSyntax.AddCurve.Static(System.Collections.Generic.IEnumerable{Rhino.Geometry.Point3d},System.Int32)">
<summary>Adds a control points curve object to the document</summary>
<param name="points">(Point3d seq) A list of points</param>
<param name="degree">(int) Optional, Default Value: <c>3</c>
Degree of the curve</param>
<returns>(Guid) objectId of the new curve object</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsCurve.RhinoScriptSyntax.AddCircle3Pt.Static(Rhino.Geometry.Point3d,Rhino.Geometry.Point3d,Rhino.Geometry.Point3d)">
<summary>Adds a 3-point circle curve to the document</summary>
<param name="first">(Point3d) First point on the circle'</param>
<param name="second">(Point3d) Second point on the circle'</param>
<param name="third">(Point3d) Third point on the circle'</param>
<returns>(Guid) objectId of the new curve object</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsCurve.RhinoScriptSyntax.AddCircle.Static(Rhino.Geometry.Plane,System.Double)">
<summary>Adds a circle curve to the document</summary>
<param name="plane">(Plane) Plane on which the circle will lie. If a point is
  passed, this will be the center of the circle on the active construction plane</param>
<param name="radius">(float) The radius of the circle</param>
<returns>(Guid) objectId of the new curve object</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsCurve.RhinoScriptSyntax.AddBlendCurve.Static(System.Tuple{System.Guid,System.Guid},System.Tuple{System.Double,System.Double},System.Tuple{System.Boolean,System.Boolean},System.Tuple{System.Int32,System.Int32})">
<summary>Makes a curve blend between two curves</summary>
<param name="curves">(Guid * Guid) List of two curves</param>
<param name="parameters">(float * float) List of two curve parameters defining the blend end points</param>
<param name="reverses">(bool * bool) List of two boolean values specifying to use the natural or opposite direction of the curve</param>
<param name="continuities">(int * int) List of two numbers specifying continuity at end points
  0 = position
  1 = tangency
  2 = curvature</param>
<returns>(Guid) identifier of new curve on success</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsCurve.RhinoScriptSyntax.AddArcPtTanPt.Static(Rhino.Geometry.Point3d,Rhino.Geometry.Vector3d,Rhino.Geometry.Point3d)">
<summary>Adds an arc curve, created from a start point, a start direction, and an
  end point, to the document</summary>
<param name="start">(Point3d) The starting point of the arc</param>
<param name="direction">(Vector3d) The arc direction at start</param>
<param name="ende">(Point3d) The ending point of the arc</param>
<returns>(Guid) objectId of the new curve object</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsCurve.RhinoScriptSyntax.AddArc3Pt.Static(Rhino.Geometry.Point3d,Rhino.Geometry.Point3d,Rhino.Geometry.Point3d)">
<summary>Adds a 3-point arc curve to the document</summary>
<param name="start">(Point3d) Start of the arc</param>
<param name="ende">(Point3d) Endpoint of the arc</param>
<param name="pointOnArc">(Point3d) A point on the arc</param>
<returns>(Guid) objectId of the new curve object</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsCurve.RhinoScriptSyntax.AddArc.Static(Rhino.Geometry.Plane,System.Double,System.Double)">
<summary>Adds an arc curve to the document</summary>
<param name="plane">(Plane) Plane on which the arc will lie. The origin of the plane will be
  the center point of the arc. x-axis of the plane defines the 0 angle
  direction</param>
<param name="radius">(float) Radius of the arc</param>
<param name="angleDegrees">(float) Interval of arc in degrees</param>
<returns>(Guid) objectId of the new curve object</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsDimension.RhinoScriptSyntax.RenameDimStyle.Static(System.String,System.String)">
<summary>Renames an existing dimension style</summary>
<param name="oldstyle">(string) The name of an existing dimension style</param>
<param name="newstyle">(string) The new dimension style name</param>
<returns>(unit) void, nothing</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsDimension.RhinoScriptSyntax.LeaderText.Static(System.Collections.Generic.IEnumerable{System.Guid},System.String)">
<summary>Modifies the text string of multiple dimension leader objects</summary>
<param name="objectsIds">(Guid seq) The objects's identifiers</param>
<param name="text">(string) The new text string</param>
<returns>(unit) void, nothing</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsDimension.RhinoScriptSyntax.LeaderText.Static(System.Guid,System.String)">
<summary>Modifies the text string of a dimension leader object</summary>
<param name="objectId">(Guid) The object's identifier</param>
<param name="text">(string) The new text string</param>
<returns>(unit) void, nothing</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsDimension.RhinoScriptSyntax.LeaderText.Static(System.Guid)">
<summary>Returns the text string of a dimension leader object</summary>
<param name="objectId">(Guid) The object's identifier</param>
<returns>(string) The current text string</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsDimension.RhinoScriptSyntax.IsRadialDimension.Static(System.Guid)">
<summary>Verifies an object is a radial dimension object</summary>
<param name="objectId">(Guid) The object's identifier</param>
<returns>(bool) True or False</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsDimension.RhinoScriptSyntax.IsOrdinateDimension.Static(System.Guid)">
<summary>Verifies an object is an ordinate dimension object</summary>
<param name="objectId">(Guid) The object's identifier</param>
<returns>(bool) True or False</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsDimension.RhinoScriptSyntax.IsLinearDimension.Static(System.Guid)">
<summary>Verifies an object is a linear dimension object</summary>
<param name="objectId">(Guid) The object's identifier</param>
<returns>(bool) True or False</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsDimension.RhinoScriptSyntax.IsLeader.Static(System.Guid)">
<summary>Verifies an object is a dimension leader object</summary>
<param name="objectId">(Guid) The object's identifier</param>
<returns>(bool) True or False</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsDimension.RhinoScriptSyntax.IsDimStyleReference.Static(System.String)">
<summary>Verifies that an existing dimension style is from a reference file</summary>
<param name="dimStyle">(string) The name of an existing dimension style</param>
<returns>(bool) True or False</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsDimension.RhinoScriptSyntax.IsDimStyle.Static(System.String)">
<summary>Verifies the existance of a dimension style in the document</summary>
<param name="dimStyle">(string) The name of a dimStyle to test for</param>
<returns>(bool) True or False</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsDimension.RhinoScriptSyntax.IsDimension.Static(System.Guid)">
<summary>Verifies an object is a dimension object</summary>
<param name="objectId">(Guid) The object's identifier</param>
<returns>(bool) True or False</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsDimension.RhinoScriptSyntax.IsDiameterDimension.Static(System.Guid)">
<summary>Verifies an object is a diameter dimension object</summary>
<param name="objectId">(Guid) The object's identifier</param>
<returns>(bool) True or False</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsDimension.RhinoScriptSyntax.IsAngularDimension.Static(System.Guid)">
<summary>Verifies an object is an angular dimension object</summary>
<param name="objectId">(Guid) The object's identifier</param>
<returns>(bool) True or False</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsDimension.RhinoScriptSyntax.IsAlignedDimension.Static(System.Guid)">
<summary>Verifies an object is an aligned dimension object</summary>
<param name="objectId">(Guid) The object's identifier</param>
<returns>(bool) True or False</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsDimension.RhinoScriptSyntax.DimStyleTextHeight.Static(System.String,System.Double)">
<summary>Changes the text height used by a dimension style</summary>
<param name="dimStyle">(string) The name of an existing dimension style</param>
<param name="height">(float) The new text height</param>
<returns>(unit) void, nothing</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsDimension.RhinoScriptSyntax.DimStyleTextHeight.Static(System.String)">
<summary>Returns the text height used by a dimension style</summary>
<param name="dimStyle">(string) The name of an existing dimension style</param>
<returns>(float) The current text height</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsDimension.RhinoScriptSyntax.DimStyleTextGap.Static(System.String,System.Double)">
<summary>Changes the text gap used by a dimension style</summary>
<param name="dimStyle">(string) The name of an existing dimension style</param>
<param name="gap">(float) The new text gap</param>
<returns>(unit) void, nothing</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsDimension.RhinoScriptSyntax.DimStyleTextGap.Static(System.String)">
<summary>Returns the text gap used by a dimension style</summary>
<param name="dimStyle">(string) The name of an existing dimension style</param>
<returns>(float) The current text gap</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsDimension.RhinoScriptSyntax.DimStyleTextAlignment.Static(System.String,System.Int32)">
<summary>Changes the text alignment mode of a dimension style</summary>
<param name="dimStyle">(string) The name of an existing dimension style</param>
<param name="alignment">(int) The new text alignment
   Top                   0   Attach to top of an 'I' on the first line. (Independent of glyphs being displayed.)
   MiddleOfTop           1   Attach to middle of an 'I' on the first line. (Independent of glyphs being displayed.)
   BottomOfTop           2   Attach to baseline of first line. (Independent of glyphs being displayed.)
   Middle                3   Attach to middle of text vertical advance. (Independent of glyphs being displayed.)
   MiddleOfBottom        4   Attach to middle of an 'I' on the last line. (Independent of glyphs being displayed.)
   Bottom                5   Attach to the basline of the last line. (Independent of glyphs being displayed.)
   BottomOfBoundingBox   6   Attach to the bottom of the boudning box of the visible glyphs.</param>
<returns>(unit) void, nothing</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsDimension.RhinoScriptSyntax.DimStyleTextAlignment.Static(System.String)">
<summary>Returns the text alignment mode of a dimension style</summary>
<param name="dimStyle">(string) The name of an existing dimension style</param>
<returns>(int) The current text alignment
   Top                   0   Attach to top of an 'I' on the first line. (Independent of glyphs being displayed.)
   MiddleOfTop           1   Attach to middle of an 'I' on the first line. (Independent of glyphs being displayed.)
   BottomOfTop           2   Attach to baseline of first line. (Independent of glyphs being displayed.)
   Middle                3   Attach to middle of text vertical advance. (Independent of glyphs being displayed.)
   MiddleOfBottom        4   Attach to middle of an 'I' on the last line. (Independent of glyphs being displayed.)
   Bottom                5   Attach to the basline of the last line. (Independent of glyphs being displayed.)
   BottomOfBoundingBox   6   Attach to the bottom of the boudning box of the visible glyphs.</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsDimension.RhinoScriptSyntax.DimStyleSuffix.Static(System.String,System.String)">
<summary>Changes the suffix of a dimension style - the text to
 append to the dimension text</summary>
<param name="dimStyle">(string) The name of an existing dimStyle</param>
<param name="suffix">(string) The new suffix</param>
<returns>(unit) void, nothing</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsDimension.RhinoScriptSyntax.DimStyleSuffix.Static(System.String)">
<summary>Returns the suffix of a dimension style - the text to
 append to the dimension text</summary>
<param name="dimStyle">(string) The name of an existing dimStyle</param>
<returns>(string) The current suffix</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsDimension.RhinoScriptSyntax.DimStylePrefix.Static(System.String,System.String)">
<summary>Changes the prefix of a dimension style - the text to
 prefix to the dimension text</summary>
<param name="dimStyle">(string) The name of an existing dimStyle</param>
<param name="prefix">(string) The new prefix</param>
<returns>(unit) void, nothing</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsDimension.RhinoScriptSyntax.DimStylePrefix.Static(System.String)">
<summary>Returns the prefix of a dimension style - the text to
 prefix to the dimension text</summary>
<param name="dimStyle">(string) The name of an existing dimStyle</param>
<returns>(string) The current prefix</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsDimension.RhinoScriptSyntax.DimStyleOffset.Static(System.String,System.Double)">
<summary>Changes the extension line offset of a dimension style</summary>
<param name="dimStyle">(string) The name of an existing dimension style</param>
<param name="offset">(float) The new extension line offset</param>
<returns>(unit) void, nothing</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsDimension.RhinoScriptSyntax.DimStyleOffset.Static(System.String)">
<summary>Returns the extension line offset of a dimension style</summary>
<param name="dimStyle">(string) The name of an existing dimension style</param>
<returns>(float) The current extension line offset</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsDimension.RhinoScriptSyntax.DimStyleNumberFormat.Static(System.String,System.Int32)">
<summary>Changes the number display format of a dimension style</summary>
<param name="dimStyle">(string) The name of an existing dimension style</param>
<param name="format">(int) The new number format
   ModelUnits       0  Decimal current model units
   Millmeters       3  Decimal Millimeters
   Centimeters      4  Decimal Centimeters
   Meters           5  Decimal Meters
   Kilometers       6  Decimal Kilometers
   InchesDecimal    7  Decimal Inches
   InchesFractional 1  Fractional Inches ( 1.75 inches displays as 1-3/4 )
   FeetDecimal      8  Decimal Feet
   FeetAndInches    2  Feet and Inches ( 14.75 inches displays as 1'-2-3/4" )
   Miles            9  Decimal Miles</param>
<returns>(unit) void, nothing</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsDimension.RhinoScriptSyntax.DimStyleNumberFormat.Static(System.String)">
<summary>Returns the number display format of a dimension style</summary>
<param name="dimStyle">(string) The name of an existing dimension style</param>
<returns>(int) The current display format
   ModelUnits       0  Decimal current model units
   Millmeters       3  Decimal Millimeters
   Centimeters      4  Decimal Centimeters
   Meters           5  Decimal Meters
   Kilometers       6  Decimal Kilometers
   InchesDecimal    7  Decimal Inches
   InchesFractional 1  Fractional Inches ( 1.75 inches displays as 1-3/4 )
   FeetDecimal      8  Decimal Feet
   FeetAndInches    2  Feet and Inches ( 14.75 inches displays as 1'-2-3/4" )
   Miles            9  Decimal Miles</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsDimension.RhinoScriptSyntax.DimStyleNames.Static">
<summary>Returns the names of all dimension styles in the document</summary>
<returns>(string ResizeArray) the names of all dimension styles in the document</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsDimension.RhinoScriptSyntax.DimStyleLinearPrecision.Static(System.String,System.Int32)">
<summary>Changes the linear display precision of a dimension style</summary>
<param name="dimStyle">(string) The name of an existing dimension style</param>
<param name="precision">(int) The new linear precision value</param>
<returns>(unit) void, nothing</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsDimension.RhinoScriptSyntax.DimStyleLinearPrecision.Static(System.String)">
<summary>Returns the linear display precision of a dimension style</summary>
<param name="dimStyle">(string) The name of an existing dimension style</param>
<returns>(int) The current linear precision value</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsDimension.RhinoScriptSyntax.DimStyleLengthFactor.Static(System.String,System.Double)">
<summary>Changes the length factor of a dimension style. Length factor
 is the conversion between Rhino units and dimension units</summary>
<param name="dimStyle">(string) The name of an existing dimension style</param>
<param name="factor">(float) The new length factor</param>
<returns>(unit) void, nothing</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsDimension.RhinoScriptSyntax.DimStyleLengthFactor.Static(System.String)">
<summary>Returns the length factor of a dimension style. Length factor
 is the conversion between Rhino units and dimension units</summary>
<param name="dimStyle">(string) The name of an existing dimension style</param>
<returns>(float) if factor is not defined, the current length factor</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsDimension.RhinoScriptSyntax.DimStyleLeaderArrowSize.Static(System.String,System.Double)">
<summary>Changes the leader arrow size of a dimension style</summary>
<param name="dimStyle">(string) The name of an existing dimension style</param>
<param name="size">(float) The new leader arrow size</param>
<returns>(unit) void, nothing</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsDimension.RhinoScriptSyntax.DimStyleLeaderArrowSize.Static(System.String)">
<summary>Returns the leader arrow size of a dimension style</summary>
<param name="dimStyle">(string) The name of an existing dimension style</param>
<returns>(float) The current leader arrow size</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsDimension.RhinoScriptSyntax.DimStyleAvailableFonts.Static">
<summary>Gets all Available Font Face Names</summary>
<returns>(string array) array of all available font names</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsDimension.RhinoScriptSyntax.DimStyleFont.Static(System.String,System.String)">
<summary>Changes the font used by a dimension style</summary>
<param name="dimStyle">(string) The name of an existing dimension style</param>
<param name="font">(string) The new font face name</param>
<returns>(unit) void, nothing</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsDimension.RhinoScriptSyntax.DimStyleFont.Static(System.String)">
<summary>Returns the font used by a dimension style</summary>
<param name="dimStyle">(string) The name of an existing dimension style</param>
<returns>(string) The current font</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsDimension.RhinoScriptSyntax.DimStyleExtension.Static(System.String,System.Double)">
<summary>Changes the extension line extension of a dimension style</summary>
<param name="dimStyle">(string) The name of an existing dimension style</param>
<param name="extension">(float) The new extension line extension</param>
<returns>(unit) void, nothing</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsDimension.RhinoScriptSyntax.DimStyleExtension.Static(System.String)">
<summary>Returns the extension line extension of a dimension style</summary>
<param name="dimStyle">(string) The name of an existing dimension style</param>
<returns>(float) The current extension line extension</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsDimension.RhinoScriptSyntax.DimStyleCount.Static">
<summary>Returns the number of dimension styles in the document</summary>
<returns>(int) the number of dimension styles in the document</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsDimension.RhinoScriptSyntax.DimStyleArrowSize.Static(System.String,System.Double)">
<summary>Changes the arrow size of a dimension style</summary>
<param name="dimStyle">(string) The name of an existing dimension style</param>
<param name="size">(float) The new arrow size</param>
<returns>(unit) void, nothing</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsDimension.RhinoScriptSyntax.DimStyleArrowSize.Static(System.String)">
<summary>Returns the arrow size of a dimension style</summary>
<param name="dimStyle">(string) The name of an existing dimension style</param>
<returns>(float) The current arrow size</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsDimension.RhinoScriptSyntax.DimStyleAnglePrecision.Static(System.String,System.Int32)">
<summary>Changes the angle display precision of a dimension style</summary>
<param name="dimStyle">(string) The name of an existing dimension style</param>
<param name="precision">(int) The new angle precision value.</param>
<returns>(unit) void, nothing</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsDimension.RhinoScriptSyntax.DimStyleAnglePrecision.Static(System.String)">
<summary>Returns the angle display precision of a dimension style</summary>
<param name="dimStyle">(string) The name of an existing dimension style</param>
<returns>(int) The current angle precision</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsDimension.RhinoScriptSyntax.DimensionValue.Static(System.Guid)">
<summary>Returns the value of a dimension object</summary>
<param name="objectId">(Guid) Identifier of the object</param>
<returns>(float) numeric value of the dimension</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsDimension.RhinoScriptSyntax.DimensionUserText.Static(System.Collections.Generic.IEnumerable{System.Guid},System.String)">
<summary>Modifies the user text string of multiple dimension objects. The user
 text is the string that gets printed when the dimension is defined</summary>
<param name="objectsIds">(Guid seq) Identifiers of the objects</param>
<param name="usertext">(string) The new user text string value</param>
<returns>(unit) void, nothing</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsDimension.RhinoScriptSyntax.DimensionUserText.Static(System.Guid,System.String)">
<summary>Modifies the user text string of a dimension object. The user
 text is the string that gets printed when the dimension is defined</summary>
<param name="objectId">(Guid) Identifier of the object</param>
<param name="usertext">(string) The new user text string value</param>
<returns>(unit) void, nothing</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsDimension.RhinoScriptSyntax.DimensionUserText.Static(System.Guid)">
<summary>Returns the user text string of a dimension object. The user
 text is the string that gets printed when the dimension is defined</summary>
<param name="objectId">(Guid) Identifier of the object</param>
<returns>(string) The current usertext string</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsDimension.RhinoScriptSyntax.DimensionText.Static(System.Guid)">
<summary>Returns the text displayed by a dimension object</summary>
<param name="objectId">(Guid) Identifier of the object</param>
<returns>(string) the text displayed by a dimension object</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsDimension.RhinoScriptSyntax.DimensionStyle.Static(System.Collections.Generic.IEnumerable{System.Guid},System.String)">
<summary>Modifies the dimension style of multiple dimension objects</summary>
<param name="objectsIds">(Guid seq) Identifier of the objects</param>
<param name="dimStyleName">(string) The name of multiple existing dimension style</param>
<returns>(unit) void, nothing</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsDimension.RhinoScriptSyntax.DimensionStyle.Static(System.Guid,System.String)">
<summary>Modifies the dimension style of a dimension object</summary>
<param name="objectId">(Guid) Identifier of the object</param>
<param name="dimStyleName">(string) The name of an existing dimension style</param>
<returns>(unit) void, nothing</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsDimension.RhinoScriptSyntax.DimensionStyle.Static(System.Guid)">
<summary>Returns the dimension style of a dimension object</summary>
<param name="objectId">(Guid) Identifier of the object</param>
<returns>(string) The object's current dimension style name</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsDimension.RhinoScriptSyntax.DeleteDimStyle.Static(System.String)">
<summary>Removes an existing dimension style from the document. The dimension style
  to be removed cannot be referenced by any dimension objects</summary>
<param name="dimStyleName">(string) The name of an unreferenced dimension style</param>
<returns>(unit) void, nothing (fails on error)</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsDimension.RhinoScriptSyntax.CurrentDimStyle.Static(System.String)">
<summary>Changes the current default dimension style</summary>
<param name="dimStyleName">(string) Name of an existing dimension style to make current</param>
<returns>(unit) void, nothing</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsDimension.RhinoScriptSyntax.CurrentDimStyle.Static">
<summary>Returns the current default dimension style</summary>
<returns>(string) Name of the current dimension style</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsDimension.RhinoScriptSyntax.AddLinearDimension.Static(Rhino.Geometry.Point3d,Rhino.Geometry.Point3d,Rhino.Geometry.Point3d,Rhino.Geometry.Plane)">
<summary>Adds a linear dimension to the document</summary>
<param name="startPoint">(Point3d) The origin, or first point of the dimension</param>
<param name="endPoint">(Point3d) The offset, or second point of the dimension</param>
<param name="pointOnDimensionLine">(Point3d) A point that lies on the dimension line</param>
<param name="plane">(Plane) Optional, The plane on which the dimension will lie. The default is World XY Plane</param>
<returns>(Guid) identifier of the new object on success</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsDimension.RhinoScriptSyntax.AddLeader.Static(System.Collections.Generic.IEnumerable{Rhino.Geometry.Point3d},System.String,Rhino.Geometry.Plane)">
<summary>Adds a leader to the document. Leader objects are planar.
  The 3D points passed will define the plane if no Plane given</summary>
<param name="points">(Point3d seq) List of (at least 2) 3D points</param>
<param name="text">(string) Leader's text</param>
<param name="plane">(Geometry.Plane) Optional, Default Value: <c>defined by points arg</c>
  If points will be projected to this plane</param>
<returns>(Guid) identifier of the new leader on success</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsDimension.RhinoScriptSyntax.AddDimStyle.Static(System.String)">
<summary>Adds a new dimension style to the document. The new dimension style will
  be initialized with the current default dimension style properties</summary>
<param name="dimStyleName">(string) Name of the new dimension style</param>
<returns>(unit) void, nothing</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsDimension.RhinoScriptSyntax.AddAlignedDimension.Static(Rhino.Geometry.Point3d,Rhino.Geometry.Point3d,Rhino.Geometry.Point3d,System.String)">
<summary>Adds an aligned dimension object to the document. An aligned dimension
  is a linear dimension lined up with two points</summary>
<param name="startPoint">(Point3d) First point of dimension</param>
<param name="endPoint">(Point3d) Second point of dimension</param>
<param name="pointOnDimensionLine">(Point3d) Location point of dimension line</param>
<param name="style">(string) Optional, Default Value: <c>""</c>
Name of dimension style</param>
<returns>(Guid) identifier of new dimension on success</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsDocument.RhinoScriptSyntax.UnitSystemName.Static(System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
<summary>Returns the name of the current unit system</summary>
<param name="capitalize">(bool) Optional, Default Value: <c>false</c>
Capitalize the first character of the units system name (e.g. return "Millimeter" instead of "millimeter"). The default is not to capitalize the first character (false)</param>
<param name="singular">(bool) Optional, Default Value: <c>true</c>
Return the singular form of the units system name (e.g. "millimeter" instead of "millimeters"). The default is to return the singular form of the name (true)</param>
<param name="abbreviate">(bool) Optional, Default Value: <c>false</c>
Abbreviate the name of the units system (e.g. return "mm" instead of "millimeter"). The default is not to abbreviate the name (false)</param>
<param name="modelUnits">(bool) Optional, Default Value: <c>true</c>
Return the document's model units (True) or the document's page units (False). The default is True</param>
<returns>(string) The name of the current units system </returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsDocument.RhinoScriptSyntax.UnitSystem.Static(System.Int32,System.Boolean)">
<summary>Set the document's unit system. See Rhino's DocumentProperties
 command (Units and Page Units Window) for details</summary>
<param name="unitSystem">(int) The unit system to set the document to. The unit systems are:
  0 - No unit system
  1 - Microns (1.0e-6 meters)
  2 - Millimeters (1.0e-3 meters)
  3 - Centimeters (1.0e-2 meters)
  4 - Meters
  5 - Kilometers (1.0e+3 meters)
  6 - Microinches (2.54e-8 meters, 1.0e-6 inches)
  7 - Mils (2.54e-5 meters, 0.001 inches)
  8 - Inches (0.0254 meters)
  9 - Feet (0.3408 meters, 12 inches)
    10 - Miles (1609.344 meters, 5280 feet)
    11 - *Reserved for custom Unit System*
    12 - Angstroms (1.0e-10 meters)
    13 - Nanometers (1.0e-9 meters)
    14 - Decimeters (1.0e-1 meters)
    15 - Dekameters (1.0e+1 meters)
    16 - Hectometers (1.0e+2 meters)
    17 - Megameters (1.0e+6 meters)
    18 - Gigameters (1.0e+9 meters)
    19 - Yards (0.9144  meters, 36 inches)
    20 - Printer point (1/72 inches, computer points)
    21 - Printer pica (1/6 inches, (computer picas)
    22 - Nautical mile (1852 meters)
    23 - Astronomical (1.4959787e+11)
    24 - Lightyears (9.46073e+15 meters)
    25 - Parsecs (3.08567758e+16)</param>
<param name="scale">(bool) Scale existing geometry based on the new unit system.
  If not specified, any existing geometry is not scaled (False)</param>
<returns>(unit) void, nothing</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsDocument.RhinoScriptSyntax.UnitSystem.Static">
<summary>Return the document's unit system. See Rhino's DocumentProperties
 command (Units and Page Units Window) for details</summary>
<returns>(int) The current unit system
  0 - No unit system
  1 - Microns (1.0e-6 meters)
  2 - Millimeters (1.0e-3 meters)
  3 - Centimeters (1.0e-2 meters)
  4 - Meters
  5 - Kilometers (1.0e+3 meters)
  6 - Microinches (2.54e-8 meters, 1.0e-6 inches)
  7 - Mils (2.54e-5 meters, 0.001 inches)
  8 - Inches (0.0254 meters)
  9 - Feet (0.3408 meters, 12 inches)
    10 - Miles (1609.344 meters, 5280 feet)
    11 - *Reserved for custom Unit System*
    12 - Angstroms (1.0e-10 meters)
    13 - Nanometers (1.0e-9 meters)
    14 - Decimeters (1.0e-1 meters)
    15 - Dekameters (1.0e+1 meters)
    16 - Hectometers (1.0e+2 meters)
    17 - Megameters (1.0e+6 meters)
    18 - Gigameters (1.0e+9 meters)
    19 - Yards (0.9144  meters, 36 inches)
    20 - Printer point (1/72 inches, computer points)
    21 - Printer pica (1/6 inches, (computer picas)
    22 - Nautical mile (1852 meters)
    23 - Astronomical (1.4959787e+11)
    24 - Lightyears (9.46073e+15 meters)
    25 - Parsecs (3.08567758e+16)</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsDocument.RhinoScriptSyntax.UnitScale.Static(System.Int32,System.Int32)">
<summary>Return the scale factor for changing between unit systems</summary>
<param name="toSystem">(int) The unit system to convert to. The unit systems are are:
  0 - No unit system
  1 - Microns (1.0e-6 meters)
  2 - Millimeters (1.0e-3 meters)
  3 - Centimeters (1.0e-2 meters)
  4 - Meters
  5 - Kilometers (1.0e+3 meters)
  6 - Microinches (2.54e-8 meters, 1.0e-6 inches)
  7 - Mils (2.54e-5 meters, 0.001 inches)
  8 - Inches (0.0254 meters)
  9 - Feet (0.3408 meters, 12 inches)
    10 - Miles (1609.344 meters, 5280 feet)
    11 - *Reserved for custom Unit System*
    12 - Angstroms (1.0e-10 meters)
    13 - Nanometers (1.0e-9 meters)
    14 - Decimeters (1.0e-1 meters)
    15 - Dekameters (1.0e+1 meters)
    16 - Hectometers (1.0e+2 meters)
    17 - Megameters (1.0e+6 meters)
    18 - Gigameters (1.0e+9 meters)
    19 - Yards (0.9144  meters, 36 inches)
    20 - Printer point (1/72 inches, computer points)
    21 - Printer pica (1/6 inches, (computer picas)
    22 - Nautical mile (1852 meters)
    23 - Astronomical (1.4959787e+11)
    24 - Lightyears (9.46073e+15 meters)
    25 - Parsecs (3.08567758e+16)</param>
<param name="fromSystem">(int) The unit system to convert from (see above)</param>
<returns>(float) scale factor for changing between unit systems</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsDocument.RhinoScriptSyntax.UnitRelativeTolerance.Static(System.Double)">
<summary>Set the document's relative tolerance. Relative tolerance
 is measured in percent. See Rhino's DocumentProperties command
 (Units and Page Units Window) for details</summary>
<param name="relativeTolerance">(float) The relative tolerance in percent</param>
<returns>(unit) void, nothing</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsDocument.RhinoScriptSyntax.UnitRelativeTolerance.Static">
<summary>Return the document's relative tolerance. Relative tolerance
 is measured in percent. See Rhino's DocumentProperties command
 (Units and Page Units Window) for details</summary>
<returns>(float) The current tolerance in percent</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsDocument.RhinoScriptSyntax.UnitDistanceDisplayPrecision.Static(System.Int32)">
<summary>Set the document's distance display precision</summary>
<param name="precision">(int) The distance display precision.  If the current distance display mode is Decimal, then precision is the number of decimal places.
  If the current distance display mode is Fractional (including Feet and Inches), then the denominator = (1/2)^precision.
  Use UnitDistanceDisplayMode to get the current distance display mode</param>
<returns>(unit) void, nothing</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsDocument.RhinoScriptSyntax.UnitDistanceDisplayPrecision.Static">
<summary>Return the document's distance display precision</summary>
<returns>(int) The current distance display precision </returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsDocument.RhinoScriptSyntax.UnitAngleTolerance.Static(System.Double)">
<summary>Set the document's angle tolerance. Angle tolerance is
 measured in degrees. See Rhino's DocumentProperties command
 (Units and Page Units Window) for details</summary>
<param name="angleToleranceDegrees">(float) The angle tolerance to set</param>
<returns>(unit) void, nothing</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsDocument.RhinoScriptSyntax.UnitAngleTolerance.Static">
<summary>Return the document's angle tolerance. Angle tolerance is
 measured in degrees. See Rhino's DocumentProperties command
 (Units and Page Units Window) for details</summary>
<returns>(float) The current angle tolerance</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsDocument.RhinoScriptSyntax.UnitAbsoluteTolerance.Static(System.Double)">
<summary>Sets the document's absolute tolerance. Absolute tolerance
 is measured in drawing units. See Rhino's document properties command
 (Units and Page Units Window) for details</summary>
<param name="tolerance">(float) The absolute tolerance to set</param>
<returns>(unit) void, nothing</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsDocument.RhinoScriptSyntax.UnitAbsoluteTolerance.Static">
<summary>Returns the document's absolute tolerance. Absolute tolerance
 is measured in drawing units. See Rhino's document properties command
 (Units and Page Units Window) for details</summary>
<returns>(float) The current absolute tolerance</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsDocument.RhinoScriptSyntax.RenderSettings.Static(System.Int32)">
<summary>Sets render settings</summary>
<param name="settings">(int) Bit-coded flags of render settings to modify.
  0= none,
  1= create shadows,
  2= use lights on layers that are off,
  4= render curves and isocurves,
  8= render dimensions and text</param>
<returns>(unit) void, nothing</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsDocument.RhinoScriptSyntax.RenderSettings.Static">
<summary>Returns render settings</summary>
<returns>(int) if settings are not specified, the current render settings in bit-coded flags
  0= none,
  1= create shadows,
  2= use lights on layers that are off,
  4= render curves and isocurves,
  8= render dimensions and text</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsDocument.RhinoScriptSyntax.RenderMeshSettings.Static(System.Int32)">
<summary>Sets the render mesh settings of the active document.
 For more information on render meshes, see the Document Properties: Mesh topic in the Rhino help file</summary>
<param name="settings">(int) The render mesh settings, which is a bit-coded number that allows or disallows certain features.
  The bits can be added together in any combination to form a value between 0 and 7.  The bit values are as follows:
    0: No settings enabled.
    1: Refine mesh enabled.
    2: Jagged seams enabled.
    4: Simple planes enabled.
    8: Texture is packed, scaled and normalized; otherwise unpacked, unscaled and normalized</param>
<returns>(unit) void, nothing</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsDocument.RhinoScriptSyntax.RenderMeshSettings.Static">
<summary>Returns the render mesh settings of the active document.
 For more information on render meshes, see the Document Properties: Mesh topic in the Rhino help file</summary>
<returns>(int) The current render mesh settings .
    0: No settings enabled.
    1: Refine mesh enabled.
    2: Jagged seams enabled.
    4: Simple planes enabled.
    8: Texture is packed, scaled and normalized; otherwise unpacked, unscaled and normalized</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsDocument.RhinoScriptSyntax.RenderMeshQuality.Static(System.Int32)">
<summary>Sets the render mesh quality of the active document.
 For more information on render meshes, see the Document Properties: Mesh topic in the Rhino help file</summary>
<param name="quality">(int) The render mesh quality, either:
  0: Jagged and faster.  Objects may look jagged, but they should shade and render relatively quickly.
  1: Smooth and slower.  Objects should look smooth, but they may take a very long time to shade and render.
  2: Custom</param>
<returns>(unit) void, nothing</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsDocument.RhinoScriptSyntax.RenderMeshQuality.Static">
<summary>Returns the render mesh quality of the active document.
 For more information on render meshes, see the Document Properties: Mesh topic in the Rhino help file</summary>
<returns>(int) The current render mesh quality .
  0: Jagged and faster.  Objects may look jagged, but they should shade and render relatively quickly.
  1: Smooth and slower.  Objects should look smooth, but they may take a very long time to shade and render.
  2: Custom</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsDocument.RhinoScriptSyntax.RenderMeshMinInitialGridQuads.Static(System.Int32)">
<summary>Sets the render mesh minimum initial grid quads parameter of the active document.
 For more information on render meshes, see the Document Properties: Mesh topic in the Rhino help file</summary>
<param name="quads">(int) The render mesh minimum initial grid quads. The suggested range is from 0 to 10000</param>
<returns>(unit) void, nothing</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsDocument.RhinoScriptSyntax.RenderMeshMinInitialGridQuads.Static">
<summary>Returns the render mesh minimum initial grid quads parameter of the active document.
 For more information on render meshes, see the Document Properties: Mesh topic in the Rhino help file</summary>
<returns>(int) The current render mesh minimum initial grid quads </returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsDocument.RhinoScriptSyntax.RenderMeshMinEdgeLength.Static(System.Double)">
<summary>Sets the render mesh minimum edge length parameter of the active document.
 For more information on render meshes, see the Document Properties: Mesh topic in the Rhino help file</summary>
<param name="distance">(float) The render mesh minimum edge length</param>
<returns>(unit) void, nothing</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsDocument.RhinoScriptSyntax.RenderMeshMinEdgeLength.Static">
<summary>Returns the render mesh minimum edge length parameter of the active document.
 For more information on render meshes, see the Document Properties: Mesh topic in the Rhino help file</summary>
<returns>(float) The current render mesh minimum edge length </returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsDocument.RhinoScriptSyntax.RenderMeshMaxEdgeLength.Static(System.Double)">
<summary>Sets the render mesh maximum edge length parameter of the active document.
 For more information on render meshes, see the Document Properties: Mesh topic in the Rhino help file</summary>
<param name="distance">(float) The render mesh maximum edge length</param>
<returns>(unit) void, nothing</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsDocument.RhinoScriptSyntax.RenderMeshMaxEdgeLength.Static">
<summary>Returns the render mesh maximum edge length parameter of the active document.
 For more information on render meshes, see the Document Properties: Mesh topic in the Rhino help file</summary>
<returns>(float) The current render mesh maximum edge length </returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsDocument.RhinoScriptSyntax.RenderMeshMaxDistEdgeToSrf.Static(System.Double)">
<summary>Sets the render mesh maximum distance, edge to surface parameter of the active document.
 For more information on render meshes, see the Document Properties: Mesh topic in the Rhino help file</summary>
<param name="distance">(float) The render mesh maximum distance, edge to surface</param>
<returns>(unit) void, nothing</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsDocument.RhinoScriptSyntax.RenderMeshMaxDistEdgeToSrf.Static">
<summary>Returns the render mesh maximum distance, edge to surface parameter of the active document.
 For more information on render meshes, see the Document Properties: Mesh topic in the Rhino help file</summary>
<returns>(float) The current render mesh maximum distance, edge to surface </returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsDocument.RhinoScriptSyntax.RenderMeshMaxAspectRatio.Static(System.Double)">
<summary>Sets the render mesh maximum aspect ratio property of the active document.
 For more information on render meshes, see the Document Properties: Mesh topic in the Rhino help file</summary>
<param name="ratio">(float) The render mesh maximum aspect ratio.  The suggested range, when not zero, is from 1 to 100</param>
<returns>(unit) void, nothing</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsDocument.RhinoScriptSyntax.RenderMeshMaxAspectRatio.Static">
<summary>Returns the render mesh maximum aspect ratio property of the active document.
 For more information on render meshes, see the Document Properties: Mesh topic in the Rhino help file</summary>
<returns>(float) The current render mesh maximum aspect ratio </returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsDocument.RhinoScriptSyntax.RenderMeshMaxAngle.Static(System.Double)">
<summary>Sets the render mesh maximum angle property of the active document.
 For more information on render meshes, see the Document Properties: Mesh topic in the Rhino help file</summary>
<param name="angleDegrees">(float) The new maximum angle, which is a positive number in degrees</param>
<returns>(unit) void, nothing</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsDocument.RhinoScriptSyntax.RenderMeshMaxAngle.Static">
<summary>Returns the render mesh maximum angle property of the active document.
 For more information on render meshes, see the Document Properties: Mesh topic in the Rhino help file</summary>
<returns>(float) The current maximum angle </returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsDocument.RhinoScriptSyntax.RenderMeshDensity.Static(System.Double)">
<summary>Sets the render mesh density property of the active document.
 For more information on render meshes, see the Document Properties: Mesh topic in the Rhino help file</summary>
<param name="density">(float) The new render mesh density, which is a number between 0.0 and 1.0</param>
<returns>(unit) void, nothing</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsDocument.RhinoScriptSyntax.RenderMeshDensity.Static">
<summary>Returns the render mesh density property of the active document.
 For more information on render meshes, see the Document Properties: Mesh topic in the Rhino help file</summary>
<returns>(float) The current render mesh density </returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsDocument.RhinoScriptSyntax.RenderResolution.Static(System.Int32,System.Int32)">
<summary>Sets the render resolution</summary>
<param name="width">(int) width and height of render</param>
<param name="height">(int) height of render</param>
<returns>(unit) void, nothing</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsDocument.RhinoScriptSyntax.RenderResolution.Static">
<summary>Returns the render resolution</summary>
<returns>(int * int) The current resolution width, height</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsDocument.RhinoScriptSyntax.RenderColor.Static(System.Int32,System.Drawing.Color)">
<summary>Sets the render ambient light or background color</summary>
<param name="item">(int) 0= ambient light color, 1= background color</param>
<param name="color">(Drawing.Color) The new color value</param>
<returns>(unit) void, nothing</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsDocument.RhinoScriptSyntax.RenderColor.Static(System.Int32)">
<summary>Returns the render ambient light or background color</summary>
<param name="item">(int) 0= ambient light color, 1= background color</param>
<returns>(Drawing.Color) The current item color</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsDocument.RhinoScriptSyntax.RenderAntialias.Static(System.Int32)">
<summary>Sets render antialiasing style</summary>
<param name="style">(int) Level of antialiasing (0= none, 1= normal, 2= best)</param>
<returns>(unit) void, nothing</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsDocument.RhinoScriptSyntax.RenderAntialias.Static">
<summary>Returns render antialiasing style</summary>
<returns>(int) The current antialiasing style (0= none, 1= normal, 2= best)</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsDocument.RhinoScriptSyntax.Redraw.Static">
<summary>Redraws all views</summary>
<returns>(unit)</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsDocument.RhinoScriptSyntax.ReadFileVersion.Static">
<summary>Returns the file version of the current document. Use this function to
  determine which version of Rhino last saved the document. Note, this
  function will not return values from referenced or merged files</summary>
<returns>(int) the file version of the current document</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsDocument.RhinoScriptSyntax.Notes.Static(System.String)">
<summary>Sets the document's notes. Notes are generally created
 using Rhino's Notes command</summary>
<param name="newnotes">(string) New notes to set</param>
<returns>(unit) void, nothing</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsDocument.RhinoScriptSyntax.Notes.Static">
<summary>Returns the document's notes. Notes are generally created
 using Rhino's Notes command</summary>
<returns>(string) if `newnotes` is omitted, the current notes</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsDocument.RhinoScriptSyntax.IsDocumentModified.Static">
<summary>Verifies that the current document has been modified in some way</summary>
<returns>(bool) True or False</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsDocument.RhinoScriptSyntax.ExtractPreviewImage.Static(System.String,System.String)">
<summary>Extracts the bitmap preview image from the specified model (.3dm)</summary>
<param name="fileName">(string) Name of the bitmap file to create. The extension of
  the fileName controls the format of the bitmap file created.
  (.bmp, .tga, .jpg, .jpeg, .pcx, .png, .tif, .tiff)</param>
<param name="modelName">(string) Optional, The model (.3dm) from which to extract the
  preview image. If omitted, the currently loaded model is used</param>
<returns>(unit) void, nothing</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsDocument.RhinoScriptSyntax.EnableRedraw.Static(System.Boolean)">
<summary>Enables or disables screen redrawing</summary>
<param name="enable">(bool) Optional, Default Value: <c>true</c>
True to enable, False to disable</param>
<returns>(unit) void, nothing</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsDocument.RhinoScriptSyntax.DocumentPath.Static">
<summary>Returns path of the currently loaded Rhino document (3DM file)</summary>
<returns>(string) the path of the currently loaded Rhino document (3DM file)</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsDocument.RhinoScriptSyntax.DocumentName.Static">
<summary>Returns the name of the currently loaded Rhino document (3DM file)</summary>
<returns>(string) the name of the currently loaded Rhino document (3DM file)</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsDocument.RhinoScriptSyntax.DocumentModified.Static(System.Boolean)">
<summary>Sets the document's modified flag. This flag indicates whether
 or not any changes to the current document have been made. NOTE: setting the
 document modified flag to False will prevent the "Do you want to save this
 file..." from displaying when you close Rhino</summary>
<param name="modified">(bool) The modified state, either True or False</param>
<returns>(unit) void, nothing</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsDocument.RhinoScriptSyntax.DocumentModified.Static">
<summary>Returns the document's modified flag. This flag indicates whether
 or not any changes to the current document have been made. NOTE: setting the
 document modified flag to False will prevent the "Do you want to save this
 file..." from displaying when you close Rhino</summary>
<returns>(bool) if no modified state is specified, the current modified state</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsDocument.RhinoScriptSyntax.CreatePreviewImage.Static(System.String,System.String,System.Int32,System.Int32,System.Int32,System.Boolean)">
<summary>Create a bitmap preview image of the current model</summary>
<param name="fileName">(string) Name of the bitmap file to create</param>
<param name="view">(string) Optional, Title of the view. If omitted, the active view is used</param>
<param name="width">(int) Optional, Default Value: <c>0</c>
 integer that specifies width of the bitmap in pixel. if only width given height will be scaled to kepp screen ratio</param>
<param name="height">(int) Optional, Default Value: <c>0</c>
 integer that specifies height of the bitmap in pixel. if only height given width will be scaled to kepp screen ratio</param>
<param name="flags">(int) Optional, Default Value: <c>0</c>
  Bitmap creation flags. Can be the combination of:
  1 = honor object highlighting
  2 = draw construction plane
  4 = use ghosted shading</param>
<param name="wireframe">(bool) Optional, Default Value: <c>false</c>
  If True then a wireframe preview image. If False,
  a rendered image will be created</param>
<returns>(bool) True or False indicating success or failure</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsGeometry.RhinoScriptSyntax.TextObjectText.Static(System.Collections.Generic.IEnumerable{System.Guid},System.String)">
<summary>Modifies the text string of multiple text objects</summary>
<param name="objectsIds">(Guid seq) The identifiers of multiple text objects</param>
<param name="text">(string) A new text string</param>
<returns>(unit) void, nothing</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsGeometry.RhinoScriptSyntax.TextObjectText.Static(System.Guid,System.String)">
<summary>Modifies the text string of a text object</summary>
<param name="objectId">(Guid) The identifier of a text object</param>
<param name="text">(string) A new text string</param>
<returns>(unit) void, nothing</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsGeometry.RhinoScriptSyntax.TextObjectText.Static(System.Guid)">
<summary>Returns the text string of a text object</summary>
<param name="objectId">(Guid) The identifier of a text object</param>
<returns>(string) The current string value</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsGeometry.RhinoScriptSyntax.TextObjectStyle.Static(System.Collections.Generic.IEnumerable{System.Guid},System.Int32)">
<summary>Modifies the font style of multiple text objects</summary>
<param name="objectsIds">(Guid seq) The identifiers of multiple text objects</param>
<param name="style">(int) The font style. Can be any of the following flags
  0 = Normal
  1 = Bold
  2 = Italic
  3 = Bold and Italic</param>
<returns>(unit) void, nothing</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsGeometry.RhinoScriptSyntax.TextObjectStyle.Static(System.Guid,System.Int32)">
<summary>Modifies the font style of a text object</summary>
<param name="objectId">(Guid) The identifier of a text object</param>
<param name="style">(int) The font style. Can be any of the following flags
  0 = Normal
  1 = Bold
  2 = Italic
  3 = Bold and Italic</param>
<returns>(unit) void, nothing</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsGeometry.RhinoScriptSyntax.TextObjectStyle.Static(System.Guid)">
<summary>Returns the font style of a text object</summary>
<param name="objectId">(Guid) The identifier of a text object</param>
<returns>(int) The current font style
  0 = Normal
  1 = Bold
  2 = Italic
  3 = Bold and Italic</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsGeometry.RhinoScriptSyntax.TextObjectPoint.Static(System.Guid,Rhino.Geometry.Point3d)">
<summary>Modifies the location of a text object</summary>
<param name="objectId">(Guid) The identifier of a text object</param>
<param name="point">(Point3d) The new text object location</param>
<returns>(unit) void, nothing</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsGeometry.RhinoScriptSyntax.TextObjectPoint.Static(System.Guid)">
<summary>Returns the location of a text object</summary>
<param name="objectId">(Guid) The identifier of a text object</param>
<returns>(Point3d) The 3D point identifying the current location</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsGeometry.RhinoScriptSyntax.TextObjectPlane.Static(System.Guid,Rhino.Geometry.Plane)">
<summary>Modifies the plane used by a text object</summary>
<param name="objectId">(Guid) The identifier of a text object</param>
<param name="plane">(Plane) The new text object plane</param>
<returns>(unit) void, nothing</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsGeometry.RhinoScriptSyntax.TextObjectPlane.Static(System.Guid)">
<summary>Returns the plane used by a text object</summary>
<param name="objectId">(Guid) The identifier of a text object</param>
<returns>(Plane) The current plane</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsGeometry.RhinoScriptSyntax.TextObjectHeight.Static(System.Collections.Generic.IEnumerable{System.Guid},System.Double)">
<summary>Modifies the height of multiple text objects</summary>
<param name="objectsIds">(Guid seq) The identifiers of multiple text objects</param>
<param name="height">(float) The new text height</param>
<returns>(unit) void, nothing</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsGeometry.RhinoScriptSyntax.TextObjectHeight.Static(System.Guid,System.Double)">
<summary>Modifies the height of a text object</summary>
<param name="objectId">(Guid) The identifier of a text object</param>
<param name="height">(float) The new text height</param>
<returns>(unit) void, nothing</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsGeometry.RhinoScriptSyntax.TextObjectHeight.Static(System.Guid)">
<summary>Returns the height of a text object</summary>
<param name="objectId">(Guid) The identifier of a text object</param>
<returns>(float) The current text height</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsGeometry.RhinoScriptSyntax.TextObjectFont.Static(System.Collections.Generic.IEnumerable{System.Guid},System.String)">
<summary>Modifies the font used by multiple text objects</summary>
<param name="objectsIds">(Guid seq) The identifiers of multiple text objects</param>
<param name="font">(string) The new Font Name</param> 
<returns>(unit) void, nothing</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsGeometry.RhinoScriptSyntax.TextObjectFont.Static(System.Guid,System.String)">
<summary>Modifies the font used by a text object</summary>
<param name="objectId">(Guid) The identifier of a text object</param>
<param name="font">(string) The new Font Name</param> 
<returns>(unit) void, nothing</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsGeometry.RhinoScriptSyntax.TextObjectFont.Static(System.Guid)">
<summary>Returns the font used by a text object</summary>
<param name="objectId">(Guid) The identifier of a text object</param>
<returns>(string) The current font face name</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsGeometry.RhinoScriptSyntax.TextDotText.Static(System.Collections.Generic.IEnumerable{System.Guid},System.String)">
<summary>Modifies the text on multiple text dot objects</summary>
<param name="objectsIds">(Guid seq) The identifiers of multiple text dot objects</param>
<param name="text">(string) A new string for the dot</param>
<returns>(unit) void, nothing</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsGeometry.RhinoScriptSyntax.TextDotText.Static(System.Guid,System.String)">
<summary>Modifies the text on a text dot object</summary>
<param name="objectId">(Guid) The identifier of a text dot object</param>
<param name="text">(string) A new string for the dot</param>
<returns>(unit) void, nothing</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsGeometry.RhinoScriptSyntax.TextDotText.Static(System.Guid)">
<summary>Returns the text on a text dot object</summary>
<param name="objectId">(Guid) The identifier of a text dot object</param>
<returns>(string) The current text dot text</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsGeometry.RhinoScriptSyntax.TextDotPoint.Static(System.Guid,Rhino.Geometry.Point3d)">
<summary>Modifies the location, or insertion point, on a text dot object</summary>
<param name="objectId">(Guid) Identifier of a text dot object</param>
<param name="point">(Point3d) A new 3D point location</param>
<returns>(unit) void, nothing</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsGeometry.RhinoScriptSyntax.TextDotPoint.Static(System.Guid)">
<summary>Returns the location, or insertion point, on a text dot object</summary>
<param name="objectId">(Guid) Identifier of a text dot object</param>
<returns>(Point3d) The current 3-D text dot location</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsGeometry.RhinoScriptSyntax.TextDotHeight.Static(System.Collections.Generic.IEnumerable{System.Guid},System.Int32)">
<summary>Modifies the font height of multiple text dots</summary>
<param name="objectsIds">(Guid seq) Identifiers of multiple text dot objects</param>
<param name="height">(int) New font height</param>
<returns>(unit) void, nothing</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsGeometry.RhinoScriptSyntax.TextDotHeight.Static(System.Guid,System.Int32)">
<summary>Modifies the font height of a text dot</summary>
<param name="objectId">(Guid) Identifier of a text dot object</param>
<param name="height">(int) New font height</param>
<returns>(unit) void, nothing</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsGeometry.RhinoScriptSyntax.TextDotHeight.Static(System.Guid)">
<summary>Returns the font height of a text dot</summary>
<param name="objectId">(Guid) Identifier of a text dot object</param>
<returns>(int) The current text dot height</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsGeometry.RhinoScriptSyntax.TextDotFont.Static(System.Collections.Generic.IEnumerable{System.Guid},System.String)">
<summary>Modifies the font of multiple text dots</summary>
<param name="objectsIds">(Guid seq) Identifiers of multiple text dot objects</param>
<param name="fontface">(string) New font face name</param>
<returns>(unit) void, nothing</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsGeometry.RhinoScriptSyntax.TextDotFont.Static(System.Guid,System.String)">
<summary>Modifies the font of a text dot</summary>
<param name="objectId">(Guid) Identifier of a text dot object</param>
<param name="fontface">(string) New font face name</param>
<returns>(unit) void, nothing</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsGeometry.RhinoScriptSyntax.TextDotFont.Static(System.Guid)">
<summary>Returns the font of a text dot</summary>
<param name="objectId">(Guid) Identifier of a text dot object</param>
<returns>(string) The current text dot font</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsGeometry.RhinoScriptSyntax.PointCoordinates.Static(System.Guid,Rhino.Geometry.Point3d)">
<summary>Modifies the X, Y, and Z coordinates of a point object</summary>
<param name="objectId">(Guid) The identifier of a point object</param>
<param name="point">(Point3d) A new 3D point location</param>
<returns>(unit) void, nothing</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsGeometry.RhinoScriptSyntax.PointCoordinates.Static(System.Guid)">
<summary>Returns the X, Y, and Z coordinates of a point object</summary>
<param name="objectId">(Guid) The identifier of a point object</param>
<returns>(Point3d) The current 3-D point location</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsGeometry.RhinoScriptSyntax.PointCloudClosestPoints.Static(System.Collections.Generic.IEnumerable{Rhino.Geometry.Point3d},System.Collections.Generic.IEnumerable{Rhino.Geometry.Point3d},System.Double)">
<summary>Returns a list of lists of point indices in a point cloud that are
  closest to needlePoints. Each inner list references all points within or on the surface of a sphere of distance radius</summary>
<param name="ptCloud">(Point3d seq) The point cloud to be searched, or the "hay stack". This can also be a list of points</param>
<param name="needlePoints">(Point3d seq) A list of points to search in the pointcloud. This can also be specified as a point cloud</param>
<param name="distance">(float) The included limit for listing points</param>
<returns>(int array seq) a seq of arrays with the indices of the found points</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsGeometry.RhinoScriptSyntax.PointCloudKNeighbors.Static(System.Collections.Generic.IEnumerable{Rhino.Geometry.Point3d},System.Collections.Generic.IEnumerable{Rhino.Geometry.Point3d},System.Int32)">
<summary>Returns amount indices of points in a point cloud that are near needlePoints</summary>
<param name="ptCloud">(Point3d seq) The point cloud to be searched, or the "hay stack".
 This can also be a list of points</param>
<param name="needlePoints">(Point3d seq) A list of points to search in the pointcloud.
 This can also be specified as a point cloud</param>
<param name="amount">(int) Optional, Default Value: <c>1</c>
The amount of required closest points. Defaults to 1</param>
<returns>(int array seq) nested lists with amount items within a list, with the indices of the found points</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsGeometry.RhinoScriptSyntax.PointCloudPoints.Static(System.Guid)">
<summary>Returns the points of a point cloud object</summary>
<param name="objectId">(Guid) The point cloud object's identifier</param>
<returns>(Point3d array) list of points</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsGeometry.RhinoScriptSyntax.PointCloudPointColors.Static(System.Guid,System.Collections.Generic.IEnumerable{System.Drawing.Color})">
<summary>Modifies the point colors of a point cloud object</summary>
<param name="objectId">(Guid) The point cloud object's identifier</param>
<param name="colors">(Drawing.Color seq) List of color values if you want to adjust colors, empty Seq to clear colors</param>
<returns>(unit) void, nothing</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsGeometry.RhinoScriptSyntax.PointCloudPointColors.Static(System.Guid)">
<summary>Returns the point colors of a point cloud object</summary>
<param name="objectId">(Guid) The point cloud object's identifier</param>
<returns>(Drawing.Color ResizeArray) List of point cloud colors</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsGeometry.RhinoScriptSyntax.PointCloudHidePoints.Static(System.Guid,System.Collections.Generic.IEnumerable{System.Boolean})">
<summary>Modifies the hidden points of a point cloud object</summary>
<param name="objectId">(Guid) The point cloud object's identifier</param>
<param name="hidden">(bool seq) List of booleans matched to the index of points to be hidden, On empty seq all point wil be shown</param>
<returns>(unit) void, nothing</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsGeometry.RhinoScriptSyntax.PointCloudHidePoints.Static(System.Guid)">
<summary>Returns the hidden points of a point cloud object</summary>
<param name="objectId">(Guid) The point cloud object's identifier</param>
<returns>(bool ResizeArray) List of point cloud hidden states</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsGeometry.RhinoScriptSyntax.PointCloudHasPointColors.Static(System.Guid)">
<summary>Verifies that a point cloud has point colors</summary>
<param name="objectId">(Guid) The point cloud object's identifier</param>
<returns>(bool) True if cloud has point colors, otherwise False</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsGeometry.RhinoScriptSyntax.PointCloudHasHiddenPoints.Static(System.Guid)">
<summary>Verifies that a point cloud has hidden points</summary>
<param name="objectId">(Guid) The point cloud object's identifier</param>
<returns>(bool) True if cloud has hidden points, otherwise False</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsGeometry.RhinoScriptSyntax.PointCloudCount.Static(System.Guid)">
<summary>Returns the point count of a point cloud object</summary>
<param name="objectId">(Guid) The point cloud object's identifier</param>
<returns>(int) number of points</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsGeometry.RhinoScriptSyntax.IsTextDot.Static(System.Guid)">
<summary>Verifies an object is a text dot object</summary>
<param name="objectId">(Guid) The object's identifier</param>
<returns>(bool) True if the object with a given objectId is a text dot object</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsGeometry.RhinoScriptSyntax.IsText.Static(System.Guid)">
<summary>Verifies an object is a text object</summary>
<param name="objectId">(Guid) The object's identifier</param>
<returns>(bool) True if the object with a given objectId is a text object</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsGeometry.RhinoScriptSyntax.IsPointCloud.Static(System.Guid)">
<summary>Verifies an object is a point cloud object</summary>
<param name="objectId">(Guid) The object's identifier</param>
<returns>(bool) True if the object with a given objectId is a point cloud</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsGeometry.RhinoScriptSyntax.IsPoint.Static(System.Guid)">
<summary>Verifies an object is a point object</summary>
<param name="objectId">(Guid) The object's identifier</param>
<returns>(bool) True if the object with a given objectId is a point</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsGeometry.RhinoScriptSyntax.IsClippingPlane.Static(System.Guid)">
<summary>Verifies that an object is a clipping plane object</summary>
<param name="objectId">(Guid) The object's identifier</param>
<returns>(bool) True if the object with a given objectId is a clipping plane</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsGeometry.RhinoScriptSyntax.ExplodeText.Static(System.Guid,System.Boolean)">
<summary>Creates outline curves for a given text entity</summary>
<param name="textId">(Guid) Identifier of Text object to explode</param>
<param name="delete">(bool) Optional, Default Value: <c>false</c>
Delete the text object after the curves have been created</param>
<returns>(Guid array) of outline curves</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsGeometry.RhinoScriptSyntax.CompareGeometry.Static(System.Guid,System.Guid)">
<summary>Compares two objects to determine if they are geometrically identical</summary>
<param name="first">(Guid) The identifier of the first object to compare</param>
<param name="second">(Guid) The identifier of the second object to compare</param>
<returns>(bool) True if the objects are geometrically identical, otherwise False</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsGeometry.RhinoScriptSyntax.BoundingBox.Static(System.Collections.Generic.IEnumerable{System.Guid},Rhino.Geometry.Plane,System.Boolean)">
<summary>Returns either world axis-aligned or a construction plane axis-aligned
  bounding box of an object or of several objects</summary>
<param name="objects">(Guid seq) The identifiers of the objects</param>
<param name="plane">(Plane) Optional, Default Value: <c>Plane.WorldXY</c>
  plane to which the bounding box should be aligned
  If omitted, a world axis-aligned bounding box
  will be calculated</param>
<param name="inWorldCoords">(bool) Optional, Default Value: <c>true</c>
Return the bounding box as world coordinates or
  construction plane coordinates. Note, this option does not apply to
  world axis-aligned bounding boxes</param>
<returns>(Point3d array) Eight 3D points that define the bounding box.
  Points returned in counter-clockwise order starting with the bottom rectangle of the box</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsGeometry.RhinoScriptSyntax.Area.Static(System.Guid)">
<summary>Compute the area of a closed curve, hatch, surface, polysurface, or mesh</summary>
<param name="objectId">(Guid) The object's identifier</param>
<returns>(float) area</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsGeometry.RhinoScriptSyntax.AddTextDot.Static(System.String,Rhino.Geometry.Point3d)">
<summary>Add a text dot to the document</summary>
<param name="text">(string) String in dot</param>
<param name="point">(Point3d) A 3D point identifying the origin point</param>
<returns>(Guid) The identifier of the new object</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsGeometry.RhinoScriptSyntax.AddText.Static(System.String,Rhino.Geometry.Plane,System.Double,System.String,System.Int32,Rhino.DocObjects.TextHorizontalAlignment,Rhino.DocObjects.TextVerticalAlignment)">
<summary>Adds a text string to the document</summary>
<param name="text">(string) The text to display</param>
<param name="plane">(Plane) the plane on which the text will lie.
  The origin of the plane will be the origin point of the text</param>
<param name="height">(float) Optional, Default Value: <c>1.0</c>
The text height</param>
<param name="font">(string) Optional, The text font</param>
<param name="fontStyle">(int) Optional, Default Value: <c>0</c>
Any of the following flags
  0 = normal
  1 = bold
  2 = italic
  3 = bold and italic</param>
<param name="horizontalAlignment">(DocObjects.TextHorizontalAlignment) Optional, Default Value: <c>DocObjects.TextHorizontalAlignment.Left</c></param>
<param name="verticalAlignment">(DocObjects.TextVerticalAlignment) Optional, Default Value: <c>DocObjects.TextVerticalAlignment.Top</c></param>
<returns>(Guid) identifier for the object that was added to the doc on success</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsGeometry.RhinoScriptSyntax.AddPoints.Static(System.Collections.Generic.IEnumerable{Rhino.Geometry.Point3d})">
<summary>Adds one or more point objects to the document</summary>
<param name="points">(Point3d seq) List of points</param>
<returns>(Guid ResizeArray) List of identifiers of the new objects on success</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsGeometry.RhinoScriptSyntax.AddPointCloud.Static(Rhino.Geometry.Point3d[],System.Drawing.Color[])">
<summary>Adds point cloud object to the document</summary>
<param name="points">(Point3d array) List of values where every multiple of three represents a point</param>
<param name="colors">(Drawing.Color array) Optional, List of colors to apply to each point</param>
<returns>(Guid) identifier of point cloud on success</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsGeometry.RhinoScriptSyntax.AddPoint.Static(Rhino.Geometry.Point3d)">
<summary>Adds point object to the document</summary>
<param name="point">(Point3d) point to draw</param>
<returns>(Guid) identifier for the object that was added to the doc</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsGeometry.RhinoScriptSyntax.AddPoint.Static(System.Double,System.Double,System.Double)">
<summary>Adds point object to the document</summary>
<param name="X">(float) X location of point to add</param>
<param name="y">(float) Y location of point to add</param>
<param name="z">(float) Z location of point to add</param>
<returns>(Guid) identifier for the object that was added to the doc</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsGeometry.RhinoScriptSyntax.AddPictureFrame.Static(Rhino.Geometry.Plane,System.String,System.Double,System.Double,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
<summary>Creates a picture frame and adds it to the document</summary>
<param name="plane">(Plane) The plane in which the PictureFrame will be created.  The bottom-left corner of picture will be at plane's origin. The width will be in the plane's X axis direction, and the height will be in the plane's Y axis direction</param>
<param name="filename">(string) The path to a bitmap or image file</param>
<param name="width">(float) Optional, If both dblWidth and dblHeight are 0.0 or skiped, then the width and height of the PictureFrame will be the width and height of the image. If dblWidth = 0 and dblHeight is > 0, or if dblWidth > 0 and dblHeight = 0, then the non-zero value is assumed to be an aspect ratio of the image's width or height, which ever one is = 0. If both dblWidth and dblHeight are > 0, then these are assumed to be the width and height of in the current unit system</param>
<param name="height">(float) Optional, If both dblWidth and dblHeight are  0.0 or skied, then the width and height of the PictureFrame will be the width and height of the image. If dblWidth = 0 and dblHeight is > 0, or if dblWidth > 0 and dblHeight = 0, then the non-zero value is assumed to be an aspect ratio of the image's width or height, which ever one is = 0. If both dblWidth and dblHeight are > 0, then these are assumed to be the width and height of in the current unit system</param>
<param name="selfIllumination">(bool) Optional, Default Value: <c>true</c>
If True, then the image mapped to the picture frame plane always displays at full intensity and is not affected by light or shadow</param>
<param name="embed">(bool) Optional, Default Value: <c>false</c>
If True, then the function adds the image to Rhino's internal bitmap table, thus making the document self-contained</param>
<param name="useAlpha">(bool) Optional, Default Value: <c>false</c>
If False, the picture frame is created without any transparency texture.  If True, a transparency texture is created with a "mask texture" set to alpha, and an instance of the diffuse texture in the source texture slot</param>
<param name="makeMesh">(bool) Optional, Default Value: <c>false</c>
If True, the function will make a PictureFrame object from a mesh rather than a plane surface</param>
<returns>(Guid) object identifier on success</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsGeometry.RhinoScriptSyntax.AddClippingPlane.Static(Rhino.Geometry.Plane,System.Double,System.Double,System.Collections.Generic.IEnumerable{System.String})">
<summary>Create a clipping plane for visibly clipping away geometry in a specific
  view. Note, clipping planes are infinite</summary>
<param name="plane">(Plane) The plane</param>
<param name="uMagnitude">(float) U magnitude of the plane</param>
<param name="vMagnitude">(float) V magnitude of the plane</param>
<param name="views">(string seq) Optional, Titles the the view(s) to clip. If omitted, the active
  view is used</param>
<returns>(Guid) object identifier on success</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsGrips.RhinoScriptSyntax.UnselectObjectGrips.Static(System.Guid)">
<summary>Unselects an object's grips. Note, the grips will not be turned off</summary>
<param name="objectId">(Guid) Identifier of the object</param>
<returns>(int) Number of grips unselected on success</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsGrips.RhinoScriptSyntax.UnselectObjectGrip.Static(System.Guid,System.Int32)">
<summary>Unselects a single grip owned by an object. If the object's grips are
  not turned on, the grips will not be unselected</summary>
<param name="objectId">(Guid) Identifier of the object</param>
<param name="index">(int) Index of the grip to unselect</param>
<returns>(bool) True or False indicating success or failure</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsGrips.RhinoScriptSyntax.SelectObjectGrips.Static(System.Guid)">
<summary>Selects an object's grips. If the object's grips are not turned on,
  they will not be selected</summary>
<param name="objectId">(Guid) Identifier of the object</param>
<returns>(int) Number of grips selected on success</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsGrips.RhinoScriptSyntax.SelectObjectGrip.Static(System.Guid,System.Int32)">
<summary>Selects a single grip owned by an object. If the object's grips are
  not turned on, the grips will not be selected</summary>
<param name="objectId">(Guid) Identifier of the object</param>
<param name="index">(int) Index of the grip to select</param>
<returns>(bool) True or False indicating success or failure</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsGrips.RhinoScriptSyntax.SelectedObjectGrips.Static(System.Guid)">
<summary>Returns a list of grip indices indentifying an object's selected grips</summary>
<param name="objectId">(Guid) Identifier of the object</param>
<returns>(int ResizeArray) list of indices on success</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsGrips.RhinoScriptSyntax.PrevObjectGrip.Static(System.Guid,System.Int32,System.Int32,System.Boolean)">
<summary>Returns the previous grip index from a specified grip index of an object</summary>
<param name="objectId">(Guid) Identifier of the object</param>
<param name="index">(int) Zero based grip index from which to get the previous grip index</param>
<param name="direction">(int) Optional, Default Value: <c>0</c>
Direction to get the next grip index (0= U, 1= V)</param>
<param name="enable">(bool) Optional, Default Value: <c>true</c>
If True, the next grip index found will be selected</param>
<returns>(int) index of the next grip on success</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsGrips.RhinoScriptSyntax.ObjectGripsSelected.Static(System.Guid)">
<summary>Verifies that an object's grips are turned on and at least one grip
  is selected</summary>
<param name="objectId">(Guid) Identifier of the object</param>
<returns>(bool) True or False indicating success or failure</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsGrips.RhinoScriptSyntax.ObjectGripsOn.Static(System.Guid)">
<summary>Verifies that an object's grips are turned on</summary>
<param name="objectId">(Guid) Identifier of the object</param>
<returns>(bool) True or False indicating Grips state</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsGrips.RhinoScriptSyntax.ObjectGripLocations.Static(System.Guid,System.Collections.Generic.IEnumerable{Rhino.Geometry.Point3d})">
<summary>Modifies the location of all grips owned by an object. The
 locations of the grips are returned in a list of Point3d with each position
 in the list corresponding to that grip's index. To modify the locations of
 the grips, you must provide a list of points that contain the same number
 of points at grips</summary>
<param name="objectId">(Guid) Identifier of the object</param>
<param name="points">(Point3d seq) List of 3D points identifying the new grip locations</param>
<returns>(unit) void, nothing</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsGrips.RhinoScriptSyntax.ObjectGripLocations.Static(System.Guid)">
<summary>Returns the location of all grips owned by an object. The
 locations of the grips are returned in a list of Point3d with each position
 in the list corresponding to that grip's index. To modify the locations of
 the grips, you must provide a list of points that contain the same number
 of points at grips</summary>
<param name="objectId">(Guid) Identifier of the object</param>
<returns>(Point3d ResizeArray) The current location of all grips</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsGrips.RhinoScriptSyntax.ObjectGripLocation.Static(System.Guid,System.Int32,Rhino.Geometry.Point3d)">
<summary>Modifies the location of an object's grip</summary>
<param name="objectId">(Guid) Identifier of the object</param>
<param name="index">(int) Index of the grip to either query or modify</param>
<param name="point">(Point3d) 3D point defining new location of the grip</param>
<returns>(unit) void, nothing</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsGrips.RhinoScriptSyntax.ObjectGripLocation.Static(System.Guid,System.Int32)">
<summary>Returns the location of an object's grip</summary>
<param name="objectId">(Guid) Identifier of the object</param>
<param name="index">(int) Index of the grip to either query or modify</param>
<returns>(Point3d) The current location of the grip referenced by index</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsGrips.RhinoScriptSyntax.ObjectGripCount.Static(System.Guid)">
<summary>Returns number of grips owned by an object</summary>
<param name="objectId">(Guid) Identifier of the object</param>
<returns>(int) number of grips</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsGrips.RhinoScriptSyntax.NextObjectGrip.Static(System.Guid,System.Int32,System.Int32,System.Boolean)">
<summary>Returns the next grip index from a specified grip index of an object</summary>
<param name="objectId">(Guid) Identifier of the object</param>
<param name="index">(int) Zero based grip index from which to get the next grip index</param>
<param name="direction">(int ) Optional, Default Value: <c>0</c>
Direction to get the next grip index (0= U, 1= V)</param>
<param name="enable">(bool) Optional, Default Value: <c>true</c>
If True, the next grip index found will be selected</param>
<returns>(int) index of the next grip on success</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsGrips.RhinoScriptSyntax.Neighborgrip.Static(System.Int32,System.Guid,System.Int32,System.Int32,System.Boolean)">
<summary>
 Internal helper
</summary>
</member>
<member name="M:Rhino.Scripting.ExtensionsGrips.RhinoScriptSyntax.GetObjectGrips.Static(System.String,System.Boolean,System.Boolean)">
<summary>Prompts user to pick one or more object grips from one or more objects</summary>
<param name="message">(string) Optional, Prompt for picking</param>
<param name="preselect">(bool) Optional, Default Value: <c>false</c>
Allow for selection of pre-selected object grips</param>
<param name="select">(bool) Optional, Default Value: <c>false</c>
Select the picked object grips</param>
<returns>((Guid * int * Point3d) ResizeArray) containing one or more grip records. Each grip record is a tuple
  [n][0] = identifier of the object that owns the grip
  [n][1] = index value of the grip
  [n][2] = location of the grip</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsGrips.RhinoScriptSyntax.GetObjectGrip.Static(System.String,System.Boolean,System.Boolean)">
<summary>Prompts the user to pick a single object grip</summary>
<param name="message">(string) Optional, Prompt for picking</param>
<param name="preselect">(bool) Optional, Default Value: <c>false</c>
Allow for selection of pre-selected object grip</param>
<param name="select">(bool) Optional, Default Value: <c>false</c>
Select the picked object grip</param>
<returns>(Guid * int * Point3d) Option of a grip record.
  [0] = identifier of the object that owns the grip
  [1] = index value of the grip
  [2] = location of the grip</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsGrips.RhinoScriptSyntax.EnableObjectGrips.Static(System.Guid,System.Boolean)">
<summary>Enables or disables an object's grips. For curves and surfaces, these are
  also called control points</summary>
<param name="objectId">(Guid) Identifier of the object</param>
<param name="enable">(bool) Optional, Default Value: <c>true</c>
If True, the specified object's grips will be turned on.
  Otherwise, they will be turned off</param>
<returns>(bool) True on success, False on failure</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsGroup.RhinoScriptSyntax.UnlockGroup.Static(System.String)">
<summary>Unlocks a group of previously locked objects. Lockes objects are visible,
  can be snapped to, but cannot be selected</summary>
<param name="groupName">(string) The name of an existing group</param>
<returns>(int) The number of objects that were unlocked</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsGroup.RhinoScriptSyntax.ShowGroup.Static(System.String)">
<summary>Shows a group of previously hidden objects. Hidden objects are not
  visible, cannot be snapped to, and cannot be selected</summary>
<param name="groupName">(string) The name of an existing group</param>
<returns>(int) The number of objects that were shown</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsGroup.RhinoScriptSyntax.RenameGroup.Static(System.String,System.String)">
<summary>Renames an existing group</summary>
<param name="oldName">(string) The name of an existing group</param>
<param name="newName">(string) The new group name</param>
<returns>(unit) void, nothing</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsGroup.RhinoScriptSyntax.RemoveObjectFromGroup.Static(System.Collections.Generic.IEnumerable{System.Guid},System.String)">
<summary>Removes multiple objects from an existing group</summary>
<param name="objectIds">(Guid seq) A list of object identifiers</param>
<param name="groupName">(string) The name of an existing group</param>
<returns>(unit) void, nothing</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsGroup.RhinoScriptSyntax.RemoveObjectFromGroup.Static(System.Guid,System.String)">
<summary>Remove a single object from an existing group</summary>
<param name="objectId">(Guid) The object identifier</param>
<param name="groupName">(string) The name of an existing group</param>
<returns>(unit) void, nothing</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsGroup.RhinoScriptSyntax.RemoveObjectFromAllGroups.Static(System.Guid)">
<summary>Removes a single object from any and all groups that it is a member.
  Neither the object nor the group can be reference objects</summary>
<param name="objectId">(Guid) The object identifier</param>
<returns>(bool) True or False indicating success or failure</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsGroup.RhinoScriptSyntax.LockGroup.Static(System.String)">
<summary>Locks a group of objects. Locked objects are visible and they can be
  snapped to. But, they cannot be selected</summary>
<param name="groupName">(string) The name of an existing group</param>
<returns>(int) Number of objects that were locked</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsGroup.RhinoScriptSyntax.IsGroupEmpty.Static(System.String)">
<summary>Verifies that an existing group is empty, or contains no object members</summary>
<param name="groupName">(string) The name of an existing group</param>
<returns>(bool) True or False if groupName is empty</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsGroup.RhinoScriptSyntax.IsGroup.Static(System.String)">
<summary>Verifies the existance of a group</summary>
<param name="groupName">(string) The name of the group to check for</param>
<returns>(bool) True or False</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsGroup.RhinoScriptSyntax.HideGroup.Static(System.String)">
<summary>Hides a group of objects. Hidden objects are not visible, cannot be
  snapped to, and cannot be selected</summary>
<param name="groupName">(string) The name of an existing group</param>
<returns>(int) The number of objects that were hidden</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsGroup.RhinoScriptSyntax.GroupNames.Static">
<summary>Returns the names of all the groups in the document
  None if no names exist in the document</summary>
<returns>(string array) the names of all the groups in the document.  None if no names exist in the document</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsGroup.RhinoScriptSyntax.GroupCount.Static">
<summary>Returns the number of groups in the document</summary>
<returns>(int) the number of groups in the document</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsGroup.RhinoScriptSyntax.DeleteGroup.Static(System.String)">
<summary>Removes an existing group from the document. Reference groups cannot be
  removed. Deleting a group does not delete the member objects</summary>
<param name="groupName">(string) The name of an existing group</param>
<returns>(unit) void, nothing</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsGroup.RhinoScriptSyntax.AddObjectToGroup.Static(System.Guid,System.String)">
<summary>Adds a single object to an existing group</summary>
<param name="objectId">(Guid) String or Guid representing the object identifier</param>
<param name="groupName">(string) The name of an existing group</param>
<returns>(unit) void, nothing</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsGroup.RhinoScriptSyntax.AddObjectToGroup.Static(System.Collections.Generic.IEnumerable{System.Guid},System.String)">
<summary>Adds one or more objects to an existing group</summary>
<param name="objectIds">(Guid seq) List of Strings or Guids representing the object identifiers</param>
<param name="groupName">(string) The name of an existing group</param>
<returns>(unit) void, nothing</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsGroup.RhinoScriptSyntax.AddGroup.Static(System.String)">
<summary>Adds a new empty group to the document</summary>
<param name="groupName">(string) Optional, Name of the new group. If omitted, rhino automatically
  generates the group name</param>
<returns>(string) name of the new group</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsHatch.RhinoScriptSyntax.IsHatchPatternReference.Static(System.String)">
<summary>Verifies that a hatch pattern is from a reference file</summary>
<param name="hatchPattern">(string) Name of an existing hatch pattern</param>
<returns>(bool) True or False</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsHatch.RhinoScriptSyntax.IsHatchPatternCurrent.Static(System.String)">
<summary>Verifies that a hatch pattern is the current hatch pattern</summary>
<param name="hatchPattern">(string) Name of an existing hatch pattern</param>
<returns>(bool) True or False</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsHatch.RhinoScriptSyntax.IsHatchPattern.Static(System.String)">
<summary>Verifies the existence of a hatch pattern in the document</summary>
<param name="name">(string) The name of a hatch pattern</param>
<returns>(bool) True or False</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsHatch.RhinoScriptSyntax.IsHatch.Static(System.Guid)">
<summary>Verifies the existence of a hatch object in the document</summary>
<param name="objectId">(Guid) Identifier of an object</param>
<returns>(bool) True or False</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsHatch.RhinoScriptSyntax.HatchScale.Static(System.Collections.Generic.IEnumerable{System.Guid},System.Double)">
<summary>Modifies the scale applied to the hatch pattern when it is
 mapped to the hatch's plane</summary>
<param name="hatchIds">(Guid seq) Identifiers of multiple hatch objects</param>
<param name="scale">(float) Scale factor</param>
<returns>(unit) void, nothing</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsHatch.RhinoScriptSyntax.HatchScale.Static(System.Guid,System.Double)">
<summary>Modifies the scale applied to the hatch pattern when it is
 mapped to the hatch's plane</summary>
<param name="hatchId">(Guid) Identifier of a hatch object</param>
<param name="scale">(float) Scale factor</param>
<returns>(unit) void, nothing</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsHatch.RhinoScriptSyntax.HatchScale.Static(System.Guid)">
<summary>Returns the scale applied to the hatch pattern when it is
 mapped to the hatch's plane</summary>
<param name="hatchId">(Guid) Identifier of a hatch object</param>
<returns>(float) if scale is not defined, the current scale factor</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsHatch.RhinoScriptSyntax.HatchRotation.Static(System.Collections.Generic.IEnumerable{System.Guid},System.Double)">
<summary>Modifies the rotation applied to the hatch pattern when
 it is mapped to the hatch's plane</summary>
<param name="hatchIds">(Guid seq) Identifiers of multiple hatch objects</param>
<param name="rotation">(float) Rotation angle in degrees</param>
<returns>(unit) void, nothing</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsHatch.RhinoScriptSyntax.HatchRotation.Static(System.Guid,System.Double)">
<summary>Modifies the rotation applied to the hatch pattern when
 it is mapped to the hatch's plane</summary>
<param name="hatchId">(Guid) Identifier of a hatch object</param>
<param name="rotation">(float) Rotation angle in degrees</param>
<returns>(unit) void, nothing</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsHatch.RhinoScriptSyntax.HatchRotation.Static(System.Guid)">
<summary>Returns the rotation applied to the hatch pattern when
 it is mapped to the hatch's plane</summary>
<param name="hatchId">(Guid) Identifier of a hatch object</param>
<returns>(float) if rotation is not defined, the current rotation angle</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsHatch.RhinoScriptSyntax.HatchPatternNames.Static">
<summary>Returns the names of all of the hatch patterns in the document</summary>
<returns>(string ResizeArray) the names of all of the hatch patterns in the document</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsHatch.RhinoScriptSyntax.HatchPatternFillType.Static(System.String)">
<summary>Returns the fill type of a hatch pattern</summary>
<param name="hatchPattern">(string) Name of an existing hatch pattern</param>
<returns>(int) hatch pattern's fill type
  0 = solid, uses object color
  1 = lines, uses pattern file definition
  2 = gradient, uses fill color definition</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsHatch.RhinoScriptSyntax.HatchPatternDescription.Static(System.String)">
<summary>Returns the description of a hatch pattern. Note, not all hatch patterns
  have descriptions</summary>
<param name="hatchPattern">(string) Name of an existing hatch pattern</param>
<returns>(string) description of the hatch pattern on success otherwise None</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsHatch.RhinoScriptSyntax.HatchPatternCount.Static">
<summary>Returns the number of hatch patterns in the document</summary>
<returns>(int) the number of hatch patterns in the document</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsHatch.RhinoScriptSyntax.HatchPattern.Static(System.Collections.Generic.IEnumerable{System.Guid},System.String)">
<summary>Changes multiple hatch objects's hatch pattern</summary>
<param name="hatchIds">(Guid seq) Identifiers of multiple hatch objects</param>
<param name="hatchPattern">(string) Name of multiple existing hatch pattern to replace the
  current hatch pattern</param>
<returns>(unit) void, nothing</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsHatch.RhinoScriptSyntax.HatchPattern.Static(System.Guid,System.String)">
<summary>Changes a hatch object's hatch pattern</summary>
<param name="hatchId">(Guid) Identifier of a hatch object</param>
<param name="hatchPattern">(string) Name of an existing hatch pattern to replace the
  current hatch pattern</param>
<returns>(unit) void, nothing</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsHatch.RhinoScriptSyntax.HatchPattern.Static(System.Guid)">
<summary>Returns a hatch object's hatch pattern</summary>
<param name="hatchId">(Guid) Identifier of a hatch object</param>
<returns>(string) The current hatch pattern</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsHatch.RhinoScriptSyntax.ExplodeHatch.Static(System.Guid,System.Boolean)">
<summary>Explodes a hatch object into its component objects. The exploded objects
  will be added to the document. If the hatch object uses a solid pattern,
  then planar face Brep objects will be created. Otherwise, line curve objects
  will be created</summary>
<param name="hatchId">(Guid) Identifier of a hatch object</param>
<param name="delete">(bool) Optional, Default Value: <c>false</c>
Delete the hatch object</param>
<returns>(Guid ResizeArray) list of identifiers for the newly created objects</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsHatch.RhinoScriptSyntax.CurrentHatchPattern.Static(System.String)">
<summary>Sets the current hatch pattern file</summary>
<param name="hatchPattern">(string) Name of an existing hatch pattern to make current</param>
<returns>(unit) void, nothing</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsHatch.RhinoScriptSyntax.CurrentHatchPattern.Static">
<summary>Returns the current hatch pattern file</summary>
<returns>(string) The current hatch pattern</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsHatch.RhinoScriptSyntax.AddHatchPatterns.Static(System.String,System.Boolean)">
<summary>Adds hatch patterns to the document by importing hatch pattern definitions
  from a pattern file</summary>
<param name="filename">(string) Name of the hatch pattern file</param>
<param name="replace">(bool) Optional, Default Value: <c>false</c>
If hatch pattern names already in the document match hatch
  pattern names in the pattern definition file, then the existing hatch
  patterns will be redefined</param>
<returns>(string ResizeArray) Names of the newly added hatch patterns</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsHatch.RhinoScriptSyntax.AddHatch.Static(System.Guid,System.String,System.Double,System.Double)">
<summary>Creates a new hatch object from a closed planar curve object</summary>
<param name="curveId">(Guid) Identifier of the closed planar curve that defines the
  boundary of the hatch object</param>
<param name="hatchPattern">(string) Optional, Name of the hatch pattern to be used by the hatch
  object. If omitted, the current hatch pattern will be used</param>
<param name="scale">(float) Optional, Default Value: <c>1.0</c>
Hatch pattern scale factor</param>
<param name="rotation">(float) Optional, Default Value: <c>0.0</c>
Hatch pattern rotation angle in degrees</param>
<returns>(Guid) identifier of the newly created hatch on success</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsHatch.RhinoScriptSyntax.AddHatches.Static(System.Collections.Generic.IEnumerable{System.Guid},System.String,System.Double,System.Double,System.Double)">
<summary>Creates one or more new hatch objects a list of closed planar curves</summary>
<param name="curveIds">(Guid seq) Identifiers of the closed planar curves that defines the
  boundary of the hatch objects</param>
<param name="hatchPattern">(string) Optional, Name of the hatch pattern to be used by the hatch object.
  If omitted, the current hatch pattern will be used</param>
<param name="scale">(float) Optional, Default Value: <c>1.0</c>
Hatch pattern scale factor</param>
<param name="rotation">(float) Optional, Default Value: <c>0.0</c>
Hatch pattern rotation angle in degrees</param>
<param name="tolerance">(float) Optional, Default Value: <c>Doc.ModelAbsoluteTolerance</c>
Tolerance for hatch fills</param>
<returns>(Guid ResizeArray) identifiers of the newly created hatch on success</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsLayer.RhinoScriptSyntax.RenameLayer.Static(System.String,System.String)">
<summary>Renames an existing layer</summary>
<param name="oldname">(string) Original layer name</param>
<param name="newname">(string) New layer name</param>
<returns>(unit) void, nothing</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsLayer.RhinoScriptSyntax.PurgeLayer.Static(System.String)">
<summary>Removes an existing layer from the document. The layer will be removed
  even if it contains geometry objects. The layer to be removed cannot be the
  current layer
  empty</summary>
<param name="layer">(string) The name of an existing empty layer</param>
<returns>(bool) True or False indicating success or failure</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsLayer.RhinoScriptSyntax.ParentLayer.Static(System.String,System.String)">
<summary>Modify the parent layer of a layer</summary>
<param name="layer">(string) Name of an existing layer</param>
<param name="parent">(string) Name of new parent layer. To remove the parent layer,
  thus making a root-level layer, specify an empty string</param>
<returns>(unit) void, nothing</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsLayer.RhinoScriptSyntax.ParentLayer.Static(System.String)">
<summary>Return the parent layer of a layer or mepty string if no parent present</summary>
<param name="layer">(string) Name of an existing layer</param>
<returns>(string) The name of the current parent layer</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsLayer.RhinoScriptSyntax.LayerVisible.Static(System.String,System.Boolean,System.Boolean)">
<summary>Changes the visible property of a layer</summary>
<param name="layer">(string) Name of existing layer</param>
<param name="visible">(bool) New visible state</param>
<param name="forcevisibleOrDonotpersist">(bool) If visible is True then turn parent layers on if True.  If visible is False then do not persist if True</param>
<returns>(unit) void, nothing</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsLayer.RhinoScriptSyntax.LayerVisible.Static(System.String)">
<summary>Returns the visible property of a layer</summary>
<param name="layer">(string) Name of existing layer</param>
<returns>(bool) The current layer visibility</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsLayer.RhinoScriptSyntax.LayerPrintWidth.Static(System.String,System.Double)">
<summary>Changes the print width of a layer. Print width is specified
 in millimeters. A print width of 0.0 denotes the "default" print width</summary>
<param name="layer">(string) Name of existing layer</param>
<param name="width">(float) New print width</param>
<returns>(unit) void, nothing</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsLayer.RhinoScriptSyntax.LayerPrintWidth.Static(System.String)">
<summary>Returns the print width of a layer. Print width is specified
 in millimeters. A print width of 0.0 denotes the "default" print width</summary>
<param name="layer">(string) Name of existing layer</param>
<returns>(float) The current layer print width</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsLayer.RhinoScriptSyntax.LayerPrintColor.Static(System.String,System.Drawing.Color)">
<summary>Changes the print color of a layer. Layer print colors are
 represented as RGB colors</summary>
<param name="layer">(string) Name of existing layer</param>
<param name="color">(Drawing.Color) New print color</param>
<returns>(unit) void, nothing</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsLayer.RhinoScriptSyntax.LayerPrintColor.Static(System.String)">
<summary>Returns the print color of a layer. Layer print colors are
 represented as RGB colors</summary>
<param name="layer">(string) Name of existing layer</param>
<returns>(Drawing.Color) The current layer print color</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsLayer.RhinoScriptSyntax.LayerOrder.Static(System.String)">
<summary>Returns the current display order index of a layer as displayed in Rhino's
  layer dialog box. A display order index of -1 indicates that the current
  layer dialog filter does not allow the layer to appear in the layer list</summary>
<param name="layer">(string) Name of existing layer</param>
<returns>(int) 0 based index of layer</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsLayer.RhinoScriptSyntax.LayerNames.Static">
<summary>Returns the names of all layers in the document</summary>
<returns>(string ResizeArray) list of layer names</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsLayer.RhinoScriptSyntax.LayerName.Static(System.Guid,System.Boolean)">
<summary>Return the name of a layer given it's identifier</summary>
<param name="layerId">(Guid) Layer identifier</param>
<param name="fullpath">(bool) Optional, Default Value: <c>true</c>
Return the full path name `True` or short name `False`</param>
<returns>(string) the layer's name</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsLayer.RhinoScriptSyntax.LayerId.Static(System.String)">
<summary>Returns the identifier of a layer given the layer's name</summary>
<param name="layer">(string) Name of existing layer</param>
<returns>(Guid) The layer's identifier</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsLayer.RhinoScriptSyntax.LayerMaterialIndex.Static(System.String,System.Int32)">
<summary>Changes the material index of a layer. A material index of -1
 indicates that no material has been assigned to the layer. Thus, the layer
 will use Rhino's default layer material</summary>
<param name="layer">(string) Name of existing layer</param>
<param name="index">(int) The new material index</param>
<returns>(unit) void, nothing</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsLayer.RhinoScriptSyntax.LayerMaterialIndex.Static(System.String)">
<summary>Returns the material index of a layer. A material index of -1
 indicates that no material has been assigned to the layer. Thus, the layer
 will use Rhino's default layer material</summary>
<param name="layer">(string) Name of existing layer</param>
<returns>(int) a zero-based material index</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsLayer.RhinoScriptSyntax.LayerLocked.Static(System.String,System.Boolean)">
<summary>Changes the locked mode of a layer</summary>
<param name="layer">(string) Name of an existing layer</param>
<param name="locked">(bool) New layer locked mode</param>
<returns>(unit) void, nothing</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsLayer.RhinoScriptSyntax.LayerLocked.Static(System.String)">
<summary>Returns the locked mode of a layer</summary>
<param name="layer">(string) Name of an existing layer</param>
<returns>(bool) The current layer locked mode</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsLayer.RhinoScriptSyntax.LayerLinetype.Static(System.String,System.String)">
<summary>Changes the linetype of a layer</summary>
<param name="layer">(string) Name of an existing layer</param>
<param name="linetyp">(string) Name of a linetype</param>
<returns>(unit) void, nothing</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsLayer.RhinoScriptSyntax.LayerLinetype.Static(System.String)">
<summary>Returns the linetype of a layer</summary>
<param name="layer">(string) Name of an existing layer</param>
<returns>(string) Name of the current linetype</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsLayer.RhinoScriptSyntax.LayerIds.Static">
<summary>Return identifiers of all layers in the document</summary>
<returns>(Guid ResizeArray) the identifiers of all layers in the document</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsLayer.RhinoScriptSyntax.LayerCount.Static">
<summary>Returns the number of layers in the document</summary>
<returns>(int) the number of layers in the document</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsLayer.RhinoScriptSyntax.LayerColor.Static(System.String,System.Drawing.Color)">
<summary>Changes the color of a layer</summary>
<param name="layer">(string) Name of an existing layer</param>
<param name="color">(Drawing.Color) The new color value</param>
<returns>(unit) void, nothing</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsLayer.RhinoScriptSyntax.LayerColor.Static(System.String)">
<summary>Returns the color of a layer</summary>
<param name="layer">(string) Name of an existing layer</param>
<returns>(Drawing.Color) The current color value on success</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsLayer.RhinoScriptSyntax.LayerChildren.Static(System.String)">
<summary>Returns the immediate child layers of a layer</summary>
<param name="layer">(string) The name of an existing layer</param>
<returns>(string ResizeArray) List of children layer names</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsLayer.RhinoScriptSyntax.LayerChildCount.Static(System.String)">
<summary>Returns the number of immediate child layers of a layer</summary>
<param name="layer">(string) The name of an existing layer</param>
<returns>(int) the number of immediate child layers</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsLayer.RhinoScriptSyntax.IsLayerVisible.Static(System.String)">
<summary>Verifies that a layer is visible (normal, locked, and reference)</summary>
<param name="layer">(string) The name of an existing layer</param>
<returns>(bool) True on success otherwise False</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsLayer.RhinoScriptSyntax.IsLayerReference.Static(System.String)">
<summary>Verifies that a layer is from a reference file</summary>
<param name="layer">(string) The name of an existing layer</param>
<returns>(bool) True on success otherwise False</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsLayer.RhinoScriptSyntax.IsLayerParentOf.Static(System.String,System.String)">
<summary>Verifies that a layer is a parent of another layer</summary>
<param name="layer">(string) The name of the layer to test against</param>
<param name="test">(string) The name to the layer to test</param>
<returns>(bool) True on success otherwise False</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsLayer.RhinoScriptSyntax.IsLayerSelectable.Static(System.String)">
<summary>Verifies that an existing layer is selectable (normal and reference)</summary>
<param name="layer">(string) The name of an existing layer</param>
<returns>(bool) True on success otherwise False</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsLayer.RhinoScriptSyntax.IsLayerOn.Static(System.String)">
<summary>Verifies that a layer is on</summary>
<param name="layer">(string) The name of an existing layer</param>
<returns>(bool) True on success otherwise False</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsLayer.RhinoScriptSyntax.IsLayerLocked.Static(System.String)">
<summary>Verifies that a layer is locked</summary>
<param name="layer">(string) The name of an existing layer</param>
<returns>(bool) True on success otherwise False</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsLayer.RhinoScriptSyntax.IsLayerExpanded.Static(System.String)">
<summary>Verifies that a layer is expanded. Expanded layers can be viewed in
  Rhino's layer dialog</summary>
<param name="layer">(string) The name of an existing layer</param>
<returns>(bool) True on success otherwise False</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsLayer.RhinoScriptSyntax.IsLayerEmpty.Static(System.String)">
<summary>Verifies that an existing layer is empty, or contains no objects</summary>
<param name="layer">(string) The name of an existing layer</param>
<returns>(bool) True on success otherwise False</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsLayer.RhinoScriptSyntax.IsLayerCurrent.Static(System.String)">
<summary>Verifies that a layer is the current layer</summary>
<param name="layer">(string) The name of an existing layer</param>
<returns>(bool) True on success otherwise False</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsLayer.RhinoScriptSyntax.IsLayerChildOf.Static(System.String,System.String)">
<summary>Verifies that a layer is a child of another layer</summary>
<param name="layer">(string) The name of the layer to test against</param>
<param name="test">(string) The name to the layer to test</param>
<returns>(bool) True on success otherwise False</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsLayer.RhinoScriptSyntax.IsLayerChangeable.Static(System.String)">
<summary>Verifies that the objects on a layer can be changed (normal)</summary>
<param name="layer">(string) The name of an existing layer</param>
<returns>(bool) True on success otherwise False</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsLayer.RhinoScriptSyntax.IsLayer.Static(System.String)">
<summary>Verifies the existance of a layer in the document</summary>
<param name="layer">(string) The name of a layer to search for</param>
<returns>(bool) True on success otherwise False</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsLayer.RhinoScriptSyntax.ExpandLayer.Static(System.String,System.Boolean)">
<summary>Expands a layer. Expanded layers can be viewed in Rhino's layer dialog</summary>
<param name="layer">(string) Name of the layer to expand</param>
<param name="expand">(bool) True to expand, False to collapse</param>
<returns>(unit) void, nothing</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsLayer.RhinoScriptSyntax.DeleteLayer.Static(System.String)">
<summary>Removes an existing layer from the document. The layer to be removed
  cannot be the current layer. Unlike the PurgeLayer method, the layer must
  be empty, or contain no objects, before it can be removed. Any layers that
  are children of the specified layer will also be removed if they are also
  empty</summary>
<param name="layer">(string) The name of an existing empty layer</param>
<returns>(bool) True or False indicating success or failure</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsLayer.RhinoScriptSyntax.CurrentLayer.Static(System.String)">
<summary>Changes the current layer</summary>
<param name="layer">(string) The name or Guid of an existing layer to make current</param>
<returns>(unit) void, nothing</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsLayer.RhinoScriptSyntax.CurrentLayer.Static">
<summary>Returns the current layer</summary>
<returns>(string) The full name of the current layer</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsLayer.RhinoScriptSyntax.AddLayer.Static(System.String,System.Drawing.Color,System.Boolean,System.Boolean,System.String)">
<summary>Add a new layer to the document</summary>
<param name="name">(string) Optional, The name of the new layer. If omitted, Rhino automatically
  generates the layer name</param>
<param name="color">(Drawing.Color) Optional, Default Value: <c>Drawing.Color.Black</c>
A Red-Green-Blue color value</param>
<param name="visible">(bool) Optional, Default Value: <c>true</c>
Layer's visibility</param>
<param name="locked">(bool) Optional, Default Value: <c>false</c>
Layer's locked state</param>
<param name="parent">(string) Optional, Name of the new layer's parent layer. If omitted, the new
  layer will not have a parent layer</param>
<returns>(string) The full name of the new layer </returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsLight.RhinoScriptSyntax.SpotLightShadowIntensity.Static(System.Collections.Generic.IEnumerable{System.Guid},System.Double)">
<summary>Changes the shadow intensity of multiple spot light</summary>
<param name="objectsIds">(Guid seq) The light objects's identifiers</param>
<param name="intensity">(float) The light's new intensity</param>
<returns>(unit) void, nothing</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsLight.RhinoScriptSyntax.SpotLightShadowIntensity.Static(System.Guid,System.Double)">
<summary>Changes the shadow intensity of a spot light</summary>
<param name="objectId">(Guid) The light object's identifier</param>
<param name="intensity">(float) The light's new intensity</param>
<returns>(unit) void, nothing</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsLight.RhinoScriptSyntax.SpotLightShadowIntensity.Static(System.Guid)">
<summary>Returns the shadow intensity of a spot light</summary>
<param name="objectId">(Guid) The light object's identifier</param>
<returns>(float) The current intensity</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsLight.RhinoScriptSyntax.SpotLightRadius.Static(System.Collections.Generic.IEnumerable{System.Guid},System.Double)">
<summary>Changes the radius of multiple spot light</summary>
<param name="objectsIds">(Guid seq) The light objects's identifiers</param>
<param name="radius">(float) The light's new radius</param>
<returns>(unit) void, nothing</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsLight.RhinoScriptSyntax.SpotLightRadius.Static(System.Guid,System.Double)">
<summary>Changes the radius of a spot light</summary>
<param name="objectId">(Guid) The light object's identifier</param>
<param name="radius">(float) The light's new radius</param>
<returns>(unit) void, nothing</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsLight.RhinoScriptSyntax.SpotLightRadius.Static(System.Guid)">
<summary>Returns the radius of a spot light</summary>
<param name="objectId">(Guid) The light object's identifier</param>
<returns>(float) The current radius</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsLight.RhinoScriptSyntax.SpotLightHardness.Static(System.Collections.Generic.IEnumerable{System.Guid},System.Double)">
<summary>Changes the hardness of multiple spot light. Spotlight hardness
 controls the fully illuminated region</summary>
<param name="objectsIds">(Guid seq) The light objects's identifiers</param>
<param name="hardness">(float) The light's new hardness</param>
<returns>(unit) void, nothing</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsLight.RhinoScriptSyntax.SpotLightHardness.Static(System.Guid,System.Double)">
<summary>Changes the hardness of a spot light. Spotlight hardness
 controls the fully illuminated region</summary>
<param name="objectId">(Guid) The light object's identifier</param>
<param name="hardness">(float) The light's new hardness</param>
<returns>(unit) void, nothing</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsLight.RhinoScriptSyntax.SpotLightHardness.Static(System.Guid)">
<summary>Returns the hardness of a spot light. Spotlight hardness
 controls the fully illuminated region</summary>
<param name="objectId">(Guid) The light object's identifier</param>
<returns>(float) The current hardness</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsLight.RhinoScriptSyntax.RectangularLightPlane.Static(System.Guid)">
<summary>Returns the plane of a rectangular light object</summary>
<param name="objectId">(Guid) The light object's identifier</param>
<returns>(Plane*float*float) the plane, X and Y length</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsLight.RhinoScriptSyntax.LightObjects.Static">
<summary>Returns list of identifiers of light objects in the document</summary>
<returns>(Guid ResizeArray) the list of identifiers of light objects in the document</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsLight.RhinoScriptSyntax.LightName.Static(System.Collections.Generic.IEnumerable{System.Guid},System.String)">
<summary>Changes the name of multiple light objects</summary>
<param name="objectsIds">(Guid seq) The light objects's identifiers</param>
<param name="name">(string) The light's new name</param>
<returns>(unit) void, nothing</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsLight.RhinoScriptSyntax.LightName.Static(System.Guid,System.String)">
<summary>Changes the name of a light object</summary>
<param name="objectId">(Guid) The light object's identifier</param>
<param name="name">(string) The light's new name</param>
<returns>(unit) void, nothing</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsLight.RhinoScriptSyntax.LightName.Static(System.Guid)">
<summary>Returns the name of a light object</summary>
<param name="objectId">(Guid) The light object's identifier</param>
<returns>(string) The current name</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsLight.RhinoScriptSyntax.LightLocation.Static(System.Collections.Generic.IEnumerable{System.Guid},Rhino.Geometry.Point3d)">
<summary>Changes the location of multiple light objects</summary>
<param name="objectsIds">(Guid seq) The light objects's identifiers</param>
<param name="location">(Point3d) The light's new location</param>
<returns>(unit) void, nothing</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsLight.RhinoScriptSyntax.LightLocation.Static(System.Guid,Rhino.Geometry.Point3d)">
<summary>Changes the location of a light object</summary>
<param name="objectId">(Guid) The light object's identifier</param>
<param name="location">(Point3d) The light's new location</param>
<returns>(unit) void, nothing</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsLight.RhinoScriptSyntax.LightLocation.Static(System.Guid)">
<summary>Returns the location of a light object</summary>
<param name="objectId">(Guid) The light object's identifier</param>
<returns>(Point3d) The current location</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsLight.RhinoScriptSyntax.LightDirection.Static(System.Collections.Generic.IEnumerable{System.Guid},Rhino.Geometry.Vector3d)">
<summary>Changes the direction of multiple light objects</summary>
<param name="objectsIds">(Guid seq) The light objects's identifiers</param>
<param name="direction">(Vector3d) The light's new direction</param>
<returns>(unit) void, nothing</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsLight.RhinoScriptSyntax.LightDirection.Static(System.Guid,Rhino.Geometry.Vector3d)">
<summary>Changes the direction of a light object</summary>
<param name="objectId">(Guid) The light object's identifier</param>
<param name="direction">(Vector3d) The light's new direction</param>
<returns>(unit) void, nothing</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsLight.RhinoScriptSyntax.LightDirection.Static(System.Guid)">
<summary>Returns the direction of a light object</summary>
<param name="objectId">(Guid) The light object's identifier</param>
<returns>(Vector3d) The current direction</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsLight.RhinoScriptSyntax.LightCount.Static">
<summary>Returns the number of light objects in the document</summary>
<returns>(int) the number of light objects in the document</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsLight.RhinoScriptSyntax.LightColor.Static(System.Collections.Generic.IEnumerable{System.Guid},System.Drawing.Color)">
<summary>Changes the color of multiple light</summary>
<param name="objectsIds">(Guid seq) The light objects's identifiers</param>
<param name="color">(Drawing.Color) The light's new color</param>
<returns>(unit) void, nothing</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsLight.RhinoScriptSyntax.LightColor.Static(System.Guid,System.Drawing.Color)">
<summary>Changes the color of a light</summary>
<param name="objectId">(Guid) The light object's identifier</param>
<param name="color">(Drawing.Color) The light's new color</param>
<returns>(unit) void, nothing</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsLight.RhinoScriptSyntax.LightColor.Static(System.Guid)">
<summary>Returns the color of a light</summary>
<param name="objectId">(Guid) The light object's identifier</param>
<returns>(Drawing.Color) The current color</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsLight.RhinoScriptSyntax.IsSpotLight.Static(System.Guid)">
<summary>Verifies a light object is a spot light</summary>
<param name="objectId">(Guid) The light object's identifier</param>
<returns>(bool) True or False</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsLight.RhinoScriptSyntax.IsRectangularLight.Static(System.Guid)">
<summary>Verifies a light object is a rectangular light</summary>
<param name="objectId">(Guid) The light object's identifier</param>
<returns>(bool) True or False</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsLight.RhinoScriptSyntax.IsPointLight.Static(System.Guid)">
<summary>Verifies a light object is a point light</summary>
<param name="objectId">(Guid) The light object's identifier</param>
<returns>(bool) True or False</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsLight.RhinoScriptSyntax.IsLinearLight.Static(System.Guid)">
<summary>Verifies a light object is a linear light</summary>
<param name="objectId">(Guid) The light object's identifier</param>
<returns>(bool) True or False</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsLight.RhinoScriptSyntax.IsLightReference.Static(System.Guid)">
<summary>Verifies a light object is referenced from another file</summary>
<param name="objectId">(Guid) The light object's identifier</param>
<returns>(bool) True or False</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsLight.RhinoScriptSyntax.IsLightEnabled.Static(System.Guid)">
<summary>Verifies a light object is enabled</summary>
<param name="objectId">(Guid) The light object's identifier</param>
<returns>(bool) True or False</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsLight.RhinoScriptSyntax.IsLight.Static(System.Guid)">
<summary>Verifies an object is a light object</summary>
<param name="objectId">(Guid) The light object's identifier</param>
<returns>(bool) True or False</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsLight.RhinoScriptSyntax.IsDirectionalLight.Static(System.Guid)">
<summary>Verifies a light object is a directional light</summary>
<param name="objectId">(Guid) The light object's identifier</param>
<returns>(bool) True or False</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsLight.RhinoScriptSyntax.EnableLight.Static(System.Collections.Generic.IEnumerable{System.Guid},System.Boolean)">
<summary>Enables or disables multiple light objects</summary>
<param name="objectsIds">(Guid seq) The light objects's identifiers</param>
<param name="enable">(bool) The light's enabled status</param>
<returns>(unit) void, nothing</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsLight.RhinoScriptSyntax.EnableLight.Static(System.Guid,System.Boolean)">
<summary>Enables or disables a light object</summary>
<param name="objectId">(Guid) The light object's identifier</param>
<param name="enable">(bool) The light's enabled status</param>
<returns>(unit) void, nothing</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsLight.RhinoScriptSyntax.EnableLight.Static(System.Guid)">
<summary>Get On / Off status of a light object</summary>
<param name="objectId">(Guid) The light object's identifier</param>
<returns>(bool) The current enabled status</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsLight.RhinoScriptSyntax.AddSpotLight.Static(Rhino.Geometry.Point3d,System.Double,Rhino.Geometry.Point3d)">
<summary>Adds a new spot light object to the document</summary>
<param name="origin">(Point3d) 3d origin point of the light</param>
<param name="radius">(float) Radius of the cone</param>
<param name="apexPoint">(Point3d) 3d apex point of the light</param>
<returns>(Guid) identifier of the new object</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsLight.RhinoScriptSyntax.AddRectangularLight.Static(Rhino.Geometry.Point3d,Rhino.Geometry.Point3d,Rhino.Geometry.Point3d)">
<summary>Adds a new rectangular light object to the document</summary>
<param name="origin">(Point3d) 3d origin point of the light</param>
<param name="widthPoint">(Point3d) 3d width and direction point of the light</param>
<param name="heightPoint">(Point3d) 3d height and direction point of the light</param>
<returns>(Guid) identifier of the new object</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsLight.RhinoScriptSyntax.AddPointLight.Static(Rhino.Geometry.Point3d)">
<summary>Adds a new point light object to the document</summary>
<param name="point">(Point3d) The 3d location of the point</param>
<returns>(Guid) identifier of the new object</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsLight.RhinoScriptSyntax.AddLinearLight.Static(Rhino.Geometry.Point3d,Rhino.Geometry.Point3d,System.Double)">
<summary>Adds a new linear light object to the document</summary>
<param name="startPoint">(Point3d) Starting point of the light</param>
<param name="endPoint">(Point3d) Ending point and direction of the light</param>
<param name="width">(float) Optional, Width of the light</param>
<returns>(Guid) identifier of the new object</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsLight.RhinoScriptSyntax.AddDirectionalLight.Static(Rhino.Geometry.Point3d,Rhino.Geometry.Point3d)">
<summary>Adds a new directional light object to the document</summary>
<param name="startPoint">(Point3d) Starting point of the light</param>
<param name="endPoint">(Point3d) Ending point and direction of the light</param>
<returns>(Guid) identifier of the new object</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsLine.RhinoScriptSyntax.LineTransform.Static(System.Guid,Rhino.Geometry.Transform)">
<summary>Transforms a line</summary>
<param name="lineId">(Guid) The line to transform</param>
<param name="xform">(Transform) The transformation to apply</param>
<returns>(unit) void, nothing</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsLine.RhinoScriptSyntax.LineSphereIntersection.Static(Rhino.Geometry.Line,Rhino.Geometry.Point3d,System.Double)">
<summary>Calculates the intersection of a line and a sphere</summary>
<param name="line">(Geometry.Line) The line</param>
<param name="sphereCenter">(Point3d) The center point of the sphere</param>
<param name="sphereRadius">(float) The radius of the sphere</param>
<returns>(Point3d array) list of intersection points , otherwise None</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsLine.RhinoScriptSyntax.LinePlaneIntersection.Static(Rhino.Geometry.Line,Rhino.Geometry.Plane)">
<summary>Calculates the intersection of a line and a plane</summary>
<param name="line">(Line) The line to intersect</param>
<param name="plane">(Plane) The plane to intersect</param>
<returns>(Point3d) The 3D point of intersection is successful</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsLine.RhinoScriptSyntax.LinePlane.Static(Rhino.Geometry.Line)">
<summary>Returns a plane that contains the line. The origin of the plane is at the start of
  the line. If possible, a plane parallel to the world XY, YZ, or ZX plane is returned</summary>
<param name="line">(Geometry.Line) a Line</param>
<returns>(Plane) the plane</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsLine.RhinoScriptSyntax.LineMinDistanceTo.Static(Rhino.Geometry.Line,Rhino.Geometry.Line)">
<summary>Finds the shortest distance between a line as a finite chord, and a point
  or another line</summary>
<param name="line">(Geometry.Line) Line</param>
<param name="line2">(Geometry.Line) The test line</param>
<returns>(float) A distance (D) such that if Q is any point on the line and P is any point on the other object,
 then D is smaller than Rhino.Distance(Q, P)</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsLine.RhinoScriptSyntax.LineMinDistanceTo.Static(Rhino.Geometry.Line,Rhino.Geometry.Point3d)">
<summary>Finds the shortest distance between a line as a finite chord, and a point
  or another line</summary>
<param name="line">(Geometry.Line) Line</param>
<param name="point">(Point3d) The test point</param>
<returns>(float) A distance (D) such that if Q is any point on the line and P is any point on the other object,
 then D is smaller than Rhino.Distance(Q, P)</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsLine.RhinoScriptSyntax.LineMaxDistanceTo.Static(Rhino.Geometry.Line,Rhino.Geometry.Line)">
<summary>Finds the longest distance between a line as a finite chord, and a line</summary>
<param name="line">(Geometry.Line) Line</param>
<param name="line2">(Geometry.Line) The test line</param>
<returns>(float) A distance (D) such that if Q is any point on the line and P is any point on the other object,
 then D is bigger than Rhino.Distance(Q, P)</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsLine.RhinoScriptSyntax.LineMaxDistanceTo.Static(Rhino.Geometry.Line,Rhino.Geometry.Point3d)">
<summary>Finds the longest distance between a line as a finite chord, and a point</summary>
<param name="line">(Geometry.Line) Line</param>
<param name="point">(Point3d) The test point or test line</param>
<returns>(float) A distance (D) such that if Q is any point on the line and P is any point on the other object,
 then D is bigger than Rhino.Distance(Q, P)</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsLine.RhinoScriptSyntax.LineLineIntersection.Static(Rhino.Geometry.Line,Rhino.Geometry.Line)">
<summary>Calculates the intersection of two non-parallel lines. The lines are considered endless.
  If the two lines do not actually intersect the closest point on each is returned</summary>
<param name="lineA">(Geometry.Line) LineA of lines to intersect</param>
<param name="lineB">(Geometry.Line) LineB of lines to intersect</param>
<returns>(Point3d * Point3d) containing a point on the first line and a point on the second line</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsLine.RhinoScriptSyntax.LineIsFartherThan.Static(Rhino.Geometry.Line,System.Double,Rhino.Geometry.Line)">
<summary>Determines if the shortest distance from a line to a point or another
  line is greater than a specified distance</summary>
<param name="line">(Geometry.Line) a Geometry.Line</param>
<param name="distance">(float) The distance</param>
<param name="line2">(Geometry.Line) The test line</param>
<returns>(bool) True if the shortest distance from the line to the other project is
  greater than distance, False otherwise</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsLine.RhinoScriptSyntax.LineIsFartherThan.Static(Rhino.Geometry.Line,System.Double,Rhino.Geometry.Point3d)">
<summary>Determines if the shortest distance from a line to a point or another
  line is greater than a specified distance</summary>
<param name="line">(Geometry.Line) a Geometry.Line</param>
<param name="distance">(float) The distance</param>
<param name="point">(Point3d) The test point</param>
<returns>(bool) True if the shortest distance from the line to the other project is
  greater than distance, False otherwise</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsLine.RhinoScriptSyntax.LineCylinderIntersection.Static(Rhino.Geometry.Line,Rhino.Geometry.Plane,System.Double,System.Double)">
<summary>Calculates the intersection of a line and a cylinder</summary>
<param name="line">(Geometry.Line) The line to intersect</param>
<param name="cylinderPlane">(Plane) Base plane of the cylinder</param>
<param name="cylinderHeight">(float) Height of the cylinder</param>
<param name="cylinderRadius">(float) Radius of the cylinder</param>
<returns>(Point3d array) list of intersection points (0, 1, or 2 points)</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsLine.RhinoScriptSyntax.LineClosestPoint.Static(Rhino.Geometry.Line,Rhino.Geometry.Point3d)">
<summary>Finds the point on an INFINITE line (ray) that is closest to a test point</summary>
<param name="line">(Geometry.Line) the line to be considered infinite</param>
<param name="testPoint">(Point3d) The test point</param>
<returns>(Point3d) the point on the infinite line (ray) that is closest to the test point</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsLine.RhinoScriptSyntax.LineClosestPointFinite.Static(Rhino.Geometry.Line,Rhino.Geometry.Point3d)">
<summary>Finds the point on an FINITE line that is closest to a test point</summary>
<param name="line">(Geometry.Line) the finite line</param>
<param name="testPoint">(Point3d) List of 3 numbers or Point3d.  The test point</param>
<returns>(Point3d) the point on the finite line that is closest to the test point</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsLinetype.RhinoScriptSyntax.LinetypeNames.Static">
<summary>Returns names of all linetypes in the document</summary>
<returns>(string ResizeArray) list of linetype names</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsLinetype.RhinoScriptSyntax.LinetypeCount.Static">
<summary>Returns number of linetypes in the document</summary>
<returns>(int) the number of linetypes in the document</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsLinetype.RhinoScriptSyntax.IsLinetypeReference.Static(System.String)">
<summary>Verifies that an existing linetype is from a reference file</summary>
<param name="name">(string) The name of an existing linetype</param>
<returns>(bool) True or False</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsLinetype.RhinoScriptSyntax.IsLinetype.Static(System.String)">
<summary>Verifies the existance of a linetype in the document</summary>
<param name="name">(string) The name of an existing linetype</param>
<returns>(bool) True or False</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsMaterial.RhinoScriptSyntax.ResetMaterial.Static(System.Int32)">
<summary>Resets a material to Rhino's default material</summary>
<param name="materialIndex">(int) Zero based material index</param>
<returns>(bool) True or False indicating success or failure</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsMaterial.RhinoScriptSyntax.MaterialTransparencyMap.Static(System.Int32,System.String)">
<summary>Modifies a material's transparency bitmap filename</summary>
<param name="materialIndex">(int) Zero based material index</param>
<param name="filename">(string) The transparency bitmap filename</param>
<returns>(unit) void, nothing</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsMaterial.RhinoScriptSyntax.MaterialTransparencyMap.Static(System.Int32)">
<summary>Returns a material's transparency bitmap filename</summary>
<param name="materialIndex">(int) Zero based material index</param>
<returns>(string option) The current transparency bitmap filename</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsMaterial.RhinoScriptSyntax.MaterialTransparency.Static(System.Int32,System.Double)">
<summary>Modifies a material's transparency value</summary>
<param name="materialIndex">(int) Zero based material index</param>
<param name="transparency">(float) The new transparency value. A material's transparency value ranges from 0.0 to 1.0, with
  0.0 being opaque and 1.0 being transparent</param>
<returns>(unit) void, nothing</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsMaterial.RhinoScriptSyntax.MaterialTransparency.Static(System.Int32)">
<summary>Returns a material's transparency value</summary>
<param name="materialIndex">(int) Zero based material index</param>
<returns>(float) The current material transparency value
  0.0 being opaque and 1.0 being transparent</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsMaterial.RhinoScriptSyntax.MaterialTexture.Static(System.Int32,System.String)">
<summary>Modifies a material's texture bitmap filename</summary>
<param name="materialIndex">(int) Zero based material index</param>
<param name="filename">(string) The texture bitmap filename</param>
<returns>(unit) void, nothing</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsMaterial.RhinoScriptSyntax.MaterialTexture.Static(System.Int32)">
<summary>Returns a material's texture bitmap filename</summary>
<param name="materialIndex">(int) Zero based material index</param>
<returns>(string option) The current texture bitmap filename</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsMaterial.RhinoScriptSyntax.MaterialShine.Static(System.Int32,System.Double)">
<summary>Modifies a material's shine value</summary>
<param name="materialIndex">(int) Zero based material index</param>
<param name="shine">(float) The new shine value. A material's shine value ranges from 0.0 to 255.0, with
  0.0 being matte and 255.0 being glossy</param>
<returns>(unit) void, nothing</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsMaterial.RhinoScriptSyntax.MaterialShine.Static(System.Int32)">
<summary>Returns a material's shine value</summary>
<param name="materialIndex">(int) Zero based material index</param>
<returns>(float) The current material shine value
  0.0 being matte and 255.0 being glossy</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsMaterial.RhinoScriptSyntax.MaterialReflectiveColor.Static(System.Int32,System.Drawing.Color)">
<summary>Modifies a material's reflective color</summary>
<param name="materialIndex">(int) Zero based material index</param>
<param name="color">(Drawing.Color) The new color value</param>
<returns>(unit) void, nothing</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsMaterial.RhinoScriptSyntax.MaterialReflectiveColor.Static(System.Int32)">
<summary>Returns a material's reflective color</summary>
<param name="materialIndex">(int) Zero based material index</param>
<returns>(Drawing.Color) The current material reflective color</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsMaterial.RhinoScriptSyntax.MaterialName.Static(System.Int32,System.String)">
<summary>Modifies a material's user defined name</summary>
<param name="materialIndex">(int) Zero based material index</param>
<param name="name">(string) The new name</param>
<returns>(unit) void, nothing</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsMaterial.RhinoScriptSyntax.MaterialName.Static(System.Int32)">
<summary>Returns a material's user defined name</summary>
<param name="materialIndex">(int) Zero based material index</param>
<returns>(string) The current material name</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsMaterial.RhinoScriptSyntax.MaterialEnvironmentMap.Static(System.Int32,System.String)">
<summary>Modifies a material's environment bitmap filename</summary>
<param name="materialIndex">(int) Zero based material index</param>
<param name="filename">(string) The environment bitmap filename</param>
<returns>(unit) void, nothing</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsMaterial.RhinoScriptSyntax.MaterialEnvironmentMap.Static(System.Int32)">
<summary>Returns a material's environment bitmap filename</summary>
<param name="materialIndex">(int) Zero based material index</param>
<returns>(string option) The current environment bitmap filename</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsMaterial.RhinoScriptSyntax.MaterialColor.Static(System.Int32,System.Drawing.Color)">
<summary>Modifies a material's diffuse color</summary>
<param name="materialIndex">(int) Zero based material index</param>
<param name="color">(Drawing.Color) The new color value</param>
<returns>(unit) void, nothing</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsMaterial.RhinoScriptSyntax.MaterialColor.Static(System.Int32)">
<summary>Returns a material's diffuse color</summary>
<param name="materialIndex">(int) Zero based material index</param>
<returns>(Drawing.Color) The current material color</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsMaterial.RhinoScriptSyntax.MaterialBump.Static(System.Int32,System.String)">
<summary>Modifies a material's bump bitmap filename</summary>
<param name="materialIndex">(int) Zero based material index</param>
<param name="filename">(string) The bump bitmap filename</param>
<returns>(unit) void, nothing</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsMaterial.RhinoScriptSyntax.MaterialBump.Static(System.Int32)">
<summary>Returns a material's bump bitmap filename</summary>
<param name="materialIndex">(int) Zero based material index</param>
<returns>(string option) The current bump bitmap filename </returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsMaterial.RhinoScriptSyntax.MatchMaterial.Static(System.Guid,System.Collections.Generic.IEnumerable{System.Guid})">
<summary>Copies the material definition from one material to one or more objects</summary>
<param name="source">(Guid) Source material index -or- identifier of the source object.
  The object must have a material assigned</param>
<param name="destination">(Guid seq) Id of the destination object</param>
<returns>(unit) void, nothing</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsMaterial.RhinoScriptSyntax.IsMaterialReference.Static(System.Int32)">
<summary>Verifies a material is referenced from another file</summary>
<param name="materialIndex">(int) The zero-based material index</param>
<returns>(bool) True or False indicating success or failure</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsMaterial.RhinoScriptSyntax.IsMaterialDefault.Static(System.Int32)">
<summary>Verifies a material is a copy of Rhino's built-in "default" material.
  The default material is used by objects and layers that have not been
  assigned a material</summary>
<param name="materialIndex">(int) The zero-based material index</param>
<returns>(bool) True or False indicating success or failure</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsMaterial.RhinoScriptSyntax.CopyMaterial.Static(System.Int32,System.Int32)">
<summary>Copies definition of a source material to a destination material</summary>
<param name="sourceIndex">(int) Source index of materials to copy</param>
<param name="destinationIndex">(int) Destination index materials to copy</param>
<returns>(bool) True or False indicating success or failure</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsMaterial.RhinoScriptSyntax.AddMaterialToObject.Static(System.Guid)">
<summary>Adds material to an object and returns the new material's index. If the
  object already has a material, the the object's current material index is returned</summary>
<param name="objectId">(Guid) Identifier of an object</param>
<returns>(int) material index of the object</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsMaterial.RhinoScriptSyntax.AddMaterialToLayer.Static(System.String)">
<summary>Add material to a layer and returns the new material's index. If the
  layer already has a material, then the layer's current material index is
  returned</summary>
<param name="layer">(string) Name of an existing layer</param>
<returns>(int) Material index of the layer</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsMesh.RhinoScriptSyntax.UnifyMeshNormals.Static(System.Guid)">
<summary>Fixes inconsistencies in the directions of faces of a mesh</summary>
<param name="objectId">(Guid) Identifier of a mesh object</param>
<returns>(int) the number of faces that were modified</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsMesh.RhinoScriptSyntax.SplitDisjointMesh.Static(System.Guid,System.Boolean)">
<summary>Splits up a mesh into its unconnected pieces</summary>
<param name="objectId">(Guid) Identifier of a mesh object</param>
<param name="deleteInput">(bool) Optional, Default Value: <c>false</c>
Delete the input object</param>
<returns>(Guid ResizeArray) identifiers for the new meshes</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsMesh.RhinoScriptSyntax.PullCurveToMesh.Static(System.Guid,System.Guid)">
<summary>Pulls a curve to a mesh. The function makes a polyline approximation of
  the input curve and gets the closest point on the mesh for each point on
  the polyline. Then it "connects the points" to create a polyline on the mesh</summary>
<param name="meshId">(Guid) Identifier of mesh that pulls</param>
<param name="curveId">(Guid) Identifier of curve to pull</param>
<returns>(Guid) identifier new curve on success</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsMesh.RhinoScriptSyntax.MeshVolumeCentroid.Static(System.Guid)">
<summary>Calculates the volume centroid of a mesh</summary>
<param name="objectId">(Guid) Identifier of a mesh object</param>
<returns>(Point3d) Point3d representing the volume centroid</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsMesh.RhinoScriptSyntax.MeshVolume.Static(System.Collections.Generic.IEnumerable{System.Guid})">
<summary>Returns the approximate volume of one or more closed meshes</summary>
<param name="objectIds">(Guid seq) Identifiers of one or more mesh objects</param>
<returns>(float)  total volume of all meshes</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsMesh.RhinoScriptSyntax.MeshVertices.Static(System.Guid)">
<summary>Returns the vertices of a mesh</summary>
<param name="objectId">(Guid) Identifier of a mesh object</param>
<returns>(Point3d ResizeArray) vertex points in the mesh</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsMesh.RhinoScriptSyntax.MeshVertexNormals.Static(System.Guid)">
<summary>Returns the vertex unit normal for each vertex of a mesh</summary>
<param name="meshId">(Guid) Identifier of a mesh object</param>
<returns>(Vector3d ResizeArray) of vertex normals, (empty list if no normals exist)</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsMesh.RhinoScriptSyntax.MeshVertexFaces.Static(System.Guid,System.Int32)">
<summary>Returns the mesh faces that share a specified mesh vertex</summary>
<param name="meshId">(Guid) Identifier of a mesh object</param>
<param name="vertexIndex">(int) Index of the mesh vertex to find faces for</param>
<returns>(int array) face indices on success</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsMesh.RhinoScriptSyntax.MeshVertexCount.Static(System.Guid)">
<summary>Returns the vertex count of a mesh</summary>
<param name="objectId">(Guid) Identifier of a mesh object</param>
<returns>(int) The number of mesh vertices </returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsMesh.RhinoScriptSyntax.MeshVertexColors.Static(System.Guid,System.Collections.Generic.IEnumerable{System.Drawing.Color})">
<summary>Modifies vertex colors of a mesh</summary>
<param name="meshId">(Guid) Identifier of a mesh object</param>
<param name="colors">(Drawing.Color seq), optional) A list of color values. Note, for each vertex, there must
  be a corresponding vertex color. If the value is null or empty list , then any
  existing vertex colors will be removed from the mesh</param>
<returns>(unit) void, nothing</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsMesh.RhinoScriptSyntax.MeshVertexColors.Static(System.Guid)">
<summary>Returns vertex colors of a mesh</summary>
<param name="meshId">(Guid) Identifier of a mesh object</param>
<returns>(Drawing.Color ResizeArray) The current vertex colors</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsMesh.RhinoScriptSyntax.MeshTriangleCount.Static(System.Guid)">
<summary>Returns number of triangular faces of a mesh</summary>
<param name="objectId">(Guid) Identifier of a mesh object</param>
<returns>(int) The number of triangular mesh faces</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsMesh.RhinoScriptSyntax.MeshToNurb.Static(System.Guid,System.Boolean,System.Boolean)">
<summary>Duplicates each polygon in a mesh with a NURBS surface. The resulting
  surfaces are then joined into a polysurface and added to the document</summary>
<param name="objectId">(Guid) Identifier of a mesh object</param>
<param name="trimmedTriangles">(bool) Optional, Default Value: <c>true</c>
If True, triangles in the mesh will be
  represented by a trimmed plane</param>
<param name="deleteInput">(bool) Optional, Default Value: <c>false</c>
Delete input object</param>
<returns>(Guid ResizeArray) identifiers for the new breps on success</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsMesh.RhinoScriptSyntax.MeshQuadsToTriangles.Static(System.Guid)">
<summary>Converts a mesh object's quad faces to triangles</summary>
<param name="objectId">(Guid) Identifier of a mesh object</param>
<returns>(bool) True or False indicating success or failure</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsMesh.RhinoScriptSyntax.MeshQuadCount.Static(System.Guid)">
<summary>Returns the number of quad faces of a mesh object</summary>
<param name="objectId">(Guid) Identifier of a mesh object</param>
<returns>(int) the number of quad mesh faces</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsMesh.RhinoScriptSyntax.MeshOutline.Static(System.Collections.Generic.IEnumerable{System.Guid},System.String)">
<summary>Creates polyline curve outlines of mesh objects</summary>
<param name="objectIds">(Guid seq) Identifiers of meshes to outline</param>
<param name="view">(string) Optional, Default Value: <c>Top View</c>
View to use for outline direction</param>
<returns>(Guid ResizeArray) polyline curve identifiers on success</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsMesh.RhinoScriptSyntax.MeshOffset.Static(System.Guid,System.Double)">
<summary>Makes a new mesh with vertices offset at a distance in the opposite
  direction of the existing vertex normals</summary>
<param name="meshId">(Guid) Identifier of a mesh object</param>
<param name="distance">(float) The distance to offset</param>
<returns>(Guid) identifier of the new mesh object</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsMesh.RhinoScriptSyntax.MeshNakedEdgePoints.Static(System.Guid)">
<summary>Identifies the naked edge points of a mesh object. This function shows
  where mesh vertices are not completely surrounded by faces. Joined
  meshes, such as are made by MeshBox, have naked mesh edge points where
  the sub-meshes are joined</summary>
<param name="objectId">(Guid) Identifier of a mesh object</param>
<returns>(bool array) of boolean values that represent whether or not a mesh vertex is
  naked or not. The number of elements in the list will be equal to
  the value returned by MeshVertexCount. In which case, the list will
  identify the naked status for each vertex returned by MeshVertices</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsMesh.RhinoScriptSyntax.MeshMeshIntersection.Static(System.Guid,System.Guid,System.Double)">
<summary>Calculates the intersections of a mesh object with another mesh object</summary>
<param name="mesh1">(Guid) Mesh1</param>
<param name="mesh2">(Guid) Mesh2</param>
<param name="tolerance">(float) Optional, Default Value: <c>RhinoMath.ZeroTolerance</c>
The intersection tolerance</param>
<returns>(Polyline array) of points that define the vertices of the intersection curves</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsMesh.RhinoScriptSyntax.MeshHasVertexNormals.Static(System.Guid)">
<summary>Verifies a mesh object has vertex normals</summary>
<param name="objectId">(Guid) Identifier of a mesh object</param>
<returns>(bool) True , otherwise False</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsMesh.RhinoScriptSyntax.MeshHasVertexColors.Static(System.Guid)">
<summary>Verifies a mesh object has vertex colors</summary>
<param name="objectId">(Guid) Identifier of a mesh object</param>
<returns>(bool) True , otherwise False</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsMesh.RhinoScriptSyntax.MeshHasTextureCoordinates.Static(System.Guid)">
<summary>Verifies a mesh object has texture coordinates</summary>
<param name="objectId">(Guid) Identifier of a mesh object</param>
<returns>(bool) True , otherwise False</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsMesh.RhinoScriptSyntax.MeshHasFaceNormals.Static(System.Guid)">
<summary>Verifies a mesh object has face normals</summary>
<param name="objectId">(Guid) Identifier of a mesh object</param>
<returns>(bool) True , otherwise False</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsMesh.RhinoScriptSyntax.MeshFaceVertices.Static(System.Guid)">
<summary>Returns the vertex indices of all faces of a mesh object</summary>
<param name="objectId">(Guid) Identifier of a mesh object</param>
<returns>((int*int*int*int) ResizeArray) containing tuples of 4 numbers that define the vertex indices for
  each face of the mesh. Both quad and triangle faces are returned. If the
  third and fourth vertex indices are identical, the face is a triangle</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsMesh.RhinoScriptSyntax.MeshNgonFaceVertices.Static(System.Guid)">
<summary>Returns the vertex indices of all faces of a Ngon mesh object</summary>
<param name="objectId">(Guid) Identifier of a mesh object</param>
<returns>(int ResizeArray ResizeArray) containing a nested List that define the vertex indices for
  each face of the mesh. Ngons, quad and triangle faces are returned</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsMesh.RhinoScriptSyntax.MeshFaces.Static(System.Guid,System.Boolean)">
<summary>Returns face vertices of a mesh</summary>
<param name="objectId">(Guid) Identifier of a mesh object</param>
<param name="faceType">(bool) Optional, Default Value: <c>true</c>
The face type to be returned. True = both triangles
  and quads. False = Quads are broken down into triangles</param>
<returns>(Point3d ResizeArray) 3D points that define the face vertices of the mesh. If
  faceType is True, then faces are returned as both quads and triangles
  (4 3D points). For triangles, the third and fourth vertex will be
  identical. If faceType is False, then faces are returned as only
  triangles(3 3D points). Quads will be converted to triangles</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsMesh.RhinoScriptSyntax.MeshFaceNormals.Static(System.Guid)">
<summary>Returns the face unit normal for each face of a mesh object</summary>
<param name="meshId">(Guid) Identifier of a mesh object</param>
<returns>(Vector3d ResizeArray) 3D vectors that define the face unit normals of the mesh</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsMesh.RhinoScriptSyntax.MeshFaceCount.Static(System.Guid)">
<summary>Returns total face count of a mesh object</summary>
<param name="objectId">(Guid) Identifier of a mesh object</param>
<returns>(int) the number of mesh faces</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsMesh.RhinoScriptSyntax.MeshFaceCenters.Static(System.Guid)">
<summary>Returns the center of each face of the mesh object</summary>
<param name="meshId">(Guid) Identifier of a mesh object</param>
<returns>(Point3d ResizeArray) points defining the center of each face</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsMesh.RhinoScriptSyntax.MeshClosestPoint.Static(System.Guid,Rhino.Geometry.Point3d,System.Double)">
<summary>Returns the point on a mesh that is closest to a test point</summary>
<param name="objectId">(Guid) Identifier of a mesh object</param>
<param name="point">(Point3d) Point to test</param>
<param name="maximumDistance">(float) Optional, Upper bound used for closest point calculation.
  If you are only interested in finding a point Q on the mesh when
  point.DistanceTo(Q) is smaller than maximumDistance, then set maximumDistance to
  that value</param>
<returns>(Point3d * int) containing the results of the calculation where
  [0] = the 3-D point on the mesh
  [1] = the index of the mesh face on which the 3-D point lies</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsMesh.RhinoScriptSyntax.MeshBooleanUnion.Static(System.Collections.Generic.IEnumerable{System.Guid},System.Boolean)">
<summary>Performs boolean union operation on a set of input meshes</summary>
<param name="meshIds">(Guid seq) Identifiers of meshes</param>
<param name="deleteInput">(bool) Optional, Default Value: <c>true</c>
Delete the input meshes</param>
<returns>(Guid ResizeArray) identifiers of new meshes</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsMesh.RhinoScriptSyntax.MeshBooleanSplit.Static(System.Collections.Generic.IEnumerable{System.Guid},System.Collections.Generic.IEnumerable{System.Guid},System.Boolean)">
<summary>Performs boolean split operation on two sets of input meshes</summary>
<param name="input0">(Guid seq) Meshes to split from</param>
<param name="input1">(Guid seq) Meshes to split with</param>
<param name="deleteInput">(bool) Optional, Default Value: <c>true</c>
Delete the input meshes</param>
<returns>(Guid ResizeArray) identifiers of new meshes on success</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsMesh.RhinoScriptSyntax.MeshBooleanIntersection.Static(System.Collections.Generic.IEnumerable{System.Guid},System.Collections.Generic.IEnumerable{System.Guid},System.Boolean)">
<summary>Performs boolean intersection operation on two sets of input meshes</summary>
<param name="input0">(Guid seq) Meshes to intersect</param>
<param name="input1">(Guid seq) Meshes to intersect</param>
<param name="deleteInput">(bool) Optional, Default Value: <c>true</c>
Delete the input meshes</param>
<returns>(Guid ResizeArray) identifiers of new meshes on success</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsMesh.RhinoScriptSyntax.MeshBooleanDifference.Static(System.Collections.Generic.IEnumerable{System.Guid},System.Collections.Generic.IEnumerable{System.Guid},System.Boolean)">
<summary>Performs boolean difference operation on two sets of input meshes</summary>
<param name="input0">(Guid seq) Meshes to subtract from</param>
<param name="input1">(Guid seq) Meshes to subtract with</param>
<param name="deleteInput">(bool) Optional, Default Value: <c>true</c>
Delete the input meshes</param>
<returns>(Guid ResizeArray) identifiers of newly created meshes</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsMesh.RhinoScriptSyntax.MeshAreaCentroid.Static(System.Guid)">
<summary>Calculates the area centroid of a mesh object</summary>
<param name="objectId">(Guid) Identifier of a mesh object</param>
<returns>(Point3d) representing the area centroid</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsMesh.RhinoScriptSyntax.MeshArea.Static(System.Guid)">
<summary>Returns approximate area of onemesh object</summary>
<param name="objectId">(Guid) Identifier of a mesh objects</param>
<returns>(float) total area of mesh</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsMesh.RhinoScriptSyntax.JoinMeshes.Static(System.Collections.Generic.IEnumerable{System.Guid},System.Boolean)">
<summary>Joins two or or more mesh objects together</summary>
<param name="objectIds">(Guid seq) Identifiers of two or more mesh objects</param>
<param name="deleteInput">(bool) Optional, Default Value: <c>false</c>
Delete input after joining</param>
<returns>(Guid) identifier of newly created mesh on success</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsMesh.RhinoScriptSyntax.IsPointOnMesh.Static(System.Guid,Rhino.Geometry.Point3d,System.Double)">
<summary>Verifies a point is on a mesh</summary>
<param name="objectId">(Guid) Identifier of a mesh object</param>
<param name="point">(Point3d) Test point</param>
<param name="tolerance">(float) Optional, Defalut Value <c>RhinoMath.SqrtEpsilon</c>
  The testing tolerance </param>
<returns>(bool) True , otherwise False</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsMesh.RhinoScriptSyntax.IsMeshManifold.Static(System.Guid)">
<summary>Verifies a mesh object is manifold. A mesh for which every edge is shared
  by at most two faces is called manifold. If a mesh has at least one edge
  that is shared by more than two faces, then that mesh is called non-manifold</summary>
<param name="objectId">(Guid) Identifier of a mesh object</param>
<returns>(bool) True, otherwise False</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsMesh.RhinoScriptSyntax.IsMeshClosed.Static(System.Guid)">
<summary>Verifies a mesh object is closed</summary>
<param name="objectId">(Guid) Identifier of a mesh object</param>
<returns>(bool) True , otherwise False</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsMesh.RhinoScriptSyntax.IsMesh.Static(System.Guid)">
<summary>Verifies if an object is a mesh</summary>
<param name="objectId">(Guid) The object's identifier</param>
<returns>(bool) True , otherwise False</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsMesh.RhinoScriptSyntax.ExplodeMeshes.Static(System.Collections.Generic.IEnumerable{System.Guid},System.Boolean)">
<summary>Explodes a mesh object, or mesh objects int submeshes. A submesh is a
  collection of mesh faces that are contained within a closed loop of
  unwelded mesh edges. Unwelded mesh edges are where the mesh faces that
  share the edge have unique mesh vertices (not mesh topology vertices)
  at both ends of the edge</summary>
<param name="meshIds">(Guid seq) List of mesh identifiers</param>
<param name="delete">(bool) Optional, Default Value: <c>false</c>
Delete the input meshes</param>
<returns>(Guid ResizeArray) List of resulting objects after explode</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsMesh.RhinoScriptSyntax.DuplicateMeshBorder.Static(System.Guid)">
<summary>Creates curves that duplicates a mesh border</summary>
<param name="meshId">(Guid) Identifier of a mesh object</param>
<returns>(Guid ResizeArray) list of curve ids on success</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsMesh.RhinoScriptSyntax.DisjointMeshCount.Static(System.Guid)">
<summary>Returns number of meshes that could be created by calling SplitDisjointMesh</summary>
<param name="objectId">(Guid) Identifier of a mesh object</param>
<returns>(int) The number of meshes that could be created</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsMesh.RhinoScriptSyntax.CurveMeshIntersection.Static(System.Guid,System.Guid)">
<summary>Calculates the intersection of a curve object and a mesh object</summary>
<param name="curveId">(Guid) Identifier of a curve object</param>
<param name="meshId">(Guid) Identifier or a mesh object</param>
<returns>(Point3d array * int array) two arrays as tuple:
      [0] = point of intersection
      [1] = mesh face index where intersection lies</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsMesh.RhinoScriptSyntax.AddPlanarMesh.Static(System.Guid,System.Boolean)">
<summary>Creates a planar mesh from a closed, planar curve</summary>
<param name="objectId">(Guid) Identifier of a closed, planar curve</param>
<param name="deleteInput">(bool) Optional, Default Value: <c>false</c>
If True, delete the input curve defined by objectId</param>
<returns>(Guid) id of the new mesh on success</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsMesh.RhinoScriptSyntax.AddMesh.Static(System.Collections.Generic.IEnumerable{Rhino.Geometry.Point3d},System.Collections.Generic.IEnumerable{System.Collections.Generic.IList{System.Int32}},System.Collections.Generic.IEnumerable{Rhino.Geometry.Vector3f},System.Collections.Generic.IEnumerable{Rhino.Geometry.Point2f},System.Collections.Generic.IEnumerable{System.Drawing.Color})">
<summary>Add a mesh object to the document</summary>
<param name="vertices">(Point3d seq) List of 3D points defining the vertices of the mesh</param>
<param name="faceVertices">(int IList seq) List containing lists of 3 or 4 numbers that define the
  vertex indices for each face of the mesh. If the third a fourth vertex
    indices of a face are identical, a triangular face will be created</param>
<param name="vertexNormals">(Vector3f seq) Optional, List of 3D vectors defining the vertex normals of
  the mesh. Note, for every vertex, there must be a corresponding vertex
  normal</param>
<param name="textureCoordinates">(Point2f seq) Optional, List of 2D texture coordinates. For every
  vertex, there must be a corresponding texture coordinate</param>
<param name="vertexColors">(Drawing.Color seq) Optional, A list of color values. For every vertex,
  there must be a corresponding vertex color</param>
<returns>(Guid) Identifier of the new object</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsObject.RhinoScriptSyntax.UnSelectObject.Static(System.Collections.Generic.IEnumerable{System.Guid})">
<summary>Unselects multiple selected objects</summary>
<param name="objectIds">(Guid seq) Identifiers of the objects to unselect</param>
<returns>(unit) void, nothing</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsObject.RhinoScriptSyntax.UnSelectObject.Static(System.Guid)">
<summary>Unselects a single selected object</summary>
<param name="objectId">(Guid) Id of object to unselect</param>
<returns>(unit) void, nothing</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsObject.RhinoScriptSyntax.UnlockObject.Static(System.Collections.Generic.IEnumerable{System.Guid})">
<summary>Unlocks one or more objects. Locked objects are visible, and can be
  snapped to, but they cannot be selected</summary>
<param name="objectIds">(Guid seq) The identifiers of objects</param>
<returns>(unit) void, nothing</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsObject.RhinoScriptSyntax.UnlockObject.Static(System.Guid)">
<summary>Unlocks an object. Locked objects are visible, and can be snapped to,
  but they cannot be selected</summary>
<param name="objectId">(Guid) The identifier of an object</param>
<returns>(unit) void, nothing</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsObject.RhinoScriptSyntax.ShowObject.Static(System.Collections.Generic.IEnumerable{System.Guid})">
<summary>Shows one or more objects. Hidden objects are not visible, cannot be
  snapped to and cannot be selected</summary>
<param name="objectIds">(Guid seq) Ids of objects to show</param>
<returns>(unit) void, nothing</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsObject.RhinoScriptSyntax.ShowObject.Static(System.Guid)">
<summary>Shows a previously hidden object. Hidden objects are not visible, cannot
  be snapped to and cannot be selected</summary>
<param name="objectId">(Guid) Representing id of object to show</param>
<returns>(unit) void, nothing</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsObject.RhinoScriptSyntax.ShearObject.Static(System.Collections.Generic.IEnumerable{System.Guid},Rhino.Geometry.Point3d,Rhino.Geometry.Point3d,System.Double,System.Boolean)">
<summary>Shears one or more objects</summary>
<param name="objectIds">(Guid seq) The identifiers objects to shear</param>
<param name="origin">(Point3d) Origin point of the shear transformation</param>
<param name="referencePoint">(Point3d) Reference point of the shear transformation</param>
<param name="angleDegrees">(float) The shear angle in degrees</param>
<param name="copy">(bool) Optional, Default Value: <c>false</c>
Copy the objects</param>
<returns>(Guid ResizeArray) identifiers of the sheared objects</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsObject.RhinoScriptSyntax.ShearObject.Static(System.Guid,Rhino.Geometry.Point3d,Rhino.Geometry.Point3d,System.Double,System.Boolean)">
<summary>Perform a shear transformation on a single object</summary>
<param name="objectId">(Guid) The identifier of an object</param>
<param name="origin">(Point3d) Origin point of the shear transformation</param>
<param name="referencePoint">(Point3d) Reference point of the shear transformation</param>
<param name="angleDegrees">(float) The shear angle in degrees</param>
<param name="copy">(bool) Optional, Default Value: <c>false</c>
Copy the objects</param>
<returns>(Guid) Identifier of the sheared object</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsObject.RhinoScriptSyntax.SelectObject.Static(System.Collections.Generic.IEnumerable{System.Guid})">
<summary>Selects one or more objects</summary>
<param name="objectIds">(Guid seq) Identifiers of the objects to select</param>
<returns>(unit) void, nothing</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsObject.RhinoScriptSyntax.SelectObject.Static(System.Guid)">
<summary>Selects a single object</summary>
<param name="objectId">(Guid) The identifier of the object to select</param>
<returns>(unit) void, nothing</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsObject.RhinoScriptSyntax.ScaleObject.Static(System.Collections.Generic.IEnumerable{System.Guid},Rhino.Geometry.Point3d,System.Double,System.Boolean)">
<summary>Scales one or more objects. Uniform scale transformation. Scaling is based on the WorldXY plane</summary>
<param name="objectIds">(Guid seq) Identifiers of objects to scale</param>
<param name="origin">(Point3d) The origin of the scale transformation</param>
<param name="scale">(float) One numbers that identify the X, Y, and Z axis scale factors to apply</param>
<param name="copy">(bool) Optional, Default Value: <c>false</c>
Copy the objects</param>
<returns>(Guid ResizeArray) identifiers of the scaled objects</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsObject.RhinoScriptSyntax.ScaleObject.Static(System.Collections.Generic.IEnumerable{System.Guid},Rhino.Geometry.Point3d,System.Tuple{System.Double,System.Double,System.Double},System.Boolean)">
<summary>Scales one or more objects. Can be used to perform a uniform or non-
  uniform scale transformation. Scaling is based on the WorldXY plane</summary>
<param name="objectIds">(Guid seq) Identifiers of objects to scale</param>
<param name="origin">(Point3d) The origin of the scale transformation</param>
<param name="scale">(float*float*float) Three numbers that identify the X, Y, and Z axis scale factors to apply</param>
<param name="copy">(bool) Optional, Default Value: <c>false</c>
Copy the objects</param>
<returns>(Guid ResizeArray) identifiers of the scaled objects</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsObject.RhinoScriptSyntax.ScaleObject.Static(System.Guid,Rhino.Geometry.Point3d,System.Double,System.Boolean)">
<summary>Scales a single object. Uniform scale transformation. Scaling is based on the WorldXY plane</summary>
<param name="objectId">(Guid) The identifier of an object</param>
<param name="origin">(Point3d) The origin of the scale transformation</param>
<param name="scale">(float) One numbers that identify the X, Y, and Z axis scale factors to apply</param>
<param name="copy">(bool) Optional, Default Value: <c>false</c>
Copy the object</param>
<returns>(Guid) Identifier of the scaled object</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsObject.RhinoScriptSyntax.ScaleObject.Static(System.Guid,Rhino.Geometry.Point3d,System.Tuple{System.Double,System.Double,System.Double},System.Boolean)">
<summary>Scales a single object. Can be used to perform a uniform or non-uniform
  scale transformation. Scaling is based on the WorldXY plane</summary>
<param name="objectId">(Guid) The identifier of an object</param>
<param name="origin">(Point3d) The origin of the scale transformation</param>
<param name="scale">(float*float*float) Three numbers that identify the X, Y, and Z axis scale factors to apply</param>
<param name="copy">(bool) Optional, Default Value: <c>false</c>
Copy the object</param>
<returns>(Guid) Identifier of the scaled object</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsObject.RhinoScriptSyntax.RotateObject.Static(System.Collections.Generic.IEnumerable{System.Guid},Rhino.Geometry.Point3d,System.Double,Rhino.Geometry.Vector3d,System.Boolean)">
<summary>Rotates multiple objects</summary>
<param name="objectIds">(Guid seq) Identifiers of objects to rotate</param>
<param name="centerPoint">(Point3d) The center of rotation</param>
<param name="rotationAngle">(float) In degrees</param>
<param name="axis">(Vector3d) Optional, Default Value: <c>Vector3d.ZAxis</c>
Axis of rotation, If omitted, the Vector3d.ZAxis is used as the rotation axis</param>
<param name="copy">(bool) Optional, Default Value: <c>false</c>
Copy the object</param>
<returns>(Guid ResizeArray) identifiers of the rotated objects</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsObject.RhinoScriptSyntax.RotateObject.Static(System.Guid,Rhino.Geometry.Point3d,System.Double,Rhino.Geometry.Vector3d,System.Boolean)">
<summary>Rotates a single object</summary>
<param name="objectId">(Guid) The identifier of an object to rotate</param>
<param name="centerPoint">(Point3d) The center of rotation</param>
<param name="rotationAngle">(float) In degrees</param>
<param name="axis">(Vector3d) Optional, Default Value: <c>Vector3d.ZAxis</c>
Axis of rotation, If omitted, the Vector3d.ZAxis is used as the rotation axis</param>
<param name="copy">(bool) Optional, Default Value: <c>false</c>
Copy the object</param>
<returns>(Guid) Identifier of the rotated object</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsObject.RhinoScriptSyntax.ObjectType.Static(System.Guid)">
<summary>Returns the object type</summary>
<param name="objectId">(Guid) Identifier of an object</param>
<returns>(int) The object type .
  The valid object types are as follows:
  Value   Description
    0           Unknown object
    1           Point
    2           Point cloud
    4           Curve
    8           Surface or single-face brep
    16          Polysurface or multiple-face
    32          Mesh
    256         Light
    512         Annotation
    4096        Instance or block reference
    8192        Text dot object
    16384       Grip object
    32768       Detail
    65536       Hatch
    131072      Morph control
    134217728   Cage
    268435456   Phantom
    536870912   Clipping plane
    1073741824  Extrusion</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsObject.RhinoScriptSyntax.ObjectPrintWidthSource.Static(System.Collections.Generic.IEnumerable{System.Guid},System.Int32)">
<summary>Modifies the print width source of multiple objects</summary>
<param name="objectsIds">(Guid seq) Identifier of objects</param>
<param name="source">(int) New print width source
  0 = print width by layer
  1 = print width by objects
  3 = print width by parent</param>
<returns>(unit) void, nothing</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsObject.RhinoScriptSyntax.ObjectPrintWidthSource.Static(System.Guid,System.Int32)">
<summary>Modifies the print width source of an object</summary>
<param name="objectId">(Guid) Identifier of object</param>
<param name="source">(int) New print width source
  0 = print width by layer
  1 = print width by object
  3 = print width by parent</param>
<returns>(unit) void, nothing</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsObject.RhinoScriptSyntax.ObjectPrintWidthSource.Static(System.Guid)">
<summary>Returns the print width source of an object</summary>
<param name="objectId">(Guid) Identifier of object</param>
<returns>(int) The object's current print width source
  0 = print width by layer
  1 = print width by object
  3 = print width by parent</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsObject.RhinoScriptSyntax.ObjectPrintWidth.Static(System.Collections.Generic.IEnumerable{System.Guid},System.Double)">
<summary>Modifies the print width of multiple objects</summary>
<param name="objectsIds">(Guid seq) Identifier of objects</param>
<param name="width">(float) New print width value in millimeters, where width = 0.0 means use
  the default width, and width smaller than 0.0 (e.g. -1.0)means do-not-print (visible for screen display,
  but does not show on print)</param>
<returns>(unit) void, nothing</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsObject.RhinoScriptSyntax.ObjectPrintWidth.Static(System.Guid,System.Double)">
<summary>Modifies the print width of an object</summary>
<param name="objectId">(Guid) Identifier of object</param>
<param name="width">(float) New print width value in millimeters, where width = 0.0 means use
  the default width, and width smaller than 0.0 (e.g. -1.0)means do-not-print (visible for screen display,
  but does not show on print)</param>
<returns>(unit) void, nothing</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsObject.RhinoScriptSyntax.ObjectPrintWidth.Static(System.Guid)">
<summary>Returns the print width of an object</summary>
<param name="objectId">(Guid) Identifier of object</param>
<returns>(float) The object's current print width</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsObject.RhinoScriptSyntax.ObjectPrintColorSource.Static(System.Collections.Generic.IEnumerable{System.Guid},System.Int32)">
<summary>Modifies the print color source of multiple objects</summary>
<param name="objectsIds">(Guid seq) Identifier of objects</param>
<param name="source">(int) New print color source
  0 = print color by layer
  1 = print color by objects
  3 = print color by parent</param>
<returns>(unit) void, nothing</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsObject.RhinoScriptSyntax.ObjectPrintColorSource.Static(System.Guid,System.Int32)">
<summary>Modifies the print color source of an object</summary>
<param name="objectId">(Guid) Identifier of object</param>
<param name="source">(int) New print color source
  0 = print color by layer
  1 = print color by object
  3 = print color by parent</param>
<returns>(unit) void, nothing</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsObject.RhinoScriptSyntax.ObjectPrintColorSource.Static(System.Guid)">
<summary>Returns the print color source of an object</summary>
<param name="objectId">(Guid) Identifier of object</param>
<returns>(int) The object's current print color source
  0 = print color by layer
  1 = print color by object
  3 = print color by parent</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsObject.RhinoScriptSyntax.ObjectPrintColor.Static(System.Collections.Generic.IEnumerable{System.Guid},System.Drawing.Color)">
<summary>Modifies the print color of multiple objects</summary>
<param name="objectsIds">(Guid seq) Identifier of objects</param>
<param name="color">(Drawing.Color) New print color.</param>
<returns>(unit) void, nothing</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsObject.RhinoScriptSyntax.ObjectPrintColor.Static(System.Guid,System.Drawing.Color)">
<summary>Modifies the print color of an object</summary>
<param name="objectId">(Guid) Identifier of object</param>
<param name="color">(Drawing.Color) New print color.</param>
<returns>(unit) void, nothing</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsObject.RhinoScriptSyntax.ObjectPrintColor.Static(System.Guid)">
<summary>Returns the print color of an object</summary>
<param name="objectId">(Guid) Identifier of object</param>
<returns>(Drawing.Color) The object's current print color</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsObject.RhinoScriptSyntax.ObjectName.Static(System.Collections.Generic.IEnumerable{System.Guid},System.String)">
<summary>Modifies the name of multiple objects</summary>
<param name="objectsIds">(Guid seq)Id of objects</param>
<param name="name">(string) The new objects name.</param>
<returns>(unit) void, nothing</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsObject.RhinoScriptSyntax.ObjectName.Static(System.Guid,System.String)">
<summary>Modifies the name of an object</summary>
<param name="objectId">(Guid)Id of object</param>
<param name="name">(string) The new object name.</param>
<returns>(unit) void, nothing</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsObject.RhinoScriptSyntax.ObjectName.Static(System.Guid)">
<summary>Returns the name of an object</summary>
<param name="objectId">(Guid)Id of object</param>
<returns>(string) The current object name</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsObject.RhinoScriptSyntax.ObjectMaterialSource.Static(System.Collections.Generic.IEnumerable{System.Guid},System.Int32)">
<summary>Modifies the rendering material source of multiple objects</summary>
<param name="objectsIds">(Guid seq) One or more objects identifierss</param>
<param name="source">(int) The new rendering material source.
  0 = Material from layer
  1 = Material from objects
  3 = Material from parent</param>
<returns>(unit) void, nothing</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsObject.RhinoScriptSyntax.ObjectMaterialSource.Static(System.Guid,System.Int32)">
<summary>Modifies the rendering material source of an object</summary>
<param name="objectId">(Guid) One or more object identifiers</param>
<param name="source">(int) The new rendering material source.
  0 = Material from layer
  1 = Material from object
  3 = Material from parent</param>
<returns>(unit) void, nothing</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsObject.RhinoScriptSyntax.ObjectMaterialSource.Static(System.Guid)">
<summary>Returns the rendering material source of an object</summary>
<param name="objectId">(Guid) One or more object identifiers</param>
<returns>(int) The current rendering material source
  0 = Material from layer
  1 = Material from object
  3 = Material from parent</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsObject.RhinoScriptSyntax.ObjectMaterialIndex.Static(System.Collections.Generic.IEnumerable{System.Guid},System.Int32)">
<summary>Changes the material index multiple objects. Rendering materials are stored in
 Rhino's rendering material table. The table is conceptually an array. Render
 materials associated with objects and layers are specified by zero based
 indices into this array</summary>
<param name="objectIds">(Guid seq) Identifiers of an objects</param>
<param name="materialIndex">(int) The new material index</param>
</member>
<member name="M:Rhino.Scripting.ExtensionsObject.RhinoScriptSyntax.ObjectMaterialIndex.Static(System.Guid,System.Int32)">
<summary>Changes the material index of an object. Rendering materials are stored in
 Rhino's rendering material table. The table is conceptually an array. Render
 materials associated with objects and layers are specified by zero based
 indices into this array</summary>
<param name="objectId">(Guid) Identifier of an object</param>
<param name="materialIndex">(int) The new material index</param>
</member>
<member name="M:Rhino.Scripting.ExtensionsObject.RhinoScriptSyntax.ObjectMaterialIndex.Static(System.Guid)">
<summary>Returns the material index of an object. Rendering materials are stored in
 Rhino's rendering material table. The table is conceptually an array. Render
 materials associated with objects and layers are specified by zero based
 indices into this array</summary>
<param name="objectId">(Guid) Identifier of an object</param>
<returns>(int) If the return value of ObjectMaterialSource is "material by object", then
  the return value of this function is the index of the object's rendering
  material. A material index of -1 indicates no material has been assigned,
  and that Rhino's internal default material has been assigned to the object</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsObject.RhinoScriptSyntax.ObjectLinetypeSource.Static(System.Collections.Generic.IEnumerable{System.Guid},System.Int32)">
<summary>Modifies the linetype source of multiple objects</summary>
<param name="objectIds">(Guid seq) Identifiers of objects</param>
<param name="source">(int) New linetype source.
  If objectId is a list of identifiers, this parameter is required
    0 = By Layer
    1 = By Object
    3 = By Parent</param>
<returns>(unit) void, nothing</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsObject.RhinoScriptSyntax.ObjectLinetypeSource.Static(System.Guid,System.Int32)">
<summary>Modifies the linetype source of an object</summary>
<param name="objectId">(Guid) Identifier of object</param>
<param name="source">(int) New linetype source.
  If objectId is a list of identifiers, this parameter is required
    0 = By Layer
    1 = By Object
    3 = By Parent</param>
<returns>(unit) void, nothing</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsObject.RhinoScriptSyntax.ObjectLinetypeSource.Static(System.Guid)">
<summary>Returns the linetype source of an object</summary>
<param name="objectId">(Guid) Identifier of object</param>
<returns>(int) The object's current linetype source
    0 = By Layer
    1 = By Object
    3 = By Parent</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsObject.RhinoScriptSyntax.ObjectLinetype.Static(System.Collections.Generic.IEnumerable{System.Guid},System.String)">
<summary>Modifies the linetype of multiple object</summary>
<param name="objectIds">(Guid seq) Identifiers of objects</param>
<param name="linetype">(string) Name of an existing linetyp</param>
<returns>(unit) void, nothing</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsObject.RhinoScriptSyntax.ObjectLinetype.Static(System.Guid,System.String)">
<summary>Modifies the linetype of an object</summary>
<param name="objectId">(Guid) Identifier of object</param>
<param name="linetype">(string) Name of an existing linetyp</param>
<returns>(unit) void, nothing</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsObject.RhinoScriptSyntax.ObjectLinetype.Static(System.Guid)">
<summary>Returns the linetype of an object</summary>
<param name="objectId">(Guid) Identifier of object</param>
<returns>(string) The object's current linetype</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsObject.RhinoScriptSyntax.ObjectLayout.Static(System.Collections.Generic.IEnumerable{System.Guid},Microsoft.FSharp.Core.FSharpOption{System.String})">
<summary>Changes the layout or model space of an objects</summary>
<param name="objectsIds">(Guid seq) Identifier of the objects</param>
<param name="layout">(string option) To change, or move, an objects from model space to page
  layout space, or from one page layout to another, then specify the
  title of an existing page layout view. To move an objects
  from page layout space to model space, just specify None</param>
<returns>(unit) void, nothing</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsObject.RhinoScriptSyntax.ObjectLayout.Static(System.Guid,Microsoft.FSharp.Core.FSharpOption{System.String})">
<summary>Changes the layout or model space of an object</summary>
<param name="objectId">(Guid) Identifier of the object</param>
<param name="layout">(string option) To change, or move, an object from model space to page
  layout space, or from one page layout to another, then specify the
  title of an existing page layout view. To move an object
  from page layout space to model space, just specify None</param>
<returns>(unit) void, nothing</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsObject.RhinoScriptSyntax.ObjectLayout.Static(System.Guid)">
<summary>Returns the layout or model space of an object</summary>
<param name="objectId">(Guid) Identifier of the object</param>
<returns>(string option) The object's current page layout view, None if it is in Model Space</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsObject.RhinoScriptSyntax.ObjectLayer.Static(System.Collections.Generic.IEnumerable{System.Guid},System.String)">
<summary>Modifies the layer of multiple objects</summary>
<param name="objectIds">(Guid seq) The identifiers of the objects</param>
<param name="layer">(string) Name of an existing layer</param>
<returns>(unit) void, nothing</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsObject.RhinoScriptSyntax.ObjectLayer.Static(System.Guid,System.String)">
<summary>Modifies the layer of an object</summary>
<param name="objectId">(Guid) The identifier of the object</param>
<param name="layer">(string) Name of an existing layer</param>
<returns>(unit) void, nothing</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsObject.RhinoScriptSyntax.ObjectLayer.Static(System.Guid)">
<summary>Returns the layer of an object</summary>
<param name="objectId">(Guid) The identifier of the object</param>
<returns>(string) The object's current layer</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsObject.RhinoScriptSyntax.ObjectGroups.Static(System.Guid)">
<summary>Returns all of the group names that an object is assigned to</summary>
<param name="objectId">(Guid) Identifier of an object</param>
<returns>(string ResizeArray) list of group names on success</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsObject.RhinoScriptSyntax.ObjectDescription.Static(System.Collections.Generic.IEnumerable{System.Guid})">
<summary>Returns the count for each object type in a List of objects</summary>
<param name="objectIds">(Guid seq) Identifiers of objects</param>
<returns>(string) A short text description of the object </returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsObject.RhinoScriptSyntax.ObjectDescription.Static(System.Guid)">
<summary>Returns a description of the object type (e.g. Line, Surface, Text,...)</summary>
<param name="objectId">(Guid) Identifier of an object</param>
<returns>(string) A short text description of the object </returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsObject.RhinoScriptSyntax.ObjectColorSource.Static(System.Collections.Generic.IEnumerable{System.Guid},System.Int32)">
<summary>Modifies the color source of multiple objects</summary>
<param name="objectIds">(Guid seq) Multiple identifiers</param>
<param name="source">(int) New color source
  0 = color from layer
  1 = color from object
  2 = color from material
  3 = color from parent</param>
<returns>(unit) void, nothing</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsObject.RhinoScriptSyntax.ObjectColorSource.Static(System.Guid,System.Int32)">
<summary>Modifies the color source of an object</summary>
<param name="objectId">(Guid) Single identifier</param>
<param name="source">(int) New color source
  0 = color from layer
  1 = color from object
  2 = color from material
  3 = color from parent</param>
<returns>(unit) void, nothing</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsObject.RhinoScriptSyntax.ObjectColorSource.Static(System.Guid)">
<summary>Returns the color source of an object</summary>
<param name="objectId">(Guid) Single identifier</param>
<returns>(int) The current color source
  0 = color from layer
  1 = color from object
  2 = color from material
  3 = color from parent</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsObject.RhinoScriptSyntax.ObjectColor.Static(System.Collections.Generic.IEnumerable{System.Guid},System.Drawing.Color)">
<summary>Modifies the color of multiple objects. Object colors are represented
 as RGB colors. An RGB color specifies the relative intensity of red, green,
 and blue to cause a specific color to be displayed</summary>
<param name="objectIds">(Guid seq)Ids of objects</param>
<param name="color">(Drawing.Color) The new color value</param>
<returns>(unit) void, nothing</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsObject.RhinoScriptSyntax.ObjectColor.Static(System.Guid,System.Drawing.Color)">
<summary>Modifies the color of an object. Object colors are represented
 as RGB colors. An RGB color specifies the relative intensity of red, green,
 and blue to cause a specific color to be displayed</summary>
<param name="objectId">(Guid)Id of object</param>
<param name="color">(Drawing.Color) The new color value</param>
<returns>(unit) void, nothing</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsObject.RhinoScriptSyntax.ObjectColor.Static(System.Guid)">
<summary>Returns the color of an object. Object colors are represented
 as RGB colors. An RGB color specifies the relative intensity of red, green,
 and blue to cause a specific color to be displayed</summary>
<param name="objectId">(Guid)Id of object</param>
<returns>(Drawing.Color) The current color value</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsObject.RhinoScriptSyntax.MoveObject.Static(System.Collections.Generic.IEnumerable{System.Guid},Rhino.Geometry.Vector3d)">
<summary>Moves one or more objects</summary>
<param name="objectIds">(Guid seq) The identifiers objects to move</param>
<param name="translation">(Vector3d) List of 3 numbers or Vector3d</param>
<returns>(Guid ResizeArray) Identifiers of the moved objects</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsObject.RhinoScriptSyntax.MoveObject.Static(System.Guid,Rhino.Geometry.Vector3d)">
<summary>Moves a single object</summary>
<param name="objectId">(Guid) The identifier of an object to move</param>
<param name="translation">(Vector3d) List of 3 numbers or Vector3d</param>
<returns>(Guid) Identifier of the moved object</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsObject.RhinoScriptSyntax.MirrorObject.Static(System.Collections.Generic.IEnumerable{System.Guid},Rhino.Geometry.Point3d,Rhino.Geometry.Point3d,System.Boolean)">
<summary>Mirrors a list of objects on World XY Plane</summary>
<param name="objectIds">(Guid seq) Identifiers of objects to mirror</param>
<param name="startPoint">(Point3d) Start of the mirror plane</param>
<param name="endPoint">(Point3d) End of the mirror plane</param>
<param name="copy">(bool) Optional, Default Value: <c>false</c>
Copy the objects</param>
<returns>(Guid ResizeArray) List of identifiers of the mirrored objects</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsObject.RhinoScriptSyntax.MirrorObject.Static(System.Guid,Rhino.Geometry.Point3d,Rhino.Geometry.Point3d,System.Boolean)">
<summary>Mirrors a single object on World XY Plane</summary>
<param name="objectId">(Guid) The identifier of an object to mirror</param>
<param name="startPoint">(Point3d) Start of the mirror plane</param>
<param name="endPoint">(Point3d) End of the mirror plane</param>
<param name="copy">(bool) Optional, Default Value: <c>false</c>
Copy the object</param>
<returns>(Guid) Identifier of the mirrored object</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsObject.RhinoScriptSyntax.MatchObjectAttributes.Static(System.Collections.Generic.IEnumerable{System.Guid},System.Guid)">
<summary>Matches, or copies the attributes of a source object to a target object</summary>
<param name="targetIds">(Guid seq) Identifiers of objects to copy attributes to</param>
<param name="sourceId">(Guid) Optional, Identifier of object to copy attributes from. If None,
  then the default attributes are copied to the targetIds</param>
<returns>(int) number of objects modified</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsObject.RhinoScriptSyntax.LockObject.Static(System.Collections.Generic.IEnumerable{System.Guid})">
<summary>Locks multiple objects. Locked objects are visible, and they can be
  snapped to. But, they cannot be selected</summary>
<param name="objectIds">(Guid seq) List of Strings or Guids. The identifiers of objects</param>
<returns>(int) number of objects locked</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsObject.RhinoScriptSyntax.LockObject.Static(System.Guid)">
<summary>Locks a single object. Locked objects are visible, and they can be
  snapped to. But, they cannot be selected</summary>
<param name="objectId">(Guid) The identifier of an object</param>
<returns>(bool) True or False indicating success or failure</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsObject.RhinoScriptSyntax.IsVisibleInView.Static(System.Guid,System.String)">
<summary>Verifies an object is visible in a view</summary>
<param name="objectId">(Guid) The identifier of an object to test</param>
<param name="view">(string) Optional, Default Value: The title of the view.  If omitted, the current active view is used</param>
<returns>(bool) True if the object is visible in the specified view, otherwise False</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsObject.RhinoScriptSyntax.IsObjectValid.Static(System.Guid)">
<summary>Verifies an object's geometry is valid and without error</summary>
<param name="objectId">(Guid) The identifier of an object to test</param>
<returns>(bool) True if the object is valid</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsObject.RhinoScriptSyntax.IsObjectSolid.Static(System.Guid)">
<summary>Determines if an object is closed, solid</summary>
<param name="objectId">(Guid) The identifier of an object to test</param>
<returns>(bool) True if the object is solid, or a mesh is closed., False otherwise</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsObject.RhinoScriptSyntax.IsObjectSelected.Static(System.Guid)">
<summary>Verifies that an object is currently selected</summary>
<param name="objectId">(Guid) The identifier of an object to test</param>
<returns>(int) 0, the object is not selected
  1, the object is selected
  2, the object is entirely persistently selected
  3, one or more proper sub-objects are selected</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsObject.RhinoScriptSyntax.IsObjectSelectable.Static(System.Guid)">
<summary>Verifies that an object can be selected</summary>
<param name="objectId">(Guid) The identifier of an object to test</param>
<returns>(bool) True or False</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsObject.RhinoScriptSyntax.IsObjectReference.Static(System.Guid)">
<summary>Verifies that an object is a reference object. Reference objects are
  objects that are not part of the current document</summary>
<param name="objectId">(Guid) The identifier of an object to test</param>
<returns>(bool) True if the object is a reference object, False if the object is not a reference object</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsObject.RhinoScriptSyntax.IsObjectNormal.Static(System.Guid)">
<summary>Verifies that an object is normal. Normal objects are visible, can be
  snapped to, and can be selected</summary>
<param name="objectId">(Guid) The identifier of an object to be tested</param>
<returns>(bool) True if the object is normal, False if the object is not normal</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsObject.RhinoScriptSyntax.IsObjectLocked.Static(System.Guid)">
<summary>Verifies that an object is locked. Locked objects are visible, and can
  be snapped to, but cannot be selected</summary>
<param name="objectId">(Guid) The identifier of an object to be tested</param>
<returns>(bool) True if the object is locked, False if the object is not locked</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsObject.RhinoScriptSyntax.IsObjectInGroup.Static(System.Guid,System.String)">
<summary>Verifies that an object is a member of a group</summary>
<param name="objectId">(Guid) The identifier of an object</param>
<param name="groupName">(string) Optional, The name of a group. If omitted, the function
  verifies that the object is a member of any group</param>
<returns>(bool) True if the object is a member of the specified group. If a groupName
  was not specified, the object is a member of some group.
  False if the object  is not a member of the specified group.
  If a groupName was not specified, the object is not a member of any group</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsObject.RhinoScriptSyntax.IsObjectInBox.Static(System.Guid,Rhino.Geometry.BoundingBox,System.Boolean)">
<summary>Verifies an object's bounding box is inside of another bounding box</summary>
<param name="objectId">(Guid) Identifier of an object to be tested</param>
<param name="box">(Geometry.BoundingBox) Bounding box to test for containment</param>
<param name="testMode">(bool) Optional, Default Value: <c>true</c>
  If True, the object's bounding box must be contained by box
  If False, the object's bounding box must be contained by or intersect box</param>
<returns>(bool) True if object is inside box, False is object is not inside box</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsObject.RhinoScriptSyntax.IsObjectHidden.Static(System.Guid)">
<summary>Verifies that an object is hidden. Hidden objects are not visible, cannot
  be snapped to, and cannot be selected</summary>
<param name="objectId">(Guid) The identifier of an object to test</param>
<returns>(bool) True if the object is hidden, False if the object is not hidden</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsObject.RhinoScriptSyntax.IsObject.Static(System.Guid)">
<summary>Verifies the existence of an object</summary>
<param name="objectId">(Guid) An object to test</param>
<returns>(bool) True if the object exists, False if the object does not exist</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsObject.RhinoScriptSyntax.IsLayoutObject.Static(System.Guid)">
<summary>Verifies that an object is in either page layout space or model space</summary>
<param name="objectId">(Guid) Id of an object to test</param>
<returns>(bool) True if the object is in page layout space, False if the object is in model space</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsObject.RhinoScriptSyntax.HideObject.Static(System.Collections.Generic.IEnumerable{System.Guid})">
<summary>Hides one or more objects</summary>
<param name="objectIds">(Guid seq) Identifiers of objects to hide</param>
<returns>(int) Number of objects hidden</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsObject.RhinoScriptSyntax.HideObject.Static(System.Guid)">
<summary>Hides a single object</summary>
<param name="objectId">(Guid) Id of object to hide</param>
<returns>(bool) True of False indicating success or failure</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsObject.RhinoScriptSyntax.FlashObject.Static(System.Collections.Generic.IEnumerable{System.Guid},System.Boolean)">
<summary>Causes the selection state of one or more objects to change momentarily
  so the object appears to flash on the screen</summary>
<param name="objectIds">(Guid seq) Identifiers of objects to flash</param>
<param name="style">(bool) Optional, Default Value: <c>true</c>
If True, flash between object color and selection color.
  If False, flash between visible and invisible</param>
<returns>(unit)</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsObject.RhinoScriptSyntax.DeleteObject.Static(System.Collections.Generic.IEnumerable{System.Guid})">
<summary>Deletes one or more objects from the document, Fails if not all objects can be deleted</summary>
<param name="objectIds">(Guid seq) Identifiers of objects to delete</param>
<returns>(unit) void, nothing</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsObject.RhinoScriptSyntax.DeleteObject.Static(System.Guid)">
<summary>Deletes a single object from the document</summary>
<param name="objectId">(Guid) Identifier of object to delete</param>
<returns>(unit) void, nothing</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsObject.RhinoScriptSyntax.CopyObject.Static(System.Collections.Generic.IEnumerable{System.Guid},Rhino.Geometry.Vector3d)">
<summary>Copies one or more objects from one location to another, or in-place</summary>
<param name="objectIds">(Guid seq) List of objects to copy</param>
<param name="translation">(Vector3d) Optional, Vector3d representing translation vector to apply to copied set</param>
<returns>(Guid ResizeArray) identifiers for the copies</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsObject.RhinoScriptSyntax.CopyObject.Static(System.Guid,Rhino.Geometry.Vector3d)">
<summary>Copies object from one location to another, or in-place</summary>
<param name="objectId">(Guid) Object to copy</param>
<param name="translation">(Vector3d) Optional, additional Translation vector to apply</param>
<returns>(Guid) objectId for the copy</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsObject.RhinoScriptSyntax.TransformObject.Static(System.Guid,Rhino.Geometry.Transform,System.Boolean)">
<summary>Moves, scales, or rotates an object given a 4x4 transformation matrix.
  The matrix acts on the left.  To transfrom Geometry objects instead of DocObjects or Guids use their .Transform(xform) member</summary>
<param name="objectId">(Guid) The identifier of the object</param>
<param name="matrix">(Transform) The transformation matrix (4x4 array of numbers)</param>
<param name="copy">(bool) Optional, Default Value: <c>false</c>
Copy the object</param>
<returns>(Guid) The identifier of the transformed object</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsObject.RhinoScriptSyntax.TransformObject.Static(System.Collections.Generic.IEnumerable{System.Guid},Rhino.Geometry.Transform,System.Boolean)">
<summary>Moves, scales, or rotates a list of objects given a 4x4 transformation
  matrix. The matrix acts on the left. To transfrom Geometry objects instead of DocObjects or Guids use their .Transform(xform) member</summary>
<param name="objectIds">(Guid seq) List of object identifiers</param>
<param name="matrix">(Transform) The transformation matrix (4x4 array of numbers)</param>
<param name="copy">(bool) Optional, Default Value: <c>false</c>
Copy the objects</param>
<returns>(Guid ResizeArray) ids identifying the newly transformed objects</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsPlane.RhinoScriptSyntax.WorldZXPlane.Static">
<summary>Returns Rhino's world ZX plane</summary>
<returns>(Plane) Rhino's world ZX plane</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsPlane.RhinoScriptSyntax.WorldYZPlane.Static">
<summary>Returns Rhino's world YZ plane</summary>
<returns>(Plane) Rhino's world YZ plane</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsPlane.RhinoScriptSyntax.WorldXYPlane.Static">
<summary>Returns Rhino's world XY plane</summary>
<returns>(Plane) Rhino's world XY plane</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsPlane.RhinoScriptSyntax.RotatePlane.Static(Rhino.Geometry.Plane,System.Double,Rhino.Geometry.Vector3d)">
<summary>Rotates a plane</summary>
<param name="plane">(Plane) Plane to rotate</param>
<param name="angleDegrees">(float) Rotation angle in degrees</param>
<param name="axis">(Vector3d) Axis of rotation or list of three numbers</param>
<returns>(Plane) rotated plane on success</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsPlane.RhinoScriptSyntax.PlaneTransform.Static(Rhino.Geometry.Plane,Rhino.Geometry.Transform)">
<summary>Transforms a plane</summary>
<param name="plane">(Plane) Plane to transform</param>
<param name="xform">(Transform) Transformation to apply</param>
<returns>(Plane) the resulting plane</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsPlane.RhinoScriptSyntax.PlaneSphereIntersection.Static(Rhino.Geometry.Plane,Rhino.Geometry.Plane,System.Double)">
<summary>Calculates the intersection of a plane and a sphere</summary>
<param name="plane">(Plane) The plane to intersect</param>
<param name="spherePlane">(Plane) Equatorial plane of the sphere. origin of the plane is
  the center of the sphere</param>
<param name="sphereRadius">(float) Radius of the sphere</param>
<returns>(int * Plane * float) of intersection results
  Element  Type      Description
  [0]      number     The type of intersection, where 0 = point and 1 = circle.
  [1]      plane      If a point intersection, the a Point3d identifying the 3-D intersection location is plane.Origin
                      If a circle intersection, then the circle's plane. The origin of the plane will be the center point of the circle
  [2]      number     If a circle intersection, then the radius of the circle</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsPlane.RhinoScriptSyntax.PlanePlaneIntersection.Static(Rhino.Geometry.Plane,Rhino.Geometry.Plane)">
<summary>Calculates the intersection of two planes</summary>
<param name="plane1">(Plane) The 1st plane to intersect</param>
<param name="plane2">(Plane) The 2nd plane to intersect</param>
<returns>(Line) a line with two 3d points identifying the starting/ending points of the intersection</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsPlane.RhinoScriptSyntax.PlaneFromPoints.Static(Rhino.Geometry.Point3d,Rhino.Geometry.Point3d,Rhino.Geometry.Point3d)">
<summary>Creates a plane from three non-colinear points</summary>
<param name="origin">(Point3d) Origin point of the plane</param>
<param name="x">(Point3d) X point on the plane's x  axis</param>
<param name="y">(Point3d) Y point on the plane's y axis</param>
<returns>(Plane) The plane , otherwise None</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsPlane.RhinoScriptSyntax.PlaneFromNormal.Static(Rhino.Geometry.Point3d,Rhino.Geometry.Vector3d,Rhino.Geometry.Vector3d)">
<summary>Creates a plane from an origin point and a normal direction vector</summary>
<param name="origin">(Point3d) A 3D point identifying the origin of the plane</param>
<param name="normal">(Vector3d) A 3D vector identifying the normal direction of the plane</param>
<param name="xaxis">(Vector3d) Optional, vector defining the plane's x-axis</param>
<returns>(Plane) The plane </returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsPlane.RhinoScriptSyntax.PlaneFromFrame.Static(Rhino.Geometry.Point3d,Rhino.Geometry.Vector3d,Rhino.Geometry.Vector3d)">
<summary>Construct a plane from a point, and two vectors in the plane</summary>
<param name="origin">(Point3d) A 3D point identifying the origin of the plane</param>
<param name="xAxis">(Vector3d) A non-zero 3D vector in the plane that determines the X axis
  direction</param>
<param name="yAxis">(Vector3d) A non-zero 3D vector not parallel to xAxis that is used
  to determine the Y axis direction. Note, yAxis does not
  have to be perpendicular to xAxis</param>
<returns>(Plane) The plane </returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsPlane.RhinoScriptSyntax.PlaneFitFromPoints.Static(System.Collections.Generic.IEnumerable{Rhino.Geometry.Point3d})">
<summary>Returns a plane that was fit through an array of 3D points</summary>
<param name="points">(Point3d seq) An array of 3D points</param>
<returns>(Plane) The plane</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsPlane.RhinoScriptSyntax.PlaneEquation.Static(Rhino.Geometry.Plane)">
<summary>Returns the equation of a plane as a tuple of four numbers. The standard
  equation of a plane with a non-zero vector is Ax+By+Cz+D = 0</summary>
<param name="plane">(Plane) The plane to deconstruct</param>
<returns>(float * float * float * float) containing four numbers that represent the coefficients of the equation  (A, B, C, D)</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsPlane.RhinoScriptSyntax.PlaneCurveIntersection.Static(Rhino.Geometry.Plane,System.Guid,System.Double)">
<summary>Intersect an infinite plane and a curve object</summary>
<param name="plane">(Plane) The plane to intersect</param>
<param name="curve">(Guid) The identifier of the curve object</param>
<param name="tolerance">(float) Optional, Default Value: <c>Doc.ModelAbsoluteTolerance</c>
The intersection tolerance. </param>
<returns>(ResizeArray of int * Point3d * Point3d * Point3d * Point3d * float * float * float * float* float * float) a list of intersection information tuple .  The list will contain one or more of the following tuple:
  Element Type        Description
  [0]       Number      The intersection event type, either Point (1) or Overlap (2).
  [1]       Point3d     If the event type is Point (1), then the intersection point on the curve.
    If the event type is Overlap (2), then intersection start point on the curve.
  [2]       Point3d     If the event type is Point (1), then the intersection point on the curve.
    If the event type is Overlap (2), then intersection end point on the curve.
  [3]       Point3d     If the event type is Point (1), then the intersection point on the plane.
    If the event type is Overlap (2), then intersection start point on the plane.
  [4]       Point3d     If the event type is Point (1), then the intersection point on the plane.
    If the event type is Overlap (2), then intersection end point on the plane.
  [5]       Number      If the event type is Point (1), then the curve parameter.
    If the event type is Overlap (2), then the start value of the curve parameter range.
  [6]       Number      If the event type is Point (1), then the curve parameter.
    If the event type is Overlap (2), then the end value of the curve parameter range.
  [7]       Number      If the event type is Point (1), then the U plane parameter.
    If the event type is Overlap (2), then the U plane parameter for curve at (n, 5).
  [8]       Number      If the event type is Point (1), then the V plane parameter.
    If the event type is Overlap (2), then the V plane parameter for curve at (n, 5).
  [9]       Number      If the event type is Point (1), then the U plane parameter.
    If the event type is Overlap (2), then the U plane parameter for curve at (n, 6).
  [10]      Number      If the event type is Point (1), then the V plane parameter.
    If the event type is Overlap (2), then the V plane parameter for curve at (n, 6)</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsPlane.RhinoScriptSyntax.PlaneClosestParameter.Static(Rhino.Geometry.Plane,Rhino.Geometry.Point3d)">
<summary>Returns the point on a plane that is closest to a test point</summary>
<param name="plane">(Plane) The plane</param>
<param name="point">(Point3d) The 3-D point to test</param>
<returns>(float*float) The u and v paramter on the plane of the closest point</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsPlane.RhinoScriptSyntax.PlaneClosestPoint.Static(Rhino.Geometry.Plane,Rhino.Geometry.Point3d)">
<summary>Returns the point on a plane that is closest to a test point</summary>
<param name="plane">(Plane) The plane</param>
<param name="point">(Point3d) The 3-D point to test</param>
<returns>(Point3d) the 3-D point</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsPlane.RhinoScriptSyntax.MovePlane.Static(Rhino.Geometry.Plane,Rhino.Geometry.Point3d)">
<summary>Moves the origin of a plane</summary>
<param name="plane">(Plane) Plane or ConstructionPlane</param>
<param name="origin">(Point3d) Point3d or list of three numbers</param>
<returns>(Plane) moved plane</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsPlane.RhinoScriptSyntax.IntersectPlanes.Static(Rhino.Geometry.Plane,Rhino.Geometry.Plane,Rhino.Geometry.Plane)">
<summary>Calculates the intersection of three planes</summary>
<param name="plane1">(Plane) The 1st plane to intersect</param>
<param name="plane2">(Plane) The 2nd plane to intersect</param>
<param name="plane3">(Plane) The 3rd plane to intersect</param>
<returns>(Point3d) the intersection point between the 3 planes on success</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsPlane.RhinoScriptSyntax.EvaluatePlane.Static(Rhino.Geometry.Plane,System.Double,System.Double)">
<summary>Evaluates a plane at a U, V parameter</summary>
<param name="plane">(Plane) The plane to evaluate</param>
<param name="u">(float) U parameter to evaluate</param>
<param name="v">(float) V parameter to evaluate</param>
<returns>(Point3d) Point3d on success</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsPlane.RhinoScriptSyntax.DistanceToPlane.Static(Rhino.Geometry.Plane,Rhino.Geometry.Point3d)">
<summary>Returns the distance from a 3D point to a plane</summary>
<param name="plane">(Plane) The plane</param>
<param name="point">(Point3d) List of 3 numbers or Point3d</param>
<returns>(float) The distance , otherwise None</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsPointvector.RhinoScriptSyntax.PointArrayBoundingBox.Static(System.Collections.Generic.IEnumerable{Rhino.Geometry.Point3d},Rhino.Geometry.Plane)">
<summary>Returns either a world axis-aligned or a construction plane axis-aligned
  bounding box of an array of 3-D point locations</summary>
<param name="points">(Point3d seq) A list of 3-D points</param>
<param name="plane">(Plane) Optional, Default Value: <c>Plane.WorldXY</c>
  Plane to which the bounding box should be aligned,
 If omitted, a world axis-aligned bounding box
  will be calculated</param>
<returns>(Box) A Rhino.Geometry.Box</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsPointvector.RhinoScriptSyntax.VectorUnitize.Static(Rhino.Geometry.Vector3d)">
<summary>Unitizes, or normalizes a 3D vector. Note, zero vectors cannot be unitized</summary>
<param name="vector">(Vector3d) The vector to unitize</param>
<returns>(Vector3d) unitized vector on success</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsPointvector.RhinoScriptSyntax.VectorTransform.Static(Rhino.Geometry.Vector3d,Rhino.Geometry.Transform)">
<summary>Transforms a 3D vector</summary>
<param name="vector">(Vector3d) The vector to transform</param>
<param name="xform">(Transform) A valid 4x4 transformation matrix</param>
<returns>(Vector3d) transformed vector on success</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsPointvector.RhinoScriptSyntax.VectorSubtract.Static(Rhino.Geometry.Vector3d,Rhino.Geometry.Vector3d)">
<summary>Subtracts two 3D vectors</summary>
<param name="vector1">(Vector3d) The vector to subtract from</param>
<param name="vector2">(Vector3d) The vector to subtract</param>
<returns>(Vector3d) the resulting 3D vector</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsPointvector.RhinoScriptSyntax.VectorScale.Static(Rhino.Geometry.Vector3d,System.Double)">
<summary>Scales a 3-D vector</summary>
<param name="vector">(Vector3d) The vector to scale</param>
<param name="scale">(float) Scale factor to apply</param>
<returns>(Vector3d) resulting vector on success</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsPointvector.RhinoScriptSyntax.VectorRotate.Static(Rhino.Geometry.Vector3d,System.Double,Rhino.Geometry.Vector3d)">
<summary>Rotates a 3D vector</summary>
<param name="vector">(Vector3d) The vector to rotate</param>
<param name="angleDegrees">(float) Rotation angle</param>
<param name="axis">(Vector3d) Axis of rotation</param>
<returns>(Vector3d) rotated vector on success</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsPointvector.RhinoScriptSyntax.VectorReverse.Static(Rhino.Geometry.Vector3d)">
<summary>Reverses the direction of a 3D vector</summary>
<param name="vector">(Vector3d) The vector to reverse</param>
<returns>(Vector3d) reversed vector on success</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsPointvector.RhinoScriptSyntax.VectorMultiply.Static(Rhino.Geometry.Vector3d,Rhino.Geometry.Vector3d)">
<summary>Multiplies two 3D vectors, same as Dot Product</summary>
<param name="vector1">(Vector3d) Vector1 of the vectors to multiply</param>
<param name="vector2">(Vector3d) Vector2 of the vectors to multiply</param>
<returns>(float) the resulting inner (dot) product</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsPointvector.RhinoScriptSyntax.VectorLength.Static(Rhino.Geometry.Vector3d)">
<summary>Returns the length of a 3D vector</summary>
<param name="vector">(Vector3d) The 3-D vector</param>
<returns>(float) The length of the vector , otherwise None</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsPointvector.RhinoScriptSyntax.VectorDotProduct.Static(Rhino.Geometry.Vector3d,Rhino.Geometry.Vector3d)">
<summary>Calculates the dot product of two 3D vectors</summary>
<param name="vector1">(Vector3d) Vector1 of the vectors to perform the dot product on</param>
<param name="vector2">(Vector3d) Vector2 of the vectors to perform the dot product on</param>
<returns>(float) the resulting dot product</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsPointvector.RhinoScriptSyntax.VectorDivide.Static(Rhino.Geometry.Vector3d,System.Double)">
<summary>Divides a 3D vector by a value</summary>
<param name="vector">(Vector3d) The vector to divide</param>
<param name="divide">(float) A non-zero value to divide</param>
<returns>(Vector3d) resulting vector on success</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsPointvector.RhinoScriptSyntax.VectorCrossProduct.Static(Rhino.Geometry.Vector3d,Rhino.Geometry.Vector3d)">
<summary>Calculates the cross product of two 3D vectors</summary>
<param name="vector1">(Vector3d) Vector1 of the vectors to perform cross product on</param>
<param name="vector2">(Vector3d) Vector2 of the vectors to perform cross product on</param>
<returns>(Vector3d) the resulting cross product direction</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsPointvector.RhinoScriptSyntax.VectorCreate.Static(Rhino.Geometry.Point3d,Rhino.Geometry.Point3d)">
<summary>Creates a vector from two 3D points</summary>
<param name="fromPoint">(Point3d) Start point of vector</param>
<param name="toPoint">(Point3d) End point vector</param>
<returns>(Vector3d) the resulting vector</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsPointvector.RhinoScriptSyntax.VectorCompare.Static(Rhino.Geometry.Vector3d,Rhino.Geometry.Vector3d)">
<summary>Compares two 3D vectors</summary>
<param name="vector1">(Vector3d) Vector1 of the two vectors to compare</param>
<param name="vector2">(Vector3d) Vector2 of the two vectors to compare</param>
<returns>(int) result of comparing the vectors.
  -1 if vector1 is less than vector2
  0 if vector1 is equal to vector2
  1 if vector1 is greater than vector2</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsPointvector.RhinoScriptSyntax.VectorAngle.Static(Rhino.Geometry.Vector3d,Rhino.Geometry.Vector3d)">
<summary>Returns the angle, in degrees, between two 3-D vectors</summary>
<param name="vector1">(Vector3d) The first 3-D vector</param>
<param name="vector2">(Vector3d) The second 3-D vector</param>
<returns>(float) The angle in degrees</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsPointvector.RhinoScriptSyntax.VectorAdd.Static(Rhino.Geometry.Vector3d,Rhino.Geometry.Vector3d)">
<summary>Adds two 3D vectors</summary>
<param name="vector1">(Vector3d) Vector1 of the vectors to add</param>
<param name="vector2">(Vector3d) Vector2 of the vectors to add</param>
<returns>(Vector3d) the resulting 3D vector</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsPointvector.RhinoScriptSyntax.PullPoints.Static(System.Guid,System.Collections.Generic.IEnumerable{Rhino.Geometry.Point3d})">
<summary>Pulls an array of points to a surface or mesh object. For more
  information, see the Rhino help file Pull command</summary>
<param name="objectId">(Guid) The identifier of the surface or mesh object that pulls</param>
<param name="points">(Point3d seq) List of 3D points</param>
<returns>(Point3d array) 3D points pulled onto surface or mesh</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsPointvector.RhinoScriptSyntax.ProjectPointToSurface.Static(System.Collections.Generic.IEnumerable{Rhino.Geometry.Point3d},System.Collections.Generic.IEnumerable{System.Guid},Rhino.Geometry.Vector3d)">
<summary>Projects one or more points onto one or more surfaces or polysurfaces</summary>
<param name="points">(Point3d seq) One or more 3D points</param>
<param name="surfaceIds">(Guid seq) Identifiers of one or more surfaces/polysurfaces</param>
<param name="direction">(Vector3d) Direction vector to project the points</param>
<returns>(Point3d array) projected points on success</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsPointvector.RhinoScriptSyntax.ProjectPointToMesh.Static(System.Collections.Generic.IEnumerable{Rhino.Geometry.Point3d},System.Collections.Generic.IEnumerable{System.Guid},Rhino.Geometry.Vector3d)">
<summary>Projects one or more points onto one or more meshes</summary>
<param name="points">(Point3d seq) One or more 3D points</param>
<param name="meshIds">(Guid seq) Identifiers of one or more meshes</param>
<param name="direction">(Vector3d) Direction vector to project the points</param>
<returns>(Point3d array) projected points on success</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsPointvector.RhinoScriptSyntax.PointTransform.Static(Rhino.Geometry.Point3d,Rhino.Geometry.Transform)">
<summary>Transforms a 3D point</summary>
<param name="point">(Point3d) The point to transform</param>
<param name="xform">(Transform) A valid 4x4 transformation matrix</param>
<returns>(Point3d) transformed Pooint on success</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsPointvector.RhinoScriptSyntax.PointSubtract.Static(Rhino.Geometry.Point3d,Rhino.Geometry.Point3d)">
<summary>Subtracts a 3D point or a 3D vector from a 3D point</summary>
<param name="point1">(Point3d) Point1 of the points to subtract</param>
<param name="point2">(Point3d) Point2 of the points to subtract</param>
<returns>(Point3d) the resulting 3D point</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsPointvector.RhinoScriptSyntax.PointScale.Static(Rhino.Geometry.Point3d,System.Double)">
<summary>Scales a 3D point by a value</summary>
<param name="point">(Point3d) The point to divide</param>
<param name="scale">(float) Scale factor to apply</param>
<returns>(Point3d) resulting point on success</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsPointvector.RhinoScriptSyntax.PointsAreCoplanar.Static(System.Collections.Generic.IEnumerable{Rhino.Geometry.Point3d},System.Double)">
<summary>Verifies that a list of 3D points are coplanar</summary>
<param name="points">(Point3d seq) 3D points to test</param>
<param name="tolerance">(float) Optional, Default Value: <c>1.0e-12</c> = RhinoMath.ZeroTolerance
Tolerance to use when verifying </param>
<returns>(bool) True or False</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsPointvector.RhinoScriptSyntax.PointDivide.Static(Rhino.Geometry.Point3d,System.Double)">
<summary>Divides a 3D point by a value</summary>
<param name="point">(Point3d) The point to divide</param>
<param name="divide">(float) A non-zero value to divide</param>
<returns>(Point3d) resulting point</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsPointvector.RhinoScriptSyntax.PointCompare.Static(Rhino.Geometry.Point3d,Rhino.Geometry.Point3d,System.Double)">
<summary>Compares two 3D points</summary>
<param name="point1">(Point3d) Point1 of the points to compare</param>
<param name="point2">(Point3d) Point2 of the points to compare</param>
<param name="tolerance">(float) Optional, Default Value: <c>RhinoMath.ZeroTolerance</c>
Tolerance to use for comparison.</param>
<returns>(bool) True or False</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsPointvector.RhinoScriptSyntax.PointClosestObject.Static(Rhino.Geometry.Point3d,System.Collections.Generic.IEnumerable{System.Guid})">
<summary>Finds the object that is closest to a test point</summary>
<param name="point">(Point3d) Point to test</param>
<param name="objectIds">(Guid seq) Identifiers of one or more objects</param>
<returns>(Guid * Point3d * float) Tuple of 3 values
    [0] Guid, closest  objectId
    [1] the point on object
    [2] the distance</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsPointvector.RhinoScriptSyntax.PointArrayTransform.Static(System.Collections.Generic.IEnumerable{Rhino.Geometry.Point3d},Rhino.Geometry.Transform)">
<summary>Transforms a list of 3D points</summary>
<param name="points">(Point3d seq) List of 3D points</param>
<param name="xform">(Transform) Transformation to apply</param>
<returns>(Point3d ResizeArray) transformed points on success</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsPointvector.RhinoScriptSyntax.PointArrayClosestPoint.Static(System.Collections.Generic.IList{Rhino.Geometry.Point3d},Rhino.Geometry.Point3d)">
<summary>Finds the point in a list of 3D points that is closest to a test point</summary>
<param name="points">(Point3d IList) List of points</param>
<param name="testPoint">(Point3d) The point to compare against</param>
<returns>(int) index of the element in the point list that is closest to the test point</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsPointvector.RhinoScriptSyntax.PointAdd.Static(Rhino.Geometry.Point3d,Rhino.Geometry.Point3d)">
<summary>Adds a 3D point or a 3D vector to a 3D point</summary>
<param name="point1">(Point3d) Point1 of the points to add</param>
<param name="point2">(Point3d) Point2 of the points to add</param>
<returns>(Point3d) the resulting 3D point</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsPointvector.RhinoScriptSyntax.IsVectorZero.Static(Rhino.Geometry.Vector3d)">
<summary>Verifies that a vector is zero, or tiny. The X, Y, Z elements are equal to 0.0</summary>
<param name="vector">(Vector3d) The vector to check</param>
<returns>(bool) True if the vector is zero, otherwise False</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsPointvector.RhinoScriptSyntax.IsVectorTiny.Static(Rhino.Geometry.Vector3d)">
<summary>Verifies that a vector is very short. The X, Y, Z elements are smaler than 1.0e-12</summary>
<param name="vector">(Vector3d) The vector to check</param>
<returns>(bool) True if the vector is tiny, otherwise False</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsPointvector.RhinoScriptSyntax.IsVectorPerpendicularTo.Static(Rhino.Geometry.Vector3d,Rhino.Geometry.Vector3d,System.Double)">
<summary>Compares two vectors to see if they are perpendicular</summary>
<param name="vector1">(Vector3d) Vector1 of the vectors to compare</param>
<param name="vector2">(Vector3d) Vector2 of the vectors to compare</param>
<param name="toleranceDegree">(float) Optional, Default Value: <c>1.0</c>
  Angle Tolerance in degree</param>
<returns>(bool) True if vectors are perpendicular, otherwise False</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsPointvector.RhinoScriptSyntax.IsVectorParallelTo.Static(Rhino.Geometry.Vector3d,Rhino.Geometry.Vector3d,System.Double)">
<summary>Compares two vectors to see if they are parallel within one degree or custom tolerance</summary>
<param name="vector1">(Vector3d) Vector1 of the vectors to compare</param>
<param name="vector2">(Vector3d) Vector2 of the vectors to compare</param>
<param name="toleranceDegree">(float) Optional, Default Value: <c>1.0</c>
  Angle Tolerance in degree</param>
<returns>(int) the value represents
   -1 = the vectors are anti-parallel
    0 = the vectors are not parallel
    1 = the vectors are parallel</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsSelection.RhinoScriptSyntax.WindowPick.Static(Rhino.Geometry.Point3d,Rhino.Geometry.Point3d,System.String,System.Boolean,System.Boolean)">
<summary>Picks objects using either a window or crossing selection</summary>
<param name="corner1">(Point3d) Corner1 of selection window</param>
<param name="corner2">(Point3d) Corner2 of selection window</param>
<param name="view">(string) Optional, View to perform the selection in</param>
<param name="select">(bool) Optional, Default Value: <c>false</c>
Select picked objects</param>
<param name="inWindow">(bool) Optional, Default Value: <c>true</c>
If False, then a crossing window selection is performed</param>
<returns>(Guid ResizeArray) identifiers of selected objects on success</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsSelection.RhinoScriptSyntax.VisibleObjects.Static(System.String,System.Boolean,System.Boolean,System.Boolean)">
<summary>Return identifiers of all objects that are visible in a specified view</summary>
<param name="view">(string) Optional, The view to use. If omitted, the current active view is used</param>
<param name="select">(bool) Optional, Default Value: <c>false</c>
Select the objects</param>
<param name="includeLights">(bool) Optional, Default Value: <c>false</c>
Include light objects</param>
<param name="includeGrips">(bool) Optional, Default Value: <c>false</c>
Include grip objects</param>
<returns>(Guid ResizeArray) identifiers of the visible objects</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsSelection.RhinoScriptSyntax.UnselectAllObjects.Static">
<summary>Unselects all objects in the document</summary>
<returns>(int) the number of objects that were unselected</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsSelection.RhinoScriptSyntax.SelectedObjects.Static(System.Boolean,System.Boolean)">
<summary>Returns the identifiers of all objects that are currently selected</summary>
<param name="includeLights">(bool) Optional, Default Value: <c>false</c>
Include light objects</param>
<param name="includeGrips">(bool) Optional, Default Value: <c>false</c>
Include grip objects</param>
<returns>(Guid ResizeArray) identifiers of selected objects</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsSelection.RhinoScriptSyntax.ObjectsByType.Static(System.Int32,System.Boolean,System.Int32)">
<summary>Returns identifiers of all objects based on the objects' geometry type</summary>
<param name="geometryType">(int) The type(s) of geometry objects (points, curves, surfaces,
  meshes, etc.) that can be selected. Object types can be
  added together as bit-coded flags to filter several different kinds of geometry.
    Value        Description
      0           All objects
      1           Point
      2           Point cloud
      4           Curve
      8           Surface or single-face brep
      16          Polysurface or multiple-face
      32          Mesh
      256         Light
      512         Annotation
      4096        Instance or block reference
      8192        Text dot object
      16384       Grip object
      32768       Detail
      65536       Hatch
      131072      Morph control
      134217728   Cage
      268435456   Phantom
      536870912   Clipping plane
      1073741824  Extrusion</param>
<param name="select">(bool) Optional, Default Value: <c>false</c>
Select the objects</param>
<param name="state">(int) Optional, Default Value: <c>0</c>
The object state (normal, locked, and hidden). Object states can be
  added together to filter several different states of geometry.
    Value     Description
    0         All objects
    1         Normal objects
    2         Locked objects
    4         Hidden objects</param>
<returns>(Guid ResizeArray) identifiers of object that fit the specified type(s)</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsSelection.RhinoScriptSyntax.ObjectsByName.Static(System.String,System.Boolean,System.Boolean,System.Boolean)">
<summary>Returns identifiers of all objects based on user-assigned name</summary>
<param name="name">(string) Name of the object or objects</param>
<param name="select">(bool) Optional, Default Value: <c>false</c>
Select the objects</param>
<param name="includeLights">(bool) Optional, Default Value: <c>false</c>
Include light objects</param>
<param name="includeReferences">(bool) Optional, Default Value: <c>false</c>
Include refrence objects such as work session objects</param>
<returns>(Guid ResizeArray) identifiers for objects with the specified name</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsSelection.RhinoScriptSyntax.ObjectsByLayer.Static(System.String,System.Boolean)">
<summary>Returns identifiers of all objects based on the objects' layer name</summary>
<param name="layerName">(string) Name of the layer</param>
<param name="select">(bool) Optional, Default Value: <c>false</c>
Select the objects</param>
<returns>(Guid ResizeArray) identifiers for objects in the specified layer</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsSelection.RhinoScriptSyntax.ObjectsByGroup.Static(System.String,System.Boolean)">
<summary>Returns identifiers of all objects based on the objects' group name</summary>
<param name="groupName">(string) Name of the group</param>
<param name="select">(bool) Optional, Default Value: <c>false</c>
Select the objects</param>
<returns>(Guid ResizeArray) identifiers for objects in the group on success</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsSelection.RhinoScriptSyntax.ObjectsByColor.Static(System.Drawing.Color,System.Boolean,System.Boolean)">
<summary>Returns identifiers of all objects based on color</summary>
<param name="color">(Drawing.Color) Color to get objects by</param>
<param name="select">(bool) Optional, Default Value: <c>false</c>
Select the objects</param>
<param name="includeLights">(bool) Optional, Default Value: <c>false</c>
Include lights in the set</param>
<returns>(Guid ResizeArray) identifiers of objects of the selected color</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsSelection.RhinoScriptSyntax.NormalObjects.Static(System.Boolean,System.Boolean)">
<summary>Returns identifiers of all normal objects in the document. Normal objects
  are visible, can be snapped to, and are independent of selection state</summary>
<param name="includeLights">(bool) Optional, Default Value: <c>false</c>
Include light objects.  If omitted, light objects are not returned</param>
<param name="includeGrips">(bool) Optional, Default Value: <c>false</c>
Include grips objects.  If omitted, grips objects are not returned</param>
<returns>(Guid ResizeArray) identifier of normal objects </returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsSelection.RhinoScriptSyntax.NextObject.Static(System.Guid,System.Boolean,System.Boolean,System.Boolean)">
<summary>Returns the identifier of the next object in the document</summary>
<param name="objectId">(Guid) The identifier of the object from which to get the next object</param>
<param name="select">(bool) Optional, Default Value: <c>false</c>
Select the object</param>
<param name="includeLights">(bool) Optional, Default Value: <c>false</c>
Include lights in the potential set</param>
<param name="includeGrips">(bool) Optional, Default Value: <c>false</c>
Include grips in the potential set</param>
<returns>(Guid) identifier of the object on success</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsSelection.RhinoScriptSyntax.LastObject.Static(System.Boolean,System.Boolean,System.Boolean)">
<summary>Returns the identifier of the last object in the document. The last object
  in the document is the first object created by the user</summary>
<param name="select">(bool) Optional, Default Value: <c>false</c>
Select the object</param>
<param name="includeLights">(bool) Optional, Default Value: <c>false</c>
Include lights in the potential set</param>
<param name="includeGrips">(bool) Optional, Default Value: <c>false</c>
Include grips in the potential set</param>
<returns>(Guid) identifier of the object on success</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsSelection.RhinoScriptSyntax.LastCreatedObjects.Static(System.Boolean)">
<summary>Returns identifiers of the objects that were most recently created or changed
  by scripting a Rhino command using the Command function. It is important to
  call this function immediately after calling the Command function as only the
  most recently created or changed object identifiers will be returned</summary>
<param name="select">(bool) Optional, Default Value: <c>false</c>
Select the object.  If omitted, the object is not selected</param>
<returns>(Guid ResizeArray) identifiers of the most recently created or changed objects </returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsSelection.RhinoScriptSyntax.InvertSelectedObjects.Static(System.Boolean,System.Boolean,System.Boolean)">
<summary>Inverts the current object selection. The identifiers of the newly
  selected objects are returned</summary>
<param name="includeLights">(bool) Optional, Default Value: <c>false</c>
Include light objects.  If omitted, light objects are not returned</param>
<param name="includeGrips">(bool) Optional, Default Value: <c>false</c>
Include grips objects.  If omitted, grips objects are not returned</param>
<param name="includeReferences">(bool) Optional, Default Value: <c>false</c>
Include refrence objects such as work session objects</param>
<returns>(Guid ResizeArray) identifiers of the newly selected objects </returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsSelection.RhinoScriptSyntax.HiddenObjects.Static(System.Boolean,System.Boolean,System.Boolean)">
<summary>Returns identifiers of all hidden objects in the document. Hidden objects
  are not visible, cannot be snapped to, and cannot be selected</summary>
<param name="includeLights">(bool) Optional, Default Value: <c>false</c>
Include light objects</param>
<param name="includeGrips">(bool) Optional, Default Value: <c>false</c>
Include grip objects</param>
<param name="includeReferences">(bool) Optional, Default Value: <c>false</c>
Include refrence objects such as work session objects</param>
<returns>(Guid ResizeArray) identifiers of the hidden objects </returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsSelection.RhinoScriptSyntax.LockedObjects.Static(System.Boolean,System.Boolean,System.Boolean)">
<summary>Returns identifiers of all locked objects in the document. Locked objects
  cannot be snapped to, and cannot be selected</summary>
<param name="includeLights">(bool) Optional, Default Value: <c>false</c>
Include light objects</param>
<param name="includeGrips">(bool) Optional, Default Value: <c>false</c>
Include grip objects</param>
<param name="includeReferences">(bool) Optional, Default Value: <c>false</c>
Include refrence objects such as work session objects</param>
<returns>(Guid ResizeArray) identifiers the locked objects </returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsSelection.RhinoScriptSyntax.GetSurfaceObject.Static(System.String,System.Boolean,System.Boolean)">
<summary>Prompts the user to select a single surface</summary>
<param name="message">(string) Optional, Default Value: <c>"Select surface"</c>
Prompt displayed</param>
<param name="preselect">(bool) Optional, Default Value: <c>true</c>
Allow for preselected objects</param>
<param name="select">(bool) Optional, Default Value: <c>false</c>
Select the picked object</param>
<returns>(option of (Guid * bool * DocObjects.SelectionMethod * Point3d * (float * float) * string)):
  [0]  identifier of the surface
  [1]  True if the surface was preselected, otherwise False
  [2]  selection method ( DocObjects.SelectionMethod )
  [3]  selection point
  [4]  u, v surface parameter of the selection point
  [5]  name of the view in which the selection was made</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsSelection.RhinoScriptSyntax.GetPointCoordinates.Static(System.String,System.Boolean)">
<summary>Prompts the user to select one or more point objects</summary>
<param name="message">(string) Optional, Default Value: <c>"Select Point Objects"</c>
A prompt message</param>
<param name="preselect">(bool) Optional, Default Value: <c>true</c>
Allow for the selection of pre-selected objects.  If omitted, pre-selected objects are not accepted</param>
<returns>(Point3d ResizeArray) Option of LIst of 3d points</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsSelection.RhinoScriptSyntax.GetObjectsEx.Static(System.String,System.Int32,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Collections.Generic.IEnumerable{System.Guid})">
<summary>Prompts user to pick, or select one or more objects</summary>
<param name="message">(string) Optional, Default Value: <c>"Select objects"</c>
A prompt or message</param>
<param name="filter">(int) Optional, Default Value: <c>0</c>
The type(s) of geometry (points, curves, surfaces, meshes,...)
  that can be selected. Object types can be added together to filter
  several different kinds of geometry. use the filter class to get values</param>
<param name="group">(bool) Optional, Default Value: <c>true</c>
Honor object grouping.  If omitted and the user picks a group,
  the entire group will be picked (True). Note, if filter is set to a
  value other than 0 (All objects), then group selection will be disabled</param>
<param name="preselect">(bool) Optional, Default Value: <c>true</c>
Allow for the selection of pre-selected objects</param>
<param name="select">(bool) Optional, Default Value: <c>false</c>
Select the picked objects. If False, the objects that are
  picked are not selected</param>
<param name="printCount">(bool) Optional, Default Value: <c>true</c> Print object count to command window </param>
<param name="objectsToSelectFrom">(Guid seq) Optional, List of object identifiers specifying objects that are
  allowed to be selected</param>
<returns>((Guid*bool*int*Point3d*string) ResizeArray) Option of List containing the following information
  [n][0]  identifier of the object
  [n][1]  True if the object was preselected, otherwise False
  [n][2]  selection method (DocObjects.SelectionMethod)
  [n][3]  selection point
  [n][4]  name of the view selection was made</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsSelection.RhinoScriptSyntax.GetObjectsAndRemember.Static(System.String,System.Int32,System.Boolean,System.Boolean,System.Boolean,System.Collections.Generic.IEnumerable{System.Guid},System.Int32,System.Int32,System.Boolean,Rhino.Input.Custom.GetObjectGeometryFilter)">
<summary>Returns the same objects as in the last user interaction with the same prompt message
 If none found Prompts user to pick or select one or more objects and remembers them.</summary>
<param name="message">(string) Optional, Default Value: <c>"Select objects"</c>
A prompt or message</param>
<param name="filter">(int) Optional, Default Value: <c>0</c>
The type(s) of geometry (points, curves, surfaces, meshes,...)
  that can be selected. Object types can be added together to filter
  several different kinds of geometry. use the filter class to get values
    Value         Description
    0             All objects (default)
    1             Point
    2             Point cloud
    4             Curve
    8             Surface or single-face brep
    16            Polysurface or multiple-face
    32            Mesh
    256           Light
    512           Annotation
    4096          Instance or block reference
    8192          Text dot object
    16384         Grip object
    32768         Detail
    65536         Hatch
    131072        Morph control
    134217728     Cage
    268435456     Phantom
    536870912     Clipping plane
    1073741824    Extrusion</param>
<param name="group">(bool) Optional, Default Value: <c>true</c>
Honor object grouping.  If omitted and the user picks a group,
  the entire group will be picked (True). Note, if filter is set to a
  value other than 0 (All objects), then group selection will be disabled</param>
<param name="preselect">(bool) Optional, Default Value: <c>true</c>
Allow for the selection of pre-selected objects</param>
<param name="select">(bool) Optional, Default Value: <c>false</c>
Select the picked objects.  If False, the objects that are
  picked are not selected</param>
<param name="objects">(Guid seq) Optional, List of objects that are allowed to be selected. If set customFilter will be ignored</param>
<param name="minimumCount">(int) Optional, Default Value: <c>1</c>
Minimum count of objects allowed to be selected</param>
<param name="maximumCount">(int) Optional, Default Value: <c>0</c>
Maximum count of objects allowed to be selected</param>
<param name="printCount">(bool) Optional, Default Value: <c>true</c> Print object count to command window </param>
<param name="customFilter">(Input.Custom.GetObjectGeometryFilter) Optional, Will be ignored if 'objects' are set. Calls a custom function in the script and passes the Rhino Object, Geometry, and component index and returns true or false indicating if the object can be selected</param>
<returns>(Guid ResizeArray) Option of List of identifiers of the picked objects</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsSelection.RhinoScriptSyntax.GetObjects.Static(System.String,System.Int32,System.Boolean,System.Boolean,System.Boolean,System.Collections.Generic.IEnumerable{System.Guid},System.Int32,System.Int32,System.Boolean,Rhino.Input.Custom.GetObjectGeometryFilter)">
<summary>Prompts user to pick or select one or more objects</summary>
<param name="message">(string) Optional, Default Value: <c>"Select objects"</c>
A prompt or message</param>
<param name="filter">(int) Optional, Default Value: <c>0</c>
The type(s) of geometry (points, curves, surfaces, meshes,...)
  that can be selected. Object types can be added together to filter
  several different kinds of geometry. use the filter class to get values
    Value         Description
    0             All objects (default)
    1             Point
    2             Point cloud
    4             Curve
    8             Surface or single-face brep
    16            Polysurface or multiple-face
    32            Mesh
    256           Light
    512           Annotation
    4096          Instance or block reference
    8192          Text dot object
    16384         Grip object
    32768         Detail
    65536         Hatch
    131072        Morph control
    134217728     Cage
    268435456     Phantom
    536870912     Clipping plane
    1073741824    Extrusion</param>
<param name="group">(bool) Optional, Default Value: <c>true</c>
Honor object grouping.  If omitted and the user picks a group,
  the entire group will be picked (True). Note, if filter is set to a
  value other than 0 (All objects), then group selection will be disabled</param>
<param name="preselect">(bool) Optional, Default Value: <c>true</c>
Allow for the selection of pre-selected objects</param>
<param name="select">(bool) Optional, Default Value: <c>false</c>
Select the picked objects.  If False, the objects that are
  picked are not selected</param>
<param name="objectsToSelectFrom">(Guid seq) Optional, List of objects that are allowed to be selected. If set customFilter will be ignored</param>
<param name="minimumCount">(int) Optional, Default Value: <c>1</c>
Minimum count of objects allowed to be selected</param>
<param name="maximumCount">(int) Optional, Default Value: <c>0</c>
Maximum count of objects allowed to be selected</param>
<param name="printCount">(bool) Optional, Default Value: <c>true</c> Print object count to command window </param>
<param name="customFilter">(Input.Custom.GetObjectGeometryFilter) Optional, Will be ignored if 'objects' are set. Calls a custom function in the script and passes the Rhino Object, Geometry, and component index and returns true or false indicating if the object can be selected</param>
<returns>(Guid ResizeArray) Option of List of identifiers of the picked objects</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsSelection.RhinoScriptSyntax.GetObjectEx.Static(System.String,System.Int32,System.Boolean,System.Boolean,System.Collections.Generic.IEnumerable{System.Guid})">
<summary>Prompts user to pick, or select a single object</summary>
<param name="message">(string) Optional, A prompt or message</param>
<param name="filter">(int) Optional, Default Value: <c>0</c>
The type(s) of geometry (points, curves, surfaces, meshes,...)
  that can be selected. Object types can be added together to filter
  several different kinds of geometry. use the filter class to get values</param>
<param name="preselect">(bool) Optional, Default Value: <c>true</c>
Allow for the selection of pre-selected objects</param>
<param name="select">(bool) Optional, Default Value: <c>false</c>
Select the picked objects.  If False, the objects that are
  picked are not selected</param>
<param name="objects">(Guid seq) Optional, List of object identifiers specifying objects that are
  allowed to be selected</param>
<returns>(Guid * bool * float * Point3d * string) Option of Tuple containing the following information
  [0] identifier of the object
  [1] True if the object was preselected, otherwise False
  [2] selection method Enum DocObjects.SelectionMethod
       (0) selected by non-mouse method (SelAll, etc.).
       (1) selected by mouse click on theobject.
       (2) selected by being inside of amouse window.
       (3) selected by intersecting a mousecrossing window.
  [3] selection point
  [4] name of the view selection was made</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsSelection.RhinoScriptSyntax.GetObject.Static(System.String,System.Int32,System.Boolean,System.Boolean,Rhino.Input.Custom.GetObjectGeometryFilter,System.Boolean)">
<summary>Prompts user to pick, or select, a single object</summary>
<param name="message">(string) Optional, A prompt or message</param>
<param name="filter">(int) Optional, Default Value: <c>0</c>
The type(s) of geometry (points, curves, surfaces, meshes,...)
  that can be selected. Object types can be added together to filter
  several different kinds of geometry. use the RhinoScriptSyntax.Filter enum to get values, they can be joinded with '+'</param>
<param name="preselect">(bool) Optional, Default Value: <c>true</c>
Allow for the selection of pre-selected objects</param>
<param name="select">(bool) Optional, Default Value: <c>false</c>
Select the picked objects.  If False, the objects that are
  picked are not selected</param>
<param name="customFilter">(Input.Custom.GetObjectGeometryFilter) Optional, A custom filter function</param>
<param name="subobjects">(bool) Optional, Default Value: <c>false</c>
If True, subobjects can be selected. When this is the
  case, for tracking  of the subobject go via the Object Ref</param>
<returns>(Guid option) Identifier of the picked object</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsSelection.RhinoScriptSyntax.GetCurveObject.Static(System.String,System.Boolean,System.Boolean)">
<summary>Prompts user to pick or select a single curve object</summary>
<param name="message">(string) Optional, A prompt or message</param>
<param name="preselect">(bool) Optional, Default Value: <c>true</c>
Allow for the selection of pre-selected objects</param>
<param name="select">(bool) Optional, Default Value: <c>false</c>
Select the picked objects. If False, objects that
  are picked are not selected</param>
<returns>(Guid * bool * int * Point3d * float * string) Option of Tuple containing the following information
  [0]  guid     identifier of the curve object
  [1]  bool     True if the curve was preselected, otherwise False
  [2]  Enum     DocObjects.SelectionMethod
  [3]  point    selection point
  [4]  number   the curve parameter of the selection point
  [5]  str      name of the view selection was made</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsSelection.RhinoScriptSyntax.FirstObject.Static(System.Boolean,System.Boolean,System.Boolean)">
<summary>Returns identifier of the first object in the document. The first
  object is the last object created by the user</summary>
<param name="select">(bool) Optional, Default Value: <c>false</c>
Select the object.  If omitted, the object is not selected</param>
<param name="includeLights">(bool) Optional, Default Value: <c>false</c>
Include light objects.  If omitted, light objects are not returned</param>
<param name="includeGrips">(bool) Optional, Default Value: <c>false</c>
Include grips objects.  If omitted, grips objects are not returned</param>
<returns>(Guid) The identifier of the object </returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsSelection.RhinoScriptSyntax.VisibleObjects.Static(System.Int32,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
<summary>Returns identifiers of all objects that are not hidden or on turned off layers</summary>
<param name="filter">(int) Optional, Default Value: <c>0</c>
The type(s) of geometry (points, curves, surfaces, meshes,...)
  that can be selected. Object types can be added together to filter
  several different kinds of geometry. use the RhinoScriptSyntax.Filter enum to get values, they can be joinded with '+'</param>
<param name="printCount">(bool) Optional, Default Value: <c>true</c> Print object count to command window </param>
<param name="includeReferences">(bool) Optional, Default Value: <c>false</c>
Include refrence objects such as work session objects</param>
<param name="includeLockedObjects">(bool) Optional, Default Value: <c>true</c>
Include locked objects</param>
<param name="includeLights">(bool) Optional, Default Value: <c>false</c>
Include light objects</param>
<param name="includeGrips">(bool) Optional, Default Value: <c>false</c>
Include grips objects</param>  
<returns>(Guid ResizeArray) Identifiers for all the objects that are not hidden and who's layer is on and visible </returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsSelection.RhinoScriptSyntax.AllObjects.Static(System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
<summary>Returns identifiers of all objects in the document</summary>
<param name="select">(bool) Optional, Default Value: <c>false</c>
Select the objects</param>
<param name="includeLights">(bool) Optional, Default Value: <c>false</c>
Include light objects</param>
<param name="includeGrips">(bool) Optional, Default Value: <c>false</c>
Include grips objects</param>
<param name="includeReferences">(bool) Optional, Default Value: <c>false</c>
Include refrence objects such as work session objects</param>
<returns>(Guid ResizeArray) Identifiers for all the objects in the document</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsSelection.RhinoScriptSyntax.FilterHelper.Static(System.Int32)">
<summary>A helper Function for DocObjects.ObjectType Enum</summary>
<param name="filter">(int) Int representing one or several Enums as used ion Rhinopython for object types</param>
<returns>(DocObjects.ObjectType) translated DocObjects.ObjectType Enum</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsSurface.RhinoScriptSyntax.ChangeSurfaceDegree.Static(System.Guid,System.Tuple{System.Int32,System.Int32})">
<summary>Changes the degree of a surface object.  For more information see the Rhino help file for the ChangeDegree command</summary>
<param name="objectId">(Guid) The object's identifier</param>
<param name="degree">(int * int) Two integers, specifying the degrees for the U  V directions</param>
<returns>(bool) True of False indicating success or failure</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsSurface.RhinoScriptSyntax.UnrollSurface.Static(System.Guid,System.Boolean,System.Collections.Generic.IEnumerable{System.Guid},System.Double,System.Double)">
<summary>Flattens a developable surface or polysurface</summary>
<param name="surfaceId">(Guid) The surface's identifier</param>
<param name="explode">(bool) Optional, Default Value: <c>false</c>
If True, the resulting surfaces ar not joined</param>
<param name="followingGeometry">(Guid seq) Optional, List of curves, dots, and points which
  should be unrolled with the surface</param>
<param name="absoluteTolerance">(float) Optional, Default Value: <c>Doc.ModelAbsoluteTolerance</c>
Absolute tolerance</param>
<param name="relativeTolerance">(float) Optional, Default Value: <c>Doc.ModelRelativeTolerance</c>
Relative tolerance</param>
<returns>(Guid ResizeArray * Guid ResizeArray) Two lists: List of unrolled surface ids and list of following objects</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsSurface.RhinoScriptSyntax.TrimSurfaceUV.Static(System.Guid,System.Tuple{System.Double,System.Double},System.Tuple{System.Double,System.Double},System.Boolean)">
<summary>Remove portions of the surface outside of the specified interval ain U and V direction</summary>
<param name="surfaceId">(Guid) Surface identifier</param>
<param name="intervalU">(float*float) Sub section of the surface to keep in U direction</param>
<param name="intervalU">(float*float) Sub section of the surface to keep in V direction</param>
<param name="deleteInput">(bool) Optional, Default Value: <c>false</c>
Should the input surface be deleted</param>
<returns>(Guid) new surface identifier on success</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsSurface.RhinoScriptSyntax.TrimSurfaceV.Static(System.Guid,System.Tuple{System.Double,System.Double},System.Boolean)">
<summary>Remove portions of the surface outside of the specified interval in V direction</summary>
<param name="surfaceId">(Guid) Surface identifier</param>
<param name="interval">(float*float) Sub section of the surface to keep.
<param name="deleteInput">(bool) Optional, Default Value: <c>false</c>
Should the input surface be deleted</param>
<returns>(Guid) new surface identifier on success</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsSurface.RhinoScriptSyntax.TrimSurfaceU.Static(System.Guid,System.Tuple{System.Double,System.Double},System.Boolean)">
<summary>Remove portions of the surface outside of the specified interval in U direction</summary>
<param name="surfaceId">(Guid) Surface identifier</param>
<param name="interval">(float*float) Sub section of the surface to keep.
<param name="deleteInput">(bool) Optional, Default Value: <c>false</c>
Should the input surface be deleted</param>
<returns>(Guid) new surface identifier on success</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsSurface.RhinoScriptSyntax.TrimBrep.Static(System.Guid,Rhino.Geometry.Plane,System.Double)">
<summary>Trims a surface using an oriented cutter Plane</summary>
<param name="objectId">(Guid) Surface or polysurface identifier</param>
<param name="cutter">(Plane) Plane performing the trim</param>
<param name="tolerance">(float) Optional, Default Value: <c>Doc.ModelAbsoluteTolerance</c></param>
<returns>(Guid ResizeArray) identifiers of retained components on success</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsSurface.RhinoScriptSyntax.TrimBrep.Static(System.Guid,System.Guid,System.Double)">
<summary>Trims a surface or polysurface using an oriented cutter brep or surface</summary>
<param name="objectId">(Guid) Surface or polysurface identifier</param>
<param name="cutter">(Guid) Surface or polysurface  performing the trim</param>
<param name="tolerance">(float) Optional, Default Value: <c>Doc.ModelAbsoluteTolerance</c></param>
<returns>(Guid ResizeArray) identifiers of retained components on success</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsSurface.RhinoScriptSyntax.SurfaceWeights.Static(System.Guid)">
<summary>Returns list of weight values assigned to the control points of a surface.
  The number of weights returned will be equal to the number of control points
  in the U and V directions</summary>
<param name="objectId">(Guid) The surface's identifier</param>
<returns>(float ResizeArray) point weights</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsSurface.RhinoScriptSyntax.SurfaceVolumeMoments.Static(System.Guid)">
<summary>Calculates volume moments of inertia of a surface or polysurface object.
  For more information, see Rhino help for "Mass Properties calculation details"</summary>
<param name="objectId">(Guid) The surface's identifier</param>
<returns>((float*float*float) ResizeArray) of moments and error bounds in tuple(X, Y, Z) - see help topic
  Index   Description
  [0]     First Moments.
  [1]     The absolute (+/-) error bound for the First Moments.
  [2]     Second Moments.
  [3]     The absolute (+/-) error bound for the Second Moments.
  [4]     Product Moments.
  [5]     The absolute (+/-) error bound for the Product Moments.
  [6]     Area Moments of Inertia about the World Coordinate Axes.
  [7]     The absolute (+/-) error bound for the Area Moments of Inertia about World Coordinate Axes.
  [8]     Area Radii of Gyration about the World Coordinate Axes.
  [9]     The absolute (+/-) error bound for the Area Radii of Gyration about World Coordinate Axes.
  [10]    Area Moments of Inertia about the Centroid Coordinate Axes.
  [11]    The absolute (+/-) error bound for the Area Moments of Inertia about the Centroid Coordinate Axes.
  [12]    Area Radii of Gyration about the Centroid Coordinate Axes.
  [13]    The absolute (+/-) error bound for the Area Radii of Gyration about the Centroid Coordinate Axes</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsSurface.RhinoScriptSyntax.SurfaceVolumeCentroid.Static(System.Guid)">
<summary>Calculates volume centroid of a closed surface or polysurface</summary>
<param name="objectId">(Guid) The surface's identifier</param>
<returns>(Point3d) Volume Centriod</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsSurface.RhinoScriptSyntax.SurfaceVolume.Static(System.Guid)">
<summary>Calculates volume of a closed surface or polysurface</summary>
<param name="objectId">(Guid) The surface's identifier</param>
<returns>(float) the volume</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsSurface.RhinoScriptSyntax.SurfaceTorus.Static(System.Guid)">
<summary>Returns the definition of a surface torus</summary>
<param name="surfaceId">(Guid) The surface's identifier</param>
<returns>(Plane * float * float) containing the definition of the torus
  [0]   the base plane of the torus
  [1]   the major radius of the torus
  [2]   the minor radius of the torus</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsSurface.RhinoScriptSyntax.SurfacePoints.Static(System.Guid,System.Boolean)">
<summary>Returns the control points, or control vertices, of a surface object</summary>
<param name="surfaceId">(Guid) The surface's identifier</param>
<param name="returnAll">(bool) Optional, Default Value: <c>true</c>
If True all surface edit points are returned. If False,
  the function will return surface edit points based on whether or not
  the surface is closed or periodic</param>
<returns>(Point3d ResizeArray) the control points</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsSurface.RhinoScriptSyntax.SurfacePointCount.Static(System.Guid)">
<summary>Returns the control point count of a surface
  surfaceId = the surface's identifier</summary>
<param name="surfaceId">(Guid) The surface object's identifier</param>
<returns>(int * int) THe number of control points in UV direction. (U count, V count)</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsSurface.RhinoScriptSyntax.SurfaceParameter.Static(System.Guid,System.Tuple{System.Double,System.Double})">
<summary>Converts normalized surface parameter to a surface parameter; or
  within the surface's domain</summary>
<param name="surfaceId">(Guid) The surface's identifier</param>
<param name="parameter">(float * float) The normalized parameter to convert</param>
<returns>(float * float) surface parameter on success</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsSurface.RhinoScriptSyntax.SurfaceNormalizedParameter.Static(System.Guid,System.Tuple{System.Double,System.Double})">
<summary>Converts surface parameter to a normalized surface parameter; one that
  ranges between 0.0 and 1.0 in both the U and V directions</summary>
<param name="surfaceId">(Guid) The surface's identifier</param>
<param name="parameter">(float * float) The surface parameter to convert</param>
<returns>(float * float) normalized surface parameter</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsSurface.RhinoScriptSyntax.SurfaceNormal.Static(System.Guid,System.Tuple{System.Double,System.Double})">
<summary>Returns 3D vector that is the normal to a surface at a parameter</summary>
<param name="surfaceId">(Guid) The surface's identifier</param>
<param name="uvParameter">(float * float) The uv parameter to evaluate</param>
<returns>(Vector3d) Normal vector on success</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsSurface.RhinoScriptSyntax.SurfaceKnots.Static(System.Guid)">
<summary>Returns the knots, or knot vector, of a surface object</summary>
<param name="surfaceId">(Guid) The surface's identifier</param>
<returns>(NurbsSurfaceKnotList * NurbsSurfaceKnotList) knot values of the surface. 
  The list will contain the following information:
  Element   Description
    [0]     Knot vectors in U direction
    [1]     Knot vectors in V direction</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsSurface.RhinoScriptSyntax.SurfaceKnotCount.Static(System.Guid)">
<summary>Returns the control point count of a surface
  surfaceId = the surface's identifier</summary>
<param name="surfaceId">(Guid) The surface object's identifier</param>
<returns>(int * int) a list containing (U count, V count) on success</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsSurface.RhinoScriptSyntax.SurfaceIsocurveDensity.Static(System.Collections.Generic.IEnumerable{System.Guid},System.Int32)">
<summary>Sets the isocurve density of multiple surface or polysurface objects.
 An isoparametric curve is a curve of constant U or V value on a surface.
 Rhino uses isocurves and surface edge curves to visualize the shape of a
 NURBS surface</summary>
<param name="surfaceIds">(Guid seq) The surface's identifiers</param>
<param name="density">(int) The isocurve wireframe density. The possible values are
    -1: Hides the surface isocurves
    0: Display boundary and knot wires
    1: Display boundary and knot wires and one interior wire if there are no interior knots
    bigger than 1: Display boundary and knot wires and (N+1) interior wires</param>
<returns>(unit) void, nothing</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsSurface.RhinoScriptSyntax.SurfaceIsocurveDensity.Static(System.Guid,System.Int32)">
<summary>Sets the isocurve density of a surface or polysurface object.
 An isoparametric curve is a curve of constant U or V value on a surface.
 Rhino uses isocurves and surface edge curves to visualize the shape of a
 NURBS surface</summary>
<param name="surfaceId">(Guid) The surface's identifier</param>
<param name="density">(int) The isocurve wireframe density. The possible values are
    -1: Hides the surface isocurves
    0: Display boundary and knot wires
    1: Display boundary and knot wires and one interior wire if there are no interior knots
    bigger than 1: Display boundary and knot wires and (N+1) interior wires</param>
<returns>(unit) void, nothing</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsSurface.RhinoScriptSyntax.SurfaceIsocurveDensity.Static(System.Guid)">
<summary>Returns the isocurve density of a surface or polysurface object.
 An isoparametric curve is a curve of constant U or V value on a surface.
 Rhino uses isocurves and surface edge curves to visualize the shape of a
 NURBS surface</summary>
<param name="surfaceId">(Guid) The surface's identifier</param>
<returns>(int) The current isocurve density
    -1: Hides the surface isocurves
    0: Display boundary and knot wires
    1: Display boundary and knot wires and one interior wire if there are no interior knots
    bigger than 1: Display boundary and knot wires and (N+1) interior wires</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsSurface.RhinoScriptSyntax.SurfaceFrame.Static(System.Guid,System.Tuple{System.Double,System.Double})">
<summary>Returns a plane based on the normal, u, and v directions at a surface
  U, V parameter</summary>
<param name="surfaceId">(Guid) The surface's identifier</param>
<param name="uvParameter">(float * float) U, v parameter to evaluate</param>
<returns>(Plane) plane</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsSurface.RhinoScriptSyntax.SurfaceEvaluate.Static(System.Guid,System.Tuple{System.Double,System.Double},System.Int32)">
<summary>A general purpose surface evaluator</summary>
<param name="surfaceId">(Guid) The surface's identifier</param>
<param name="parameter">(float * float) U, v parameter to evaluate</param>
<param name="derivative">(int) Number of derivatives to evaluate</param>
<returns>(Point3d * Vector3d ResizeArray) list length (derivative+1)*(derivative+2)/2 .  The elements are as follows:
  firts Element of tuple
  [fst]      The 3-D point.
  [snd]   Vectors in List:
          [0]      The first derivative.
          [1]      The first derivative.
          [2]      The second derivative.
          [3]      The second derivative.
          [4]      The second derivative.
          [5]      etc...
</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsSurface.RhinoScriptSyntax.SurfaceEditPointPrameters.Static(System.Guid,System.Boolean)">
<summary>Returns the parameters at edit, or Greville points of a surface object. For each
  surface control point, there is a corresponding edit point</summary>
<param name="surfaceId">(Guid) The surface's identifier</param>
<param name="returnAll">(bool) Optional, Default Value: <c>true</c>
If True, all surface edit points are returned. If False,
  the function will return surface edit points based on whether or not the
  surface is closed or periodic</param>
<returns>((float*float) ResizeArray) a list of U and V parameters</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsSurface.RhinoScriptSyntax.SurfaceEditPoints.Static(System.Guid,System.Boolean)">
<summary>Returns the edit, or Greville points of a surface object. For each
  surface control point, there is a corresponding edit point</summary>
<param name="surfaceId">(Guid) The surface's identifier</param>
<param name="returnAll">(bool) Optional, Default Value: <c>true</c>
If True, all surface edit points are returned. If False,
  the function will return surface edit points based on whether or not the
  surface is closed or periodic</param>
<returns>(Point3d ResizeArray) a list of 3D points</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsSurface.RhinoScriptSyntax.SurfaceDomain.Static(System.Guid,System.Int32)">
<summary>Returns the domain of a surface object in the specified direction</summary>
<param name="surfaceId">(Guid) The surface's identifier</param>
<param name="direction">(int) Domain direction 0 = U, or 1 = V</param>
<returns>(float * float) containing the domain interval in the specified direction</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsSurface.RhinoScriptSyntax.SurfaceDegree.Static(System.Guid)">
<summary>Returns the U and V degrees of a surface</summary>
<param name="surfaceId">(Guid) The surface's identifier</param>
<returns>(int*int) The degree in U and V direction</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsSurface.RhinoScriptSyntax.SurfaceCylinder.Static(System.Guid)">
<summary>Returns the definition of a cylinder surface</summary>
<param name="surfaceId">(Guid) The surface's identifier</param>
<returns>(Plane * float * float) of the cylinder plane, height, radius on success</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsSurface.RhinoScriptSyntax.SurfaceCurvature.Static(System.Guid,System.Tuple{System.Double,System.Double})">
<summary>Returns the curvature of a surface at a U, V parameter. See Rhino help
  for details of surface curvature</summary>
<param name="surfaceId">(Guid) The surface's identifier</param>
<param name="parameter">(float * float) U, v parameter</param>
<returns>(Point3d * Vector3d * float * Vector3d * float * Vector3d * float * float) of curvature information
  [0]   point at specified U, V parameter
  [1]   normal direction
  [2]   maximum principal curvature
  [3]   maximum principal curvature direction
  [4]   minimum principal curvature
  [5]   minimum principal curvature direction
  [6]   gaussian curvature
  [7]   mean curvature</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsSurface.RhinoScriptSyntax.SurfaceCone.Static(System.Guid)">
<summary>Returns the definition of a surface cone</summary>
<param name="surfaceId">(Guid) The surface's identifier</param>
<returns>(Plane * float * float) containing the definition of the cone
  [0]   the plane of the cone. The apex of the cone is at the
    plane's origin and the axis of the cone is the plane's z-axis
  [1]   the height of the cone
  [2]   the radius of the cone</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsSurface.RhinoScriptSyntax.SurfaceClosestParameter.Static(System.Guid,Rhino.Geometry.Point3d)">
<summary>Returns U, V parameters of point on a surface that is closest to a test point</summary>
<param name="surfaceId">(Guid) Identifier of a surface object</param>
<param name="testPoint">(Point3d) Sampling point</param>
<returns>(float * float) The U, V parameters of the closest point on the surface </returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsSurface.RhinoScriptSyntax.SurfaceClosestPoint.Static(System.Guid,Rhino.Geometry.Point3d)">
<summary>Returns the point on a surface that is closest to a test point</summary>
<param name="surfaceId">(Guid) Identifier of a surface object</param>
<param name="testPoint">(Point3d) Sampling point</param>
<returns>(Point3d) The closest point on the surface </returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsSurface.RhinoScriptSyntax.SurfaceAreaMoments.Static(System.Guid)">
<summary>Calculates area moments of inertia of a surface or polysurface object.
  See the Rhino help for "Mass Properties calculation details"</summary>
<param name="surfaceId">(Guid) The surface's identifier</param>
<returns>((float*float*float) ResizeArray ) of moments and error bounds in tuples(X, Y, Z) - see help topic
  Index   Description
  [0]     First Moments.
  [1]     The absolute (+/-) error bound for the First Moments.
  [2]     Second Moments.
  [3]     The absolute (+/-) error bound for the Second Moments.
  [4]     Product Moments.
  [5]     The absolute (+/-) error bound for the Product Moments.
  [6]     Area Moments of Inertia about the World Coordinate Axes.
  [7]     The absolute (+/-) error bound for the Area Moments of Inertia about World Coordinate Axes.
  [8]     Area Radii of Gyration about the World Coordinate Axes.
  [9]     (Not impemented yet) The absolute (+/-) error bound for the Area Radii of Gyration about World Coordinate Axes.
  [10]    Area Moments of Inertia about the Centroid Coordinate Axes.
  [11]    The absolute (+/-) error bound for the Area Moments of Inertia about the Centroid Coordinate Axes.
  [12]    Area Radii of Gyration about the Centroid Coordinate Axes.
  [13]    (Not impemented yet) The absolute (+/-) error bound for the Area Radii of Gyration about the Centroid Coordinate Axes</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsSurface.RhinoScriptSyntax.SurfaceAreaCentroid.Static(System.Guid)">
<summary>Calculates the area centroid of a surface or polysurface</summary>
<param name="objectId">(Guid) The surface's identifier</param>
<returns>(Point3d ) Area centroid</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsSurface.RhinoScriptSyntax.SurfaceArea.Static(System.Guid)">
<summary>Calculate the area of a surface or polysurface object. The results are
  based on the current drawing units</summary>
<param name="objectId">(Guid) The surface's identifier</param>
<returns>(float) of area</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsSurface.RhinoScriptSyntax.SplitBrep.Static(System.Guid,System.Guid,System.Boolean)">
<summary>Splits a brep</summary>
<param name="brepId">(Guid) Identifier of the brep to split</param>
<param name="cutterId">(Guid) Identifier of the brep to split with</param>
<param name="deleteInput">(bool) Optional, Default Value: <c>false</c>
Delete input breps</param>
<returns>(Guid ResizeArray) identifiers of split pieces on success</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsSurface.RhinoScriptSyntax.ShrinkTrimmedSurface.Static(System.Guid,System.Boolean)">
<summary>Shrinks the underlying untrimmed surfaces near to the trimming
  boundaries. See the ShrinkTrimmedSrf command in the Rhino help</summary>
<param name="objectId">(Guid) The surface's identifier</param>
<param name="createCopy">(bool) Optional, Default Value: <c>false</c>
If True, the original surface is not deleted</param>
<returns>(Guid) If createCopy is true the new Guid, else the input Guid</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsSurface.RhinoScriptSyntax.ShortPath.Static(System.Guid,Rhino.Geometry.Point3d,Rhino.Geometry.Point3d)">
<summary>Creates the shortest possible curve(geodesic) between two points on a
  surface. For more details, see the ShortPath command in Rhino help</summary>
<param name="surfaceId">(Guid) Identifier of a surface</param>
<param name="startPoint">(Point3d) Start point the short curve</param>
<param name="endPoint">(Point3d) End point of the short curve</param>
<returns>(Guid) identifier of the new surface on success</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsSurface.RhinoScriptSyntax.ShootRay.Static(System.Collections.Generic.IEnumerable{System.Guid},Rhino.Geometry.Point3d,Rhino.Geometry.Vector3d,System.Int32)">
<summary>Shoots a ray at a collection of surfaces or Polysurfaces</summary>
<param name="surfaceIds">(Guid seq) One of more surface identifiers</param>
<param name="startPoint">(Point3d) Starting point of the ray</param>
<param name="direction">(Vector3d) Vector identifying the direction of the ray</param>
<param name="reflections">(int) Optional, Default Value: <c>10</c>
The maximum number of times the ray will be reflected</param>
<returns>(Point3d array) of reflection points on success</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsSurface.RhinoScriptSyntax.ReverseSurface.Static(System.Guid,System.Int32)">
<summary>Reverses U or V directions of a surface, or swaps (transposes) U and V
  directions</summary>
<param name="surfaceId">(Guid) Identifier of a surface object</param>
<param name="direction">(int) As a bit coded flag to swap
  1 = reverse U
  2 = reverse V
  4 = transpose U and V (values can be combined)</param>
<returns>(unit) void, nothing</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsSurface.RhinoScriptSyntax.RemoveSurfaceKnot.Static(System.Guid,System.Tuple{System.Double,System.Double},System.Boolean)">
<summary>Deletes a knot from a surface object</summary>
<param name="surface">(Guid) The reference of the surface object</param>
<param name="uvParameter">(float * float) ): An indexable item containing a U, V parameter on the surface. List, tuples and UVIntervals will work.
  Note, if the parameter is not equal to one of the existing knots, then the knot closest to the specified parameter will be removed</param>
<param name="vDirection">(bool) If True, or 1, the V direction will be addressed. If False, or 0, the U direction</param>
<returns>(bool) True of False indicating success or failure</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsSurface.RhinoScriptSyntax.RebuildSurface.Static(System.Guid,System.Tuple{System.Int32,System.Int32},System.Tuple{System.Int32,System.Int32})">
<summary>Rebuilds a surface to a given degree and control point count. For more
  information see the Rhino help file for the Rebuild command</summary>
<param name="objectId">(Guid) The surface's identifier</param>
<param name="degree">(int * int) Optional, Default Value: <c>3*3</c>
Two numbers that identify surface degree in both U and V directions</param>
<param name="pointcount">(int * int) Optional, Default Value: <c>10*10</c>
Two numbers that identify the surface point count in both the U and V directions</param>
<returns>(bool) True of False indicating success or failure</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsSurface.RhinoScriptSyntax.PullCurve.Static(System.Guid,System.Guid,System.Boolean)">
<summary>Pulls a curve object to a surface object</summary>
<param name="surface">(Guid) The surface's identifier</param>
<param name="curve">(Guid) The curve's identifier</param>
<param name="deleteInput">(bool) Optional, Default Value: <c>false</c>
Should the input items be deleted</param>
<returns>(Guid ResizeArray) of new curves</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsSurface.RhinoScriptSyntax.OffsetSurface.Static(System.Guid,System.Double,System.Double,System.Boolean,System.Boolean)">
<summary>Offsets a trimmed or untrimmed surface by a distance. The offset surface
  will be added to Rhino</summary>
<param name="surfaceId">(Guid) The surface's identifier</param>
<param name="distance">(float) The distance to offset</param>
<param name="tolerance">(float) Optional, Default Value: <c>Doc.ModelAbsoluteTolerance</c>
The offset tolerance. Use 0.0 to make a loose offset. Otherwise, the
  document's absolute tolerance is usually sufficient</param>
<param name="bothSides">(bool) Optional, Default Value: <c>false</c>
Offset to both sides of the input surface</param>
<param name="createSolid">(bool) Optional, Default Value: <c>false</c>
Make a solid object</param>
<returns>(Guid) identifier of the new object</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsSurface.RhinoScriptSyntax.MakeSurfacePeriodic.Static(System.Guid,System.Int32,System.Boolean)">
<summary>Makes an existing surface a periodic NURBS surface</summary>
<param name="surfaceId">(Guid) The surface's identifier</param>
<param name="direction">(int) The direction to make periodic, either 0= U or 1= V</param>
<param name="deleteInput">(bool) Optional, Default Value: <c>false</c>
Delete the input surface</param>
<returns>(Guid) if deleteInput is False, identifier of the new surface</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsSurface.RhinoScriptSyntax.JoinSurfaces.Static(System.Collections.Generic.IEnumerable{System.Guid},System.Boolean)">
<summary>Joins two or more surface or polysurface objects together to form one
  polysurface object</summary>
<param name="objectIds">(Guid seq) List of object identifiers</param>
<param name="deleteInput">(bool) Optional, Default Value: <c>false</c>
Delete the original surfaces</param>
<returns>(Guid) identifier of newly created object on success</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsSurface.RhinoScriptSyntax.SurfaceSphere.Static(System.Guid)">
<summary>Gets the sphere definition from a surface, if possible</summary>
<param name="surfaceId">(Guid) The identifier of the surface object</param>
<returns>(Plane * float) The equatorial plane of the sphere, and its radius</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsSurface.RhinoScriptSyntax.IsTorus.Static(System.Guid)">
<summary>Determines if a surface is a portion of a torus</summary>
<param name="surfaceId">(Guid) The surface object's identifier</param>
<returns>(bool) True , otherwise False</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsSurface.RhinoScriptSyntax.IsSurfaceTrimmed.Static(System.Guid)">
<summary>Verifies a surface object has been trimmed</summary>
<param name="surfaceId">(Guid) The surface's identifier</param>
<returns>(bool) True or False</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsSurface.RhinoScriptSyntax.IsSurfaceSingular.Static(System.Guid,System.Int32)">
<summary>Verifies a surface object is singular in the specified direction.
  Surfaces are considered singular if a side collapses to a point</summary>
<param name="surfaceId">(Guid) The surface's identifier</param>
<param name="direction">(int) 0= south
  1= east
  2= north
  3= west</param>
<returns>(bool) True or False</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsSurface.RhinoScriptSyntax.IsSurfaceRational.Static(System.Guid)">
<summary>Verifies a surface object is rational</summary>
<param name="surfaceId">(Guid) The surface's identifier</param>
<returns>(bool) True , otherwise False</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsSurface.RhinoScriptSyntax.IsSurfacePlanar.Static(System.Guid,System.Double)">
<summary>Verifies a surface object is planar</summary>
<param name="surfaceId">(Guid) Identifier of a surface</param>
<param name="tolerance">(float) Optional, Default Value: <c>Doc.ModelAbsoluteTolerance</c>
Tolerance used when checked. If omitted, the current absolute
  tolerance is used</param>
<returns>(bool) True or False</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsSurface.RhinoScriptSyntax.IsSurfacePeriodic.Static(System.Guid,System.Int32)">
<summary>Verifies a surface object is periodic in the specified direction</summary>
<param name="surfaceId">(Guid) Identifier of a surface</param>
<param name="direction">(int) 0= U direction check, 1= V direction check</param>
<returns>(bool) True or False</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsSurface.RhinoScriptSyntax.IsSurfaceClosed.Static(System.Guid,System.Int32)">
<summary>Verifies a surface object is closed in the specified direction.  If the
  surface fully encloses a volume, it is considered a solid</summary>
<param name="surfaceId">(Guid) Identifier of a surface</param>
<param name="direction">(int) 0= U direction check, 1= V direction check</param>
<returns>(bool) True or False</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsSurface.RhinoScriptSyntax.IsSurface.Static(System.Guid)">
<summary>Verifies an object is a surface. Brep objects with only one face are
  also considered surfaces</summary>
<param name="objectId">(Guid) The object's identifier</param>
<returns>(bool) True , otherwise False</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsSurface.RhinoScriptSyntax.IsSphere.Static(System.Guid)">
<summary>Determines if a surface is a portion of a sphere</summary>
<param name="objectId">(Guid) The object's identifier</param>
<returns>(bool) True , otherwise False</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsSurface.RhinoScriptSyntax.IsPolysurfaceClosed.Static(System.Guid)">
<summary>Verifies a Guid refers to a closed polysurface. If the polysurface fully encloses
  a volume, it is considered a solid</summary>
<param name="objectId">(Guid) The object's identifier</param>
<returns>(bool) True is successful, otherwise False</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsSurface.RhinoScriptSyntax.IsPolysurface.Static(System.Guid)">
<summary>Verifies an object is a polysurface. Polysurfaces consist of two or more
  surfaces joined together. If the polysurface fully encloses a volume, it is
  considered a solid</summary>
<param name="objectId">(Guid) The object's identifier</param>
<returns>(bool) True is successful, otherwise False</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsSurface.RhinoScriptSyntax.IsPointOnSurface.Static(System.Guid,Rhino.Geometry.Point3d)">
<summary>Verifies that a point lies on a surface</summary>
<param name="objectId">(Guid) The object's identifier</param>
<param name="point">(Point3d) The test, or sampling point</param>
<returns>(bool) True , otherwise False</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsSurface.RhinoScriptSyntax.IsPointInSurface.Static(System.Guid,Rhino.Geometry.Point3d,System.Boolean,System.Double)">
<summary>Verifies that a point is inside a closed mesh ,surface or polysurface</summary>
<param name="objectId">(Guid) The object's identifier</param>
<param name="point">(Point3d) The test, or sampling point</param>
<param name="strictlyIn">(bool) Optional, Default Value: <c>false</c>
If true, the test point must be inside by at least tolerance</param>
<param name="tolerance">(float) Optional, Default Value: <c>RhinoMath.SqrtEpsilon</c>
Distance tolerance used for intersection and determining
  strict inclusion. </param>
<returns>(bool) True , otherwise False</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsSurface.RhinoScriptSyntax.IsPlaneSurface.Static(System.Guid)">
<summary>Verifies an object is a plane surface. Plane surfaces can be created by
  the Plane command. Note, a plane surface is not a planar NURBS surface</summary>
<param name="objectId">(Guid) The object's identifier</param>
<returns>(bool) True , otherwise False</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsSurface.RhinoScriptSyntax.IsCylinder.Static(System.Guid)">
<summary>Determines if a surface is a portion of a cone</summary>
<param name="objectId">(Guid) The cylinder object's identifier</param>
<returns>(bool) True , otherwise False</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsSurface.RhinoScriptSyntax.IsCone.Static(System.Guid)">
<summary>Determines if a surface is a portion of a cone</summary>
<param name="objectId">(Guid) The surface object's identifier</param>
<returns>(bool) True , otherwise False</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsSurface.RhinoScriptSyntax.IsBrep.Static(System.Guid)">
<summary>Verifies an object is a Brep, or a boundary representation model, object</summary>
<param name="objectId">(Guid) The object's identifier</param>
<returns>(bool) True , otherwise False</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsSurface.RhinoScriptSyntax.IntersectSpheres.Static(Rhino.Geometry.Plane,System.Double,Rhino.Geometry.Plane,System.Double)">
<summary>Calculates intersections of two spheres</summary>
<param name="spherePlane0">(Plane) An equatorial plane of the first sphere. The origin of the
  plane will be the center point of the sphere</param>
<param name="sphereRadius0">(float) Radius of the first sphere</param>
<param name="spherePlane1">(Plane) Plane for second sphere</param>
<param name="sphereRadius1">(float) Radius for second sphere</param>
<returns>(int * Circle * float ) of intersection results
  [0] = type of intersection (0= point, 1= circle, 2= spheres are identical)
  [1] = Circle of  intersection , if type is Point take Circle center
  [2] = radius of circle if circle intersection</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsSurface.RhinoScriptSyntax.IntersectBreps.Static(System.Guid,System.Guid,System.Double)">
<summary>Intersects a brep object with another brep object. Note, unlike the
  SurfaceSurfaceIntersection function this function works on trimmed surfaces</summary>
<param name="brep1">(Guid) Identifier of first brep object</param>
<param name="brep2">(Guid) Identifier of second brep object</param>
<param name="tolerance">(float) Optional, Default Value: <c>Doc.ModelAbsoluteTolerance</c>
Distance tolerance at segment midpoints. If omitted,
  the current absolute tolerance is used</param>
<returns>(Guid ResizeArray) identifying the newly created intersection curve and point objects </returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsSurface.RhinoScriptSyntax.FlipSurface.Static(System.Collections.Generic.IEnumerable{System.Guid},System.Boolean)">
<summary>Changes the normal direction of multiple surface. This feature can
 also be found in Rhino's Dir command</summary>
<param name="surfaceIds">(Guid seq) Identifiers of multiple surface objects</param>
<param name="flip">(bool) New normal orientation, either flipped(True) or not flipped (False)</param>
<returns>(unit) void, nothing</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsSurface.RhinoScriptSyntax.FlipSurface.Static(System.Guid,System.Boolean)">
<summary>Changes the normal direction of a surface. This feature can
 also be found in Rhino's Dir command</summary>
<param name="surfaceId">(Guid) Identifier of a surface object</param>
<param name="flip">(bool) New normal orientation, either flipped(True) or not flipped (False)</param>
<returns>(unit) void, nothing</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsSurface.RhinoScriptSyntax.FlipSurface.Static(System.Guid)">
<summary>Returns the normal direction of a surface. This feature can
 also be found in Rhino's Dir command</summary>
<param name="surfaceId">(Guid) Identifier of a surface object</param>
<returns>(bool) The current normal orientation</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsSurface.RhinoScriptSyntax.FilletSurfaces.Static(System.Guid,System.Guid,System.Double,Rhino.Geometry.Point2d,Rhino.Geometry.Point2d)">
<summary>Create constant radius rolling ball fillets between two surfaces. Note,
  this function does not trim the original surfaces of the fillets</summary>
<param name="surface0">(Guid) first surface</param>
<param name="surface1">(Guid) second surface</param>
<param name="radius">(float) A positive fillet radius</param>
<param name="uvparam0">(Point2d) Optional, A u, v surface parameter of surface0 near where the fillet
  is expected to hit the surface</param>
<param name="uvparam1">(Point2d) Optional, Same as uvparam0, but for surface1</param>
<returns>(Guid ResizeArray) ids of surfaces created on success</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsSurface.RhinoScriptSyntax.ExtrudeSurface.Static(System.Guid,System.Guid,System.Boolean)">
<summary>Create surface by extruding along a path curve</summary>
<param name="surface">(Guid) Identifier of the surface to extrude</param>
<param name="curve">(Guid) Identifier of the path curve</param>
<param name="cap">(bool) Optional, Default Value: <c>true</c>
Extrusion is capped at both ends</param>
<returns>(Guid) identifier of new surface on success</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsSurface.RhinoScriptSyntax.ExtrudeCurveStraight.Static(System.Guid,Rhino.Geometry.Point3d,Rhino.Geometry.Point3d)">
<summary>Create surface by extruding a curve along two points that define a line</summary>
<param name="curveId">(Guid) Identifier of the curve to extrude</param>
<param name="startPoint">(Point3d) Start point</param>
<param name="endPoint">(Point3d) End point, that specifyies distance and direction</param>
<returns>(Guid) identifier of new surface on success</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsSurface.RhinoScriptSyntax.ExtrudeCurvePoint.Static(System.Guid,Rhino.Geometry.Point3d)">
<summary>Creates a surface by extruding a curve to a point</summary>
<param name="curveId">(Guid) Identifier of the curve to extrude</param>
<param name="point">(Point3d) 3D point</param>
<returns>(Guid) identifier of new surface on success</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsSurface.RhinoScriptSyntax.ExtrudeCurve.Static(System.Guid,System.Guid)">
<summary>Creates a surface by extruding a curve along a path</summary>
<param name="curveId">(Guid) Identifier of the curve to extrude</param>
<param name="pathId">(Guid) Identifier of the path curve</param>
<returns>(Guid) identifier of new surface on success</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsSurface.RhinoScriptSyntax.ExtractSurface.Static(System.Guid,System.Collections.Generic.IEnumerable{System.Int32},System.Boolean)">
<summary>Separates or copies a surface or a copy of a surface from a polysurface</summary>
<param name="objectId">(Guid) Polysurface identifier</param>
<param name="faceIndices">(int seq) One or more numbers representing faces</param>
<param name="copy">(bool) Optional, Default Value: <c>false</c>
If True the faces are copied. If False, the faces are extracted</param>
<returns>(Guid ResizeArray) identifiers of extracted surface objects on success</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsSurface.RhinoScriptSyntax.ExtractIsoCurve.Static(System.Guid,System.Tuple{System.Double,System.Double},System.Int32)">
<summary>Extracts isoparametric curves from a surface</summary>
<param name="surfaceId">(Guid) Identifier of a surface</param>
<param name="parameter">(float * float) U, v parameter of the surface to evaluate</param>
<param name="direction">(int) Direction to evaluate
  0 = u
  1 = v
  2 = both</param>
<returns>(Guid ResizeArray) of curve ids on success</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsSurface.RhinoScriptSyntax.ExplodePolysurfaces.Static(System.Collections.Generic.IEnumerable{System.Guid},System.Boolean)">
<summary>Explodes, or unjoins, one or more polysurface objects. Polysurfaces
  will be exploded into separate surfaces</summary>
<param name="objectIds">(Guid seq) Identifiers of polysurfaces to explode</param>
<param name="deleteInput">(bool) Optional, Default Value: <c>false</c>
Delete input objects after exploding</param>
<returns>(Guid ResizeArray) of identifiers of exploded pieces on success</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsSurface.RhinoScriptSyntax.ExtendSurface.Static(System.Guid,System.Tuple{System.Double,System.Double},System.Double,System.Boolean)">
<summary>Lengthens an untrimmed surface object</summary>
<param name="surfaceId">(Guid) Identifier of a surface</param>
<param name="parameter">(float * float) Tuple of two values definfing the U, V parameter to evaluate.
  The surface edge closest to the U, V parameter will be the edge that is
  extended</param>
<param name="length">(float) Amount to extend to surface</param>
<param name="smooth">(bool) Optional, Default Value: <c>true</c>
If True, the surface is extended smoothly curving from the
  edge. If False, the surface is extended in a straight line from the edge</param>
<returns>(bool) True or False indicating success or failure</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsSurface.RhinoScriptSyntax.EvaluateSurface.Static(System.Guid,System.Double,System.Double)">
<summary>Evaluates a surface at a U, V parameter</summary>
<param name="surfaceId">(Guid) The object's identifier</param>
<param name="u">(float) U of u, v parameters to evaluate</param>
<param name="v">(float) V of u, v parameters to evaluate</param>
<returns>(Point3d) a 3-D point</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsSurface.RhinoScriptSyntax.DuplicateSurfaceBorder.Static(System.Guid,System.Int32)">
<summary>Create curves that duplicate a surface or polysurface border</summary>
<param name="surfaceId">(Guid) Identifier of a surface</param>
<param name="typ">(int) Optional, Default Value: <c>0</c>
The border curves to return
  0= both exterior and interior,
  1= exterior
  2= interior</param>
<returns>(Guid ResizeArray) list of curve ids on success</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsSurface.RhinoScriptSyntax.DuplicateEdgeCurves.Static(System.Guid,System.Boolean)">
<summary>Duplicates the edge curves of a surface or polysurface. For more
  information, see the Rhino help file for information on the DupEdge
  command</summary>
<param name="objectId">(Guid) The identifier of the surface or polysurface object</param>
<param name="select">(bool) Optional, Default Value: <c>false</c>
Select the duplicated edge curves. The default is not to select (False)</param>
<returns>(Guid ResizeArray) identifying the newly created curve objects </returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsSurface.RhinoScriptSyntax.CapPlanarHoles.Static(System.Guid)">
<summary>Caps planar holes in a surface or polysurface</summary>
<param name="surfaceId">(Guid) The identifier of the surface or polysurface to cap</param>
<returns>(bool) True or False indicating success or failure</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsSurface.RhinoScriptSyntax.BrepClosestPoint.Static(System.Guid,Rhino.Geometry.Point3d)">
<summary>Returns the point on a surface or polysurface that is closest to a test
  point. This function works on both untrimmed and trimmed surfaces</summary>
<param name="objectId">(Guid) The object's identifier</param>
<param name="point">(Point3d) The test, or sampling point</param>
<returns>(Point3d * float * float * ComponentIndexType * int * Vector3d) of closest point information . The list will
  contain the following information:
  Element     Type            Description
    0        Point3d          The 3-D point at the parameter value of the closest point.
    1        (U of U, V)      Parameter values of closest point.
                                 Note, V is 0 if the component index type is brepEdge or brepVertex.
    2        (V of U, V)      Parameter values of closest point.
                                 Note, V is 0 if the component index type is brepEdge or brepVertex.
    3        (type, index)   The type  the brep component that contains the closest point. Possible types are
                                 BrepVertex 1 Targets a brep vertex index.
                                 BrepEdge   2 Targets a brep edge index.
                                 BrepFace   3 Targets a brep face index.
                                 BrepTrim   4 Targets a brep trim index.
                                 BrepLoop   5 Targets a brep loop index.
    4        int             The index of the brep component
    5        Vector3d        The normal to the brepFace, or the tangent to the brepEdge</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsSurface.RhinoScriptSyntax.BooleanUnion.Static(System.Collections.Generic.IEnumerable{System.Guid},System.Boolean)">
<summary>Performs a boolean union operation on a set of input surfaces and
  polysurfaces. For more details, see the BooleanUnion command in the
  Rhino help file</summary>
<param name="input">(Guid seq) List of surfaces to union</param>
<param name="deleteInput">(bool) Optional, Default Value: <c>true</c>
Delete all input objects</param>
<returns>(Guid ResizeArray) of identifiers of newly created objects on success</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsSurface.RhinoScriptSyntax.BooleanIntersection.Static(System.Collections.Generic.IEnumerable{System.Guid},System.Collections.Generic.IEnumerable{System.Guid},System.Boolean)">
<summary>Performs a boolean intersection operation on two sets of input surfaces
  and polysurfaces. For more details, see the BooleanIntersection command in
  the Rhino help file</summary>
<param name="input0">(Guid seq) List of surfaces</param>
<param name="input1">(Guid seq) List of surfaces</param>
<param name="deleteInput">(bool) Optional, Default Value: <c>true</c>
Delete all input objects</param>
<returns>(Guid ResizeArray) of identifiers of newly created objects on success</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsSurface.RhinoScriptSyntax.BooleanDifference.Static(System.Collections.Generic.IEnumerable{System.Guid},System.Collections.Generic.IEnumerable{System.Guid},System.Boolean)">
<summary>Performs a boolean difference operation on two sets of input surfaces
  and polysurfaces. For more details, see the BooleanDifference command in
  the Rhino help file</summary>
<param name="input0">(Guid seq) List of surfaces to subtract from</param>
<param name="input1">(Guid seq) List of surfaces to be subtracted</param>
<param name="deleteInput">(bool) Optional, Default Value: <c>true</c>
Delete all input objects</param>
<returns>(Guid ResizeArray) of identifiers of newly created objects on success</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsSurface.RhinoScriptSyntax.AddTorus.Static(Rhino.Geometry.Plane,System.Double,System.Double,Rhino.Geometry.Point3d)">
<summary>Adds a torus shaped revolved surface to the document</summary>
<param name="basis">(Plane)  the basis plane of the torus</param>
<param name="majorRadius">(float) Major radius of  the torus</param>
<param name="minorRadius">(float) Minor radius of  torus</param>
<returns>(Guid) The identifier of the new object </returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsSurface.RhinoScriptSyntax.AddRailRevSrf.Static(System.Guid,System.Guid,Rhino.Geometry.Line,System.Boolean)">
<summary>Adds a surface created through profile curves that define the surface
  shape and two curves that defines a surface edge</summary>
<param name="profile">(Guid) Identifier of the profile curve</param>
<param name="rail">(Guid) Identifier of the rail curve</param>
<param name="axis">(Line) A LIne identifying the start point and end point of the rail revolve axis</param>
<param name="scaleHeight">(bool) Optional, Default Value: <c>false</c>
If True, surface will be locally scaled. Defaults to False</param>
<returns>(Guid) identifier of the new object</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsSurface.RhinoScriptSyntax.AddSweep2.Static(System.Tuple{System.Guid,System.Guid},System.Collections.Generic.IEnumerable{System.Guid},System.Boolean)">
<summary>Adds a surface created through profile curves that define the surface
  shape and two curves that defines a surface edge</summary>
<param name="rails">(Guid * Guid) Identifiers of the two rail curve</param>
<param name="shapes">(Guid seq) One or more cross section shape curves</param>
<param name="closed">(bool) Optional, Default Value: <c>false</c>
If True, then create a closed surface</param>
<returns>(Guid ResizeArray) of new surface objects</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsSurface.RhinoScriptSyntax.AddSweep1.Static(System.Guid,System.Collections.Generic.IEnumerable{System.Guid},System.Boolean)">
<summary>Adds a surface created through profile curves that define the surface
  shape and one curve that defines a surface edge</summary>
<param name="rail">(Guid) Identifier of the rail curve</param>
<param name="shapes">(Guid seq) One or more cross section shape curves</param>
<param name="closed">(bool) Optional, Default Value: <c>false</c>
If True, then create a closed surface</param>
<returns>(Guid ResizeArray) of new surface objects</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsSurface.RhinoScriptSyntax.AddSrfPtGrid.Static(System.Tuple{System.Int32,System.Int32},System.Collections.Generic.IEnumerable{Rhino.Geometry.Point3d},System.Tuple{System.Int32,System.Int32},System.Tuple{System.Boolean,System.Boolean})">
<summary>Creates a surface from a grid of points</summary>
<param name="count">(int * int) Tuple of two numbers defining number of points in the u, v directions</param>
<param name="points">(Point3d seq) List of 3D points</param>
<param name="degree">(int * int) Optional, Default Value: <c>3*3</c>
Two numbers defining degree of the surface in the u, v directions</param>
<param name="closed">(bool * bool) Optional, Default Value: <c>false*false</c>
Two booleans defining if the surface is closed in the u, v directions</param>
<returns>(Guid) The identifier of the new object </returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsSurface.RhinoScriptSyntax.AddSrfPt.Static(Rhino.Geometry.Point3d,Rhino.Geometry.Point3d,Rhino.Geometry.Point3d)">
<summary>Creates a new surface from three corner points</summary>
<param name="pointA">(Point3d) First corner point</param>
<param name="pointB">(Point3d) Second  corner point</param>
<param name="pointC">(Point3d) Third corner point</param>
<returns>(Guid) The identifier of the new object </returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsSurface.RhinoScriptSyntax.AddSrfPt.Static(Rhino.Geometry.Point3d,Rhino.Geometry.Point3d,Rhino.Geometry.Point3d,Rhino.Geometry.Point3d)">
<summary>Creates a new surface from four corner points</summary>
<param name="pointA">(Point3d) First corner point</param>
<param name="pointB">(Point3d) Second  corner point</param>
<param name="pointC">(Point3d) Third corner point</param>
<param name="pointD">(Point3d) Fourth corner point</param>
<returns>(Guid) The identifier of the new object </returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsSurface.RhinoScriptSyntax.AddSrfControlPtGrid.Static(System.Tuple{System.Int32,System.Int32},System.Collections.Generic.IEnumerable{Rhino.Geometry.Point3d},System.Tuple{System.Int32,System.Int32})">
<summary>Creates a surface from a grid of points</summary>
<param name="count">(int * int) Tuple of two numbers defining number of points in the u, v directions</param>
<param name="points">(Point3d seq) List of 3D points</param>
<param name="degree">(int * int) Optional, Default Value: <c>3*3</c>
Two numbers defining degree of the surface in the u, v directions</param>
<returns>(Guid) The identifier of the new object </returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsSurface.RhinoScriptSyntax.AddSrfContourCrvs.Static(System.Guid,Rhino.Geometry.Point3d,Rhino.Geometry.Point3d,System.Double)">
<summary>Adds a spaced series of planar curves resulting from the intersection of
  defined cutting planes through a surface or polysurface. For more
  information, see Rhino help for details on the Contour command</summary>
<param name="objectId">(Guid) Object identifier to contour</param>
<param name="startPoint">(Point3d)  the startpoint of a center line</param>
<param name="endPoint">(Point3d)   the end point of a center line</param>
<param name="interval">(float) Distance between contour curves</param>
<returns>(Guid ResizeArray) ids of new contour curves on success</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsSurface.RhinoScriptSyntax.AddSrfContourCrvs.Static(System.Guid,Rhino.Geometry.Plane)">
<summary>Adds a spaced series of planar curves resulting from the intersection of
  defined cutting planes through a surface or polysurface. For more
  information, see Rhino help for details on the Contour command</summary>
<param name="objectId">(Guid) Object identifier to contour</param>
<param name="Plane">(Plane) The plane that defines the cutting plane</param>
<param name="interval">(float) Distance between contour curves</param>
<returns>(Guid ResizeArray) ids of new contour curves on success</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsSurface.RhinoScriptSyntax.AddSphere.Static(Rhino.Geometry.Point3d,System.Double)">
<summary>Add a spherical surface to the document</summary>
<param name="center">(Point3d) Center point of the sphere</param>
<param name="radius">(float) Radius of the sphere in the current model units</param>
<returns>(Guid) identifier of the new object on success</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsSurface.RhinoScriptSyntax.AddRevSrf.Static(System.Guid,Rhino.Geometry.Line,System.Double,System.Double)">
<summary>Create a surface by revolving a curve around an axis</summary>
<param name="curveId">(Guid) Identifier of profile curve</param>
<param name="axis">(Line) Line for the rail revolve axis</param>
<param name="startAngle">(float) Optional, Default Value: <c>0.0</c>
Start angles of revolve</param>
<param name="endAngle">(float) Optional, Default Value: <c>360.0</c>
End angles of revolve</param>
<returns>(Guid) identifier of new object</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsSurface.RhinoScriptSyntax.AddLoftSrf.Static(System.Collections.Generic.IEnumerable{System.Guid},Rhino.Geometry.Point3d,Rhino.Geometry.Point3d,System.Int32,System.Int32,System.Double,System.Boolean)">
<summary>Adds a surface created by lofting curves to the document.
  - no curve sorting performed. pass in curves in the order you want them sorted
  - directions of open curves not adjusted. Use CurveDirectionsMatch and
    ReverseCurve to adjust the directions of open curves
  - seams of closed curves are not adjusted. Use CurveSeam to adjust the seam
    of closed curves</summary>
<param name="objectIds">(Guid seq) Ordered list of the curves to loft through</param>
<param name="start">(Point3d) Optional, Starting point of the loft</param>
<param name="end">(Point3d) Optional, Ending point of the loft</param>
<param name="loftType">(int) Optional, Default Value: <c>0</c>
Type of loft. Possible options are:
  0 = Normal. Uses chord-length parameterization in the loft direction
  1 = Loose. The surface is allowed to move away from the original curves
    to make a smoother surface. The surface control points are created
    at the same locations as the control points of the loft input curves.
  2 = Straight. The sections between the curves are straight. This is
    also known as a ruled surface.
  3 = Tight. The surface sticks closely to the original curves. Uses square
    root of chord-length parameterization in the loft direction</param>
<param name="rebuild">(int) Optional, Default Value: <c>0</c>
 If not 0 then Rebuilds the shape curves before lofting with this control poin count</param>
<param name="refit">(float) Optional, if given the loft is refitted, the value is the tolerance used to rebuild</param>
<param name="closed">(bool) Optional, Default Value: <c>false</c>
Close the loft back to the first curve</param>
<returns>(Guid ResizeArray) Array containing the identifiers of the new surface objects</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsSurface.RhinoScriptSyntax.AddPlaneSurface.Static(Rhino.Geometry.Plane,System.Double,System.Double)">
<summary>Create a plane surface and add it to the document</summary>
<param name="plane">(Plane) The plane</param>
<param name="uDir">(float) The magnitude in the U direction</param>
<param name="vDir">(float) The magnitude in the V direction</param>
<returns>(Guid) The identifier of the new object </returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsSurface.RhinoScriptSyntax.AddPlanarSrf.Static(System.Collections.Generic.IEnumerable{System.Guid})">
<summary>Creates one or more surfaces from planar curves</summary>
<param name="objectIds">(Guid seq) Curves to use for creating planar surfaces</param>
<returns>(Guid ResizeArray) identifiers of surfaces created on success</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsSurface.RhinoScriptSyntax.AddPipe.Static(System.Guid,System.Collections.Generic.IEnumerable{System.Double},System.Collections.Generic.IEnumerable{System.Double},System.Int32,System.Int32,System.Boolean)">
<summary>Creates a single walled surface with a circular profile around a curve</summary>
<param name="curveId">(Guid) Identifier of rail curve</param>
<param name="parameters">(float seq) normalized curve parameters</param>
<param name="radii">(float seq) radius values at normalized curve parameters</param>
<param name="blendType">(int) Optional, Default Value: <c>0</c>
0(local) or 1(global)</param>
<param name="cap">(int) Optional, Default Value: <c>0</c>
0(none), 1(flat), 2(round)</param>
<param name="fit">(bool) Optional, Default Value: <c>false</c>
Attempt to fit a single surface</param>
<returns>(Guid ResizeArray) identifiers of new objects created</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsSurface.RhinoScriptSyntax.AddPatch.Static(System.Collections.Generic.IEnumerable{System.Guid},System.Tuple{System.Int32,System.Int32},System.Double,System.Boolean,System.Double,System.Double,System.Double,System.Boolean)">
<summary>Fits a surface through curve, point, point cloud, and mesh objects</summary>
<param name="objectIds">(Guid seq) A list of object identifiers that indicate the objects to use for the patch fitting.
  Acceptable object types include curves, points, point clouds, and meshes</param>
<param name="uvSpans">(int * int) The U and V direction span counts for the automatically generated surface . however it is best if you create a starting surface that is similar in shape
  to the surface you are trying to create an use the other overload of this method</param>
<param name="tolerance">(float) Optional, Default Value: <c>Doc.ModelAbsoluteTolerance</c>
The tolerance used by input analysis functions. </param>
<param name="trim">(bool) Optional, Default Value: <c>true</c>
Try to find an outside curve and trims the surface to it.  The default value is True</param>
<param name="pointSpacing">(float) Optional, Default Value: <c>0.1</c>
The basic distance between points sampled from input curves.  The default value is 0.1</param>
<param name="flexibility">(float) Optional, Default Value: <c>1.0</c>
Determines the behavior of the surface in areas where its not otherwise controlled by the input.
  Lower numbers make the surface behave more like a stiff material, higher, more like a flexible material.
  That is, each span is made to more closely match the spans adjacent to it if there is no input geometry
  mapping to that area of the surface when the flexibility value is low.  The scale is logarithmic.
  For example, numbers around 0.001 or 0.1 make the patch pretty stiff and numbers around 10 or 100
  make the surface flexible.  The default value is 1.0</param>
<param name="surfacePull">(float) Optional, Default Value: <c>1.0</c>
Similar to stiffness, but applies to the starting surface. The bigger the pull, the closer
  the resulting surface shape will be to the starting surface.  The default value is 1.0</param>
<param name="fixEdges">(bool) Optional, Default Value: <c>false</c>
Clamps the edges of the starting surface in place. This option is useful if you are using a
  curve or points for deforming an existing surface, and you do not want the edges of the starting surface
  to move.  The default if False</param>
<returns>(Guid) Identifier of the new surface object </returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsSurface.RhinoScriptSyntax.AddPatch.Static(System.Collections.Generic.IEnumerable{System.Guid},System.Guid,System.Double,System.Boolean,System.Double,System.Double,System.Double,System.Boolean)">
<summary>Fits a surface through curve, point, point cloud, and mesh objects</summary>
<param name="objectIds">(Guid seq) A list of object identifiers that indicate the objects to use for the patch fitting.
  Acceptable object types include curves, points, point clouds, and meshes</param>
<param name="startSurfaceId">(Guid) The identifier of the starting surface.  It is best if you create a starting surface that is similar in shape
  to the surface you are trying to create</param>
<param name="tolerance">(float) Optional, Default Value: <c>Doc.ModelAbsoluteTolerance</c>
The tolerance used by input analysis functions. </param>
<param name="trim">(bool) Optional, Default Value: <c>true</c>
Try to find an outside curve and trims the surface to it.  The default value is True</param>
<param name="pointSpacing">(float) Optional, Default Value: <c>0.1</c>
The basic distance between points sampled from input curves.  The default value is 0.1</param>
<param name="flexibility">(float) Optional, Default Value: <c>1.0</c>
Determines the behavior of the surface in areas where its not otherwise controlled by the input.
  Lower numbers make the surface behave more like a stiff material, higher, more like a flexible material.
  That is, each span is made to more closely match the spans adjacent to it if there is no input geometry
  mapping to that area of the surface when the flexibility value is low.  The scale is logarithmic.
  For example, numbers around 0.001 or 0.1 make the patch pretty stiff and numbers around 10 or 100
  make the surface flexible.  The default value is 1.0</param>
<param name="surfacePull">(float) Optional, Default Value: <c>1.0</c>
Similar to stiffness, but applies to the starting surface. The bigger the pull, the closer
  the resulting surface shape will be to the starting surface.  The default value is 1.0</param>
<param name="fixEdges">(bool) Optional, Default Value: <c>false</c>
Clamps the edges of the starting surface in place. This option is useful if you are using a
  curve or points for deforming an existing surface, and you do not want the edges of the starting surface
  to move.  The default if False</param>
<returns>(Guid) Identifier of the new surface object </returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsSurface.RhinoScriptSyntax.AddNurbsSurface.Static(System.Tuple{System.Int32,System.Int32},System.Collections.Generic.IList{Rhino.Geometry.Point3d},System.Collections.Generic.IList{System.Double},System.Collections.Generic.IList{System.Double},System.Tuple{System.Int32,System.Int32},System.Collections.Generic.IList{System.Double})">
<summary>Adds a NURBS surface object to the document</summary>
<param name="pointCount">(int * int) Number of control points in the u and v direction</param>
<param name="points">(Point3d IList) List or Array of 3D points</param>
<param name="knotsU">(float IList) List or Array of Knot values for the surface in the u direction.
  Must contain pointCount[0]+degree[0]-1 elements</param>
<param name="knotsV">(float IList) List or Array of Knot values for the surface in the v direction.
  Must contain pointCount[1]+degree[1]-1 elements</param>
<param name="degree">(int * int) Degree of the surface in the u and v directions</param>
<param name="weights">(float IList) Optional, List or Array ofWeight values for the surface. The number of elements in
  weights must equal the number of elements in points. Values must be
  greater than zero</param>
<returns>(Guid) identifier of new object</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsSurface.RhinoScriptSyntax.AddNetworkSrf.Static(System.Collections.Generic.IEnumerable{System.Guid},System.Int32,System.Double,System.Double,System.Double)">
<summary>Creates a surface from a network of crossing curves</summary>
<param name="curves">(Guid seq) Curves from which to create the surface</param>
<param name="continuity">(int) Optional, Default Value: <c>1</c>
How the edges match the input geometry
  0 = loose
  1 = position
  2 = tangency
  3 = curvature</param>
<param name="edgeTolerance">(float) Optional, Edge tolerance</param>
<param name="interiorTolerance">(float) Optional, Interior tolerance</param>
<param name="angleTolerance">(float) Optional, Angle tolerance , in radians?</param>
<returns>(Guid) identifier of new object</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsSurface.RhinoScriptSyntax.AddEdgeSrf.Static(System.Collections.Generic.IEnumerable{System.Guid})">
<summary>Creates a surface from 2, 3, or 4 edge curves</summary>
<param name="curveIds">(Guid seq) List or tuple of curves</param>
<returns>(Guid) identifier of new object</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsSurface.RhinoScriptSyntax.AddCylinder.Static(Rhino.Geometry.Plane,System.Double,System.Double,System.Boolean)">
<summary>Adds a cylinder-shaped polysurface to the document</summary>
<param name="basis">(Plane) The 3D basis point of the cylinder or the basis plane of the cylinder</param>
<param name="height">(float) If basis is a point, then height is a 3D height point of the
  cylinder. The height point defines the height and direction of the
  cylinder. If basis is a plane, then height is the numeric height value
  of the cylinder</param>
<param name="radius">(float) Radius of the cylinder</param>
<param name="cap">(bool) Optional, Default Value: <c>true</c>
Cap the cylinder</param>
<returns>(Guid) identifier of new object</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsSurface.RhinoScriptSyntax.AddCutPlane.Static(System.Collections.Generic.IEnumerable{System.Guid},Rhino.Geometry.Point3d,Rhino.Geometry.Point3d,Rhino.Geometry.Vector3d)">
<summary>Adds a planar surface through objects at a designated location. For more
  information, see the Rhino help file for the CutPlane command</summary>
<param name="objectIds">(Guid seq) Identifiers of objects that the cutting plane will
  pass through</param>
<param name="startPoint">(Point3d) Start point of line that defines the cutting plane</param>
<param name="endPoint">(Point3d) End point of line that defines the cutting plane</param>
<param name="normal">(Vector3d) Optional, Default Value: <c>world Z axis</c>
  Vector that will be contained in the returned planar
  surface.
  If omitted, the world Z axis is used</param>
<returns>(Guid) identifier of new object on success</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsSurface.RhinoScriptSyntax.AddCone.Static(Rhino.Geometry.Plane,System.Double,System.Double,System.Boolean)">
<summary>Adds a cone shaped polysurface to the document</summary>
<param name="basis">(Plane) 3D origin point of the cone or a plane with an apex at the origin
  and normal along the plane's z-axis</param>
<param name="height">(float) 3D height point of the cone if basis is a 3D point. The height
  point defines the height and direction of the cone. If basis is a
  plane, height is a numeric value</param>
<param name="radius">(float) The radius at the basis of the cone</param>
<param name="cap">(bool) Optional, Default Value: <c>true</c>
Cap basis of the cone</param>
<returns>(Guid) identifier of the new object on success</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsSurface.RhinoScriptSyntax.AddBox.Static(System.Collections.Generic.IEnumerable{Rhino.Geometry.Point3d})">
<summary>Adds a box shaped polysurface to the document</summary>
<param name="corners">(Point3d seq) 8 points that define the corners of the box. Points need to
  be in counter-clockwise order starting with the bottom rectangle of the box</param>
<returns>(Guid) identifier of the new object on success</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsToolbar.RhinoScriptSyntax.ToolbarNames.Static(System.String,System.Boolean)">
<summary>Returns the names of all toolbars (or toolbar groups) found in a
  currently open toolbar file</summary>
<param name="name">(string) Name of currently open toolbar collection</param>
<param name="groups">(bool) Optional, Default Value: <c>false</c>
If true, return the names of toolbar groups in the file</param>
<returns>(string ResizeArray) names of all toolbars (or toolbar groups) on success</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsToolbar.RhinoScriptSyntax.ToolbarCount.Static(System.String,System.Boolean)">
<summary>Returns the number of toolbars or groups in a currently open toolbar file</summary>
<param name="name">(string) Name of currently open toolbar collection</param>
<param name="groups">(bool) Optional, Default Value: <c>false</c>
If true, return the number of toolbar groups in the file</param>
<returns>(int) number of toolbars on success</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsToolbar.RhinoScriptSyntax.ToolbarCollectionPath.Static(System.String)">
<summary>Returns full path to a currently open toolbar collection file</summary>
<param name="name">(string) Name of currently open toolbar collection</param>
<returns>(string) full path on success</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsToolbar.RhinoScriptSyntax.ToolbarCollectionNames.Static">
<summary>Returns names of all currently open toolbar collections</summary>
<returns>(string ResizeArray) the names of all currently open toolbar collections</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsToolbar.RhinoScriptSyntax.ToolbarCollectionCount.Static">
<summary>Returns number of currently open toolbar collections</summary>
<returns>(int) the number of currently open toolbar collections</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsToolbar.RhinoScriptSyntax.ShowToolbar.Static(System.String,System.String)">
<summary>Shows a previously hidden toolbar group in an open toolbar collection</summary>
<param name="name">(string) Name of a currently open toolbar file</param>
<param name="toolbarGroup">(string) Name of a toolbar group to show</param>
<returns>(bool) True or False indicating success or failure</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsToolbar.RhinoScriptSyntax.SaveToolbarCollectionAs.Static(System.String,System.String)">
<summary>Saves an open toolbar collection to a different disk file</summary>
<param name="name">(string) Name of a currently open toolbar file</param>
<param name="file">(string) Full path to file name to save to</param>
<returns>(bool) True or False indicating success or failure</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsToolbar.RhinoScriptSyntax.SaveToolbarCollection.Static(System.String)">
<summary>Saves an open toolbar collection to disk</summary>
<param name="name">(string) Name of a currently open toolbar file</param>
<returns>(bool) True or False indicating success or failure</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsToolbar.RhinoScriptSyntax.OpenToolbarCollection.Static(System.String)">
<summary>Opens a toolbar collection file</summary>
<param name="file">(string) Full path to the collection file</param>
<returns>(string) Rhino-assigned name of the toolbar collection</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsToolbar.RhinoScriptSyntax.IsToolbarVisible.Static(System.String,System.String)">
<summary>Verifies that a toolbar group in an open toolbar collection is visible</summary>
<param name="name">(string) Name of a currently open toolbar file</param>
<param name="toolbarGroup">(string) Name of a toolbar group</param>
<returns>(bool) True or False indicating success or failure</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsToolbar.RhinoScriptSyntax.IsToolbarDocked.Static(System.String,System.String)">
<summary>Verifies that a toolbar group in an open toolbar collection is visible</summary>
<param name="name">(string) Name of a currently open toolbar file</param>
<param name="toolbarGroup">(string) Name of a toolbar group</param>
<returns>(bool) True or False indicating success or failure</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsToolbar.RhinoScriptSyntax.IsToolbarCollection.Static(System.String)">
<summary>Verifies that a toolbar collection is open</summary>
<param name="file">(string) Full path to a toolbar collection file</param>
<returns>(string) Rhino-assigned name of the toolbar collection</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsToolbar.RhinoScriptSyntax.IsToolbar.Static(System.String,System.String,System.Boolean)">
<summary>Verifies a toolbar (or toolbar group) exists in an open collection file</summary>
<param name="name">(string) Name of a currently open toolbar file</param>
<param name="toolbar">(string) Name of a toolbar group</param>
<param name="group">(bool) Optional, Default Value: <c>false</c>
If toolbar parameter is referring to a toolbar group</param>
<returns>(bool) True or False indicating success or failure</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsToolbar.RhinoScriptSyntax.HideToolbar.Static(System.String,System.String)">
<summary>Hides a previously visible toolbar group in an open toolbar collection</summary>
<param name="name">(string) Name of a currently open toolbar file</param>
<param name="toolbarGroup">(string) Name of a toolbar group to hide</param>
<returns>(bool) True or False indicating success or failure</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsToolbar.RhinoScriptSyntax.CloseToolbarCollection.Static(System.String,System.Boolean)">
<summary>Closes a currently open toolbar collection</summary>
<param name="name">(string) Name of a currently open toolbar collection</param>
<param name="prompt">(bool) Optional, Default Value: <c>false</c>
If True, user will be prompted to save the collection file
  if it has been modified prior to closing</param>
<returns>(bool) True or False indicating success or failure</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsTransformation.RhinoScriptSyntax.XformZero.Static">
<summary>Returns a zero transformation matrix</summary>
<returns>(Transform) a zero transformation matrix</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsTransformation.RhinoScriptSyntax.XformWorldToScreen.Static(Rhino.Geometry.Point3d,System.String,System.Boolean)">
<summary>Transforms a point from world coordinates to either client-area coordinates of
  the specified view or screen coordinates. The resulting coordinates are represented
  as a 2D point</summary>
<param name="point">(Point3d) 3D point in world coordinates</param>
<param name="view">(string) Optional, Title of a view. If omitted, the active view is used</param>
<param name="screenCoordinates">(bool) Optional, Default Value: <c>false</c>
If False, the function returns the results as
  client-area coordinates. If True, the result is in screen-area coordinates</param>
<returns>(Point2d) 2D point on success</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsTransformation.RhinoScriptSyntax.XformWorldToCPlane.Static(Rhino.Geometry.Point3d,Rhino.Geometry.Plane)">
<summary>Transforms a point from world coordinates to construction plane coordinates</summary>
<param name="point">(Point3d) A 3D point in world coordinates</param>
<param name="plane">(Plane) The construction plane</param>
<returns>(Point3d) 3D point in construction plane coordinates</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsTransformation.RhinoScriptSyntax.XformTranslation.Static(Rhino.Geometry.Vector3d)">
<summary>Creates a translation transformation matrix</summary>
<param name="vector">(Vector3d) List of 3 numbers, Point3d, or Vector3d.  A 3-D translation vector</param>
<returns>(Transform) The 4x4 transformation matrix is successful, otherwise None</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsTransformation.RhinoScriptSyntax.XformShear.Static(Rhino.Geometry.Plane,Rhino.Geometry.Vector3d,Rhino.Geometry.Vector3d,Rhino.Geometry.Vector3d)">
<summary>Returns a shear transformation matrix</summary>
<param name="plane">(Plane) Plane.Origin is the fixed point</param>
<param name="x">(Vector3d) X axis scale vecto</param>
<param name="y">(Vector3d) Y axis scale vecto</param>
<param name="z">(Vector3d) Z axis scale vecto</param>
<returns>(Transform) The 4x4 transformation matrix on success</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsTransformation.RhinoScriptSyntax.XformScreenToWorld.Static(Rhino.Geometry.Point3d,System.String,System.Boolean)">
<summary>Transforms a point from either client-area coordinates of the specified view
  or screen coordinates to world coordinates. The resulting coordinates are represented
  as a 3-D point</summary>
<param name="point">(Point3d) 2D point</param>
<param name="view">(string) Optional, Title of a view. If omitted, the active view is used</param>
<param name="screenCoordinates">(bool) Optional, Default Value: <c>false</c>
If False, point is in client-area coordinates. If True,
  point is in screen-area coordinates</param>
<returns>(Point3d) on success</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsTransformation.RhinoScriptSyntax.XformScale.Static(System.Tuple{System.Double,System.Double,System.Double},Rhino.Geometry.Point3d)">
<summary>Creates a scale transformation</summary>
<param name="scale">(float*float*float) list of 3 numbers for x , y andf z direction</param>
<param name="point">(Point3d) Optional, Center of scale. If omitted, world origin is used</param>
<returns>(Transform) The 4x4 transformation matrix on success</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsTransformation.RhinoScriptSyntax.XformRotation4.Static(Rhino.Geometry.Vector3d,Rhino.Geometry.Vector3d,Rhino.Geometry.Vector3d,Rhino.Geometry.Vector3d,Rhino.Geometry.Vector3d,Rhino.Geometry.Vector3d)">
<summary>Returns a rotation transformation</summary>
<param name="x0">(Vector3d) X of Vector defining the initial orthonormal frame</param>
<param name="y0">(Vector3d) Y of Vector defining the initial orthonormal frame</param>
<param name="z0">(Vector3d) Z of Vector defining the initial orthonormal frame</param>
<param name="x1">(Vector3d) X of Vector defining the final orthonormal frame</param>
<param name="y1">(Vector3d) Y of Vector defining the final orthonormal frame</param>
<param name="z1">(Vector3d) Z of Vector defining the final orthonormal frame</param>
<returns>(Transform) The 4x4 transformation matrix</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsTransformation.RhinoScriptSyntax.XformRotation3.Static(Rhino.Geometry.Vector3d,Rhino.Geometry.Vector3d,Rhino.Geometry.Point3d)">
<summary>Calculate the minimal transformation that rotates startDirection to
  endDirection while fixing centerPoint</summary>
<param name="startDirection">(Vector3d) Start direction</param>
<param name="endDirection">(Vector3d) End direction</param>
<param name="centerPoint">(Point3d) The rotation center</param>
<returns>(Transform) The 4x4 transformation matrix</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsTransformation.RhinoScriptSyntax.XformRotation2.Static(System.Double,Rhino.Geometry.Vector3d,Rhino.Geometry.Point3d)">
<summary>Returns a rotation transformation around an axis</summary>
<param name="angleDegrees">(float) Rotation angle in degrees</param>
<param name="rotationAxis">(Vector3d) Rotation axis</param>
<param name="centerPoint">(Point3d) Rotation center</param>
<returns>(Transform) The 4x4 transformation matrix</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsTransformation.RhinoScriptSyntax.XformRotation1.Static(Rhino.Geometry.Plane,Rhino.Geometry.Plane)">
<summary>Returns a rotation transformation that maps initialPlane to finalPlane.
  The planes should be right hand orthonormal planes</summary>
<param name="initialPlane">(Plane) Plane to rotate from</param>
<param name="finalPlane">(Plane) Plane to rotate to</param>
<returns>(Transform) The 4x4 transformation matrix</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsTransformation.RhinoScriptSyntax.XformPlanarProjection.Static(Rhino.Geometry.Plane)">
<summary>Returns a transformation matrix that projects to a plane</summary>
<param name="plane">(Plane) The plane to project to</param>
<returns>(Transform) The 4x4 transformation matrix</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsTransformation.RhinoScriptSyntax.XformMultiply.Static(Rhino.Geometry.Transform,Rhino.Geometry.Transform)">
<summary>Multiplies two transformation matrices, where result = xform1 * xform2</summary>
<param name="xform1">(Transform) List or Rhino.Geometry.Transform.  The first 4x4 transformation matrix to multiply</param>
<param name="xform2">(Transform) List or Rhino.Geometry.Transform.  The second 4x4 transformation matrix to multiply</param>
<returns>(Transform) result transformation on success</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsTransformation.RhinoScriptSyntax.XformMirror.Static(Rhino.Geometry.Point3d,Rhino.Geometry.Vector3d)">
<summary>Creates a mirror transformation matrix</summary>
<param name="mirrorPlanePoint">(Point3d) Point on the mirror plane</param>
<param name="mirrorPlaneNormal">(Vector3d) A 3D vector that is normal to the mirror plane</param>
<returns>(Transform) mirror Transform matrix</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsTransformation.RhinoScriptSyntax.XformInverse.Static(Rhino.Geometry.Transform)">
<summary>Returns the inverse of a non-singular transformation matrix</summary>
<param name="xform">(Transform) List or Rhino.Geometry.Transform.  A 4x4 transformation matrix</param>
<returns>(Transform) The inverted 4x4 transformation matrix </returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsTransformation.RhinoScriptSyntax.XformIdentity.Static">
<summary>returns the identity transformation matrix</summary>
<returns>(Transform) The 4x4 transformation matrix</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsTransformation.RhinoScriptSyntax.XformDiagonal.Static(System.Double)">
<summary>Returns a diagonal transformation matrix. Diagonal matrices are 3x3 with
  the bottom row [0, 0, 0, 1]</summary>
<param name="diagonalValue">(float) The diagonal value</param>
<returns>(Transform) The 4x4 transformation matrix</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsTransformation.RhinoScriptSyntax.XformDeterminant.Static(Rhino.Geometry.Transform)">
<summary>Returns the determinant of a transformation matrix. If the determinant
  of a transformation matrix is 0, the matrix is said to be singular. Singular
  matrices do not have inverses</summary>
<param name="xform">(Transform) List or Rhino.Geometry.Transform.  A 4x4 transformation matrix</param>
<returns>(float) The determinant</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsTransformation.RhinoScriptSyntax.XformCPlaneToWorld.Static(Rhino.Geometry.Point3d,Rhino.Geometry.Plane)">
<summary>Transform point from construction plane coordinates to world coordinates</summary>
<param name="point">(Point3d) A 3D point in construction plane coordinates</param>
<param name="plane">(Plane) The construction plane</param>
<returns>(Point3d) A 3D point in world coordinates</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsTransformation.RhinoScriptSyntax.XformCompare.Static(Rhino.Geometry.Transform,Rhino.Geometry.Transform)">
<summary>Compares two transformation matrices</summary>
<param name="xform1">(Transform) First matrix to compare</param>
<param name="xform2">(Transform) Second matrix to compare</param>
<returns>(int) -1 if xform1 is smaller than xform2
  1 if xform1 bigger than xform2
  0 if xform1 = xform2</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsTransformation.RhinoScriptSyntax.XformChangeBasis2.Static(Rhino.Geometry.Vector3d,Rhino.Geometry.Vector3d,Rhino.Geometry.Vector3d,Rhino.Geometry.Vector3d,Rhino.Geometry.Vector3d,Rhino.Geometry.Vector3d)">
<summary>Returns a change of basis transformation matrix of None on error</summary>
<param name="x0">(Vector3d) X of initial basis</param>
<param name="y0">(Vector3d) Y of initial basis</param>
<param name="z0">(Vector3d) Z of initial basis</param>
<param name="x1">(Vector3d) X of final basis</param>
<param name="y1">(Vector3d) Y of final basis</param>
<param name="z1">(Vector3d) Z of final basis</param>
<returns>(Transform) The 4x4 transformation matrix</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsTransformation.RhinoScriptSyntax.XformChangeBasis.Static(Rhino.Geometry.Plane,Rhino.Geometry.Plane)">
<summary>Returns a change of basis transformation matrix or None on error</summary>
<param name="initialPlane">(Plane) The initial plane</param>
<param name="finalPlane">(Plane) The final plane</param>
<returns>(Transform) The 4x4 transformation matrix</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsTransformation.RhinoScriptSyntax.IsXformZero.Static(Rhino.Geometry.Transform)">
<summary>verifies that a matrix is a zero transformation matrix</summary>
<param name="xform">(Transform) List or Rhino.Geometry.Transform.  A 4x4 transformation matrix</param>
<returns>(bool) True or False indicating success or failure</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsTransformation.RhinoScriptSyntax.IsXformSimilarity.Static(Rhino.Geometry.Transform)">
<summary>Verifies a matrix is a similarity transformation. A similarity
  transformation can be broken into a sequence of dialations, translations,
  rotations, and reflections</summary>
<param name="xform">(Transform) List or Rhino.Geometry.Transform.  A 4x4 transformation matrix</param>
<returns>(bool) True if this transformation is an orientation preserving similarity, otherwise False</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsTransformation.RhinoScriptSyntax.IsXformIdentity.Static(Rhino.Geometry.Transform)">
<summary>Verifies a matrix is the identity matrix</summary>
<param name="xform">(Transform) List or Rhino.Geometry.Transform.  A 4x4 transformation matrix</param>
<returns>(bool) True or False indicating success or failure</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsUserdata.RhinoScriptSyntax.SetUserText.Static(System.Collections.Generic.IEnumerable{System.Guid},System.String,System.String,System.Boolean)">
<summary>Sets or removes user text stored on multiple objects</summary>
<param name="objectIds">(Guid seq) The object identifiers</param>
<param name="key">(string) The key name to set</param>
<param name="value">(string) Optional, The string value to set. If omitted, the key/value pair
  specified by key will be deleted</param>
<param name="attachToGeometry">(bool) Optional, Default Value: <c>false</c>
Location on the object to store the user text</param>
<returns>(unit) void, nothing</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsUserdata.RhinoScriptSyntax.SetUserText.Static(System.Guid,System.String,System.String,System.Boolean)">
<summary>Sets or removes user text stored on an object</summary>
<param name="objectId">(Guid) The object's identifier</param>
<param name="key">(string) The key name to set</param>
<param name="value">(string) Optional, The string value to set. If omitted, the key/value pair
  specified by key will be deleted</param>
<param name="attachToGeometry">(bool) Optional, Default Value: <c>false</c>
Location on the object to store the user text</param>
<returns>(unit) void, nothing</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsUserdata.RhinoScriptSyntax.SetDocumentUserText.Static(System.String,System.String)">
<summary>Sets or removes user text stored in the document</summary>
<param name="key">(string) Key name to set</param>
<param name="value">(string) Optional, The string value to set. If omitted the key/value pair
  specified by key will be deleted</param>
<returns>(unit) void, nothing</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsUserdata.RhinoScriptSyntax.SetDocumentData.Static(System.String,System.String,System.String)">
<summary>Adds or sets a user data string to the current document</summary>
<param name="section">(string) The section name</param>
<param name="entry">(string) The entry name</param>
<param name="value">(string) The string value</param>
<returns>(unit) void, nothing</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsUserdata.RhinoScriptSyntax.IsUserText.Static(System.Guid)">
<summary>Verifies that an object contains user text</summary>
<param name="objectId">(Guid) The object's identifier</param>
<returns>(int) result of test:
  0 = no user text
  1 = attribute user text
  2 = geometry user text
  3 = both attribute and geometry user text</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsUserdata.RhinoScriptSyntax.IsDocumentUserText.Static">
<summary>Verifies the current document contains user text</summary>
<returns>(bool) True or False indicating the presence of Script user text</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsUserdata.RhinoScriptSyntax.IsDocumentData.Static">
<summary>Verifies the current document contains user data</summary>
<returns>(bool) True or False indicating the presence of Script user data</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsUserdata.RhinoScriptSyntax.GetUserText.Static(System.Guid,System.String,System.Boolean)">
<summary>Returns user text stored on an object</summary>
<param name="objectId">(Guid) The object's identifies</param>
<param name="key">(string) The key name</param>
<param name="attachedToGeometry">(bool) Optional, Default Value: <c>false</c>
Location on the object to retrieve the user text</param>
<returns>(string) if key is specified, the associated value</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsUserdata.RhinoScriptSyntax.GetUserTextKeys.Static(System.Guid,System.Boolean)">
<summary>Returns all user text keys stored on an object</summary>
<param name="objectId">(Guid) The object's identifies</param>
<param name="attachedToGeometry">(bool) Optional, Default Value: <c>false</c>
Location on the object to retrieve the user text</param>
<returns>(string ResizeArray) all keys</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsUserdata.RhinoScriptSyntax.GetDocumentUserTextKeys.Static">
<summary>Returns all document user text keys</summary>
<returns>(string ResizeArray) all document user text keys</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsUserdata.RhinoScriptSyntax.GetDocumentUserText.Static(System.String)">
<summary>Returns user text stored in the document</summary>
<param name="key">(string) Key to use for retrieving user text</param>
<returns>(string) If key is specified, then the associated value </returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsUserdata.RhinoScriptSyntax.GetDocumentDataEntry.Static(System.String,System.String)">
<summary>Returns a user data item  entry from the current document</summary>
<param name="section">(string) Section name</param>
<param name="entry">(string) Entry name</param>
<returns>(string) the entry value</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsUserdata.RhinoScriptSyntax.GetDocumentData.Static(System.String)">
<summary>Returns a user data item from the current document</summary>
<param name="section">(string) Optional, Section name. If omitted, all section names are returned</param>
<returns>(string array) of all section names if section name is omitted, 
 else all entry names in this  section</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsUserdata.RhinoScriptSyntax.DocumentUserTextCount.Static">
<summary>Returns the number of user text strings in the current document</summary>
<returns>(int) the number of user text strings in the current document</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsUserdata.RhinoScriptSyntax.DocumentDataCount.Static">
<summary>Returns the number of user data strings in the current document</summary>
<returns>(int) the number of user data strings in the current document</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsUserdata.RhinoScriptSyntax.DeleteDocumentData.Static(System.String,System.String)">
<summary>Removes user data strings from the current document</summary>
<param name="section">(string) Optional, Section name. If omitted, all sections and their corresponding
  entries are removed</param>
<param name="entry">(string) Optional, Entry name. If omitted, all entries for section are removed</param>
<returns>(unit) void, nothing</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsUserinterface.RhinoScriptSyntax.TextOut.Static(System.String,System.String)">
<summary>Display a text dialog box similar to the one used by the _What command</summary>
<param name="message">(string) The message</param>
<param name="title">(string) Optional, The message title</param>
<returns>(unit) void, nothing</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsUserinterface.RhinoScriptSyntax.StringBox.Static(System.String,System.String,System.String)">
<summary>Display a dialog box prompting the user to enter a string value</summary>
<param name="message">(string) Optional, A prompt message</param>
<param name="defaultValValue">(string) Optional, A default string value</param>
<param name="title">(string) Optional, A dialog box title</param>
<returns>(string option) an Option of the newly entered string value</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsUserinterface.RhinoScriptSyntax.SaveFileName.Static(System.String,System.String,System.String,System.String,System.String)">
<summary>Display a save dialog box allowing the user to enter a file name.
  Note, this function does not save the file</summary>
<param name="title">(string) Optional, A dialog box title</param>
<param name="filter">(string) Optional, A filter string. The filter must be in the following form:
  "Description1|Filter1|Description2|Filter2||", where "||" terminates filter string.
  If omitted, the filter (*.*) is used</param>
<param name="folder">(string) Optional, A default folder</param>
<param name="filename">(string) Optional, A default file name</param>
<param name="extension">(string) Optional, A default file extension</param>
<returns>(string option) an Option of the file name is successful</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsUserinterface.RhinoScriptSyntax.RealBox.Static(System.String,System.Double,System.String,System.Double,System.Double)">
<summary>Display a dialog box prompting the user to enter a number</summary>
<param name="message">(string) Optional, Default Value: <c>""</c>
A prompt message</param>
<param name="defaultValNumber">(float) Optional, A default number</param>
<param name="title">(string) Optional, Default Value: <c>""</c>
A dialog box title</param>
<param name="minimum">(float) Optional, A minimum allowable value</param>
<param name="maximum">(float) Optional, A maximum allowable value</param>
<returns>(float option) an Option of The newly entered number on success</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsUserinterface.RhinoScriptSyntax.PopupMenu.Static(System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.Int32},Rhino.Geometry.Point3d,System.String)">
<summary>Display a context-style popup menu. The popup menu can appear almost
  anywhere, and can be dismissed by clicking the left or right mouse buttons</summary>
<param name="items">(string seq) List of strings representing the menu items. An empty string or None
  will create a separator</param>
<param name="modes">(int seq) Optional, List of numbers identifying the display modes. If omitted, all
  modes are enabled.
    0 = menu item is enabled
    1 = menu item is disabled
    2 = menu item is checked
    3 = menu item is disabled and checked</param>
<param name="point">(Point3d) Optional, A 3D point where the menu item will appear. If omitted, the menu
  will appear at the current cursor position</param>
<param name="view">(string) Optional, If point is specified, the view in which the point is computed.
  If omitted, the active view is used</param>
<returns>(int) index of the menu item picked or -1 if no menu item was picked</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsUserinterface.RhinoScriptSyntax.OpenFileNames.Static(System.String,System.String,System.String,System.String,System.String)">
<summary>Displays file open dialog box allowing the user to select one or more file names.
  Note, this function does not open the file</summary>
<param name="title">(string) Optional, A dialog box title</param>
<param name="filter">(string) Optional, A filter string. The filter must be in the following form:
  "Description1|Filter1|Description2|Filter2||", where "||" terminates filter string.
  If omitted, the filter (*.*) is used</param>
<param name="folder">(string) Optional, A default folder</param>
<param name="filename">(string) Optional, A default file name</param>
<param name="extension">(string) Optional, A default file extension</param>
<returns>(string array option) an Option of of selected file names</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsUserinterface.RhinoScriptSyntax.OpenFileName.Static(System.String,System.String,System.String,System.String,System.String)">
<summary>Displays file open dialog box allowing the user to enter a file name.
  Note, this function does not open the file</summary>
<param name="title">(string) Optional, A dialog box title</param>
<param name="filter">(string) Optional, A filter string. The filter must be in the following form:
  "Description1|Filter1|Description2|Filter2||", where "||" terminates filter string.
  If omitted, the filter (*.*) is used</param>
<param name="folder">(string) Optional, A default folder</param>
<param name="filename">(string) Optional, A default file name</param>
<param name="extension">(string) Optional, A default file extension</param>
<returns>(string option) an Option of file name is successful</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsUserinterface.RhinoScriptSyntax.MultiListBox.Static(System.Collections.Generic.IList{System.String},System.String,System.String,System.Collections.Generic.IList{System.String})">
<summary>Displays a list of items in a multiple-selection list box dialog</summary>
<param name="items">(string IList) A zero-based list of string items</param>
<param name="message">(string) Optional, A prompt or message</param>
<param name="title">(string) Optional, A dialog box title</param>
<param name="defaultVals">(string IList) Optional, a list if multiple items that are pre-selected</param>
<returns>(string array option) an Option of containing the selected items</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsUserinterface.RhinoScriptSyntax.PropertyListBox.Static(System.Collections.Generic.IList{System.String},System.Collections.Generic.IEnumerable{System.String},System.String,System.String)">
<summary>Displays list of items and their values in a property-style list box dialog</summary>
<param name="items">(string IList) list of string items</param>
<param name="values">(string seq) the corresponding values to the items</param>
<param name="message">(string) Optional, A prompt or message</param>
<param name="title">(string) Optional, A dialog box title</param>
<returns>(string array option) an Option of of new values on success</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsUserinterface.RhinoScriptSyntax.MessageBox.Static(System.String,System.Int32,System.String)">
<summary>Displays a message box. A message box contains a message and
  title, plus any combination of predefined icons and push buttons</summary>
<param name="message">(string) A prompt or message</param>
<param name="buttons">(int) Optional, Default Value: <c>0</c>
Buttons and icon to display as a bit coded flag. Can be a combination of the
  following flags. If omitted, an OK button and no icon is displayed
  0      Display OK button only.
  1      Display OK and Cancel buttons.
  2      Display Abort, Retry, and Ignore buttons.
  3      Display Yes, No, and Cancel buttons.
  4      Display Yes and No buttons.
  5      Display Retry and Cancel buttons.
  16     Display Critical Message icon.
  32     Display Warning Query icon.
  48     Display Warning Message icon.
  64     Display Information Message icon.
  0      First button is the default.
  256    Second button is the default.
  512    Third button is the default.
  768    Fourth button is the default.
  0      Application modal. The user must respond to the message box
    before continuing work in the current application.
  4096   System modal. The user must respond to the message box
    before continuing work in any application</param>
<param name="title">(string) Optional, Default Value: <c>""</c>
The dialog box title</param>
<returns>(int option) an Option of indicating which button was clicked:
  1      OK button was clicked.
  2      Cancel button was clicked.
  3      Abort button was clicked.
  4      Retry button was clicked.
  5      Ignore button was clicked.
  6      Yes button was clicked.
  7      No button was clicked</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsUserinterface.RhinoScriptSyntax.ListBox.Static(System.Collections.Generic.IList{System.String},System.String,System.String,System.String)">
<summary>Display a list of items in a list box dialog</summary>
<param name="items">(string IList) A list of values to select</param>
<param name="message">(string) Optional, A prompt of message</param>
<param name="title">(string) Optional, A dialog box title</param>
<param name="defaultVal">(string) Optional, Selected item in the list</param>
<returns>(string option) an Option of he selected item</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsUserinterface.RhinoScriptSyntax.GetString.Static(System.String,System.String,System.Collections.Generic.IEnumerable{System.String})">
<summary>Pauses for user input of a string value</summary>
<param name="message">(string) Optional, A prompt or message</param>
<param name="defaultValString">(string) Optional, A default value</param>
<param name="strings">(string seq) Optional, List of strings to be displayed as a click-able command options.
  Note, strings cannot begin with a numeric character</param>
<returns>(string option) an Option of The string either input or selected by the user .
  If the user presses the Enter key without typing in a string, an empty string "" is returned</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsUserinterface.RhinoScriptSyntax.GetRectangle.Static(System.Int32,Rhino.Geometry.Point3d,System.String,System.String,System.String)">
<summary>Pauses for user input of a rectangle</summary>
<param name="mode">(int) Optional, Default Value: <c>0</c>
The rectangle selection mode. The modes are as follows
  0 = All modes
  1 = Corner - a rectangle is created by picking two corner points
  2 = 3Point - a rectangle is created by picking three points
  3 = Vertical - a vertical rectangle is created by picking three points
  4 = Center - a rectangle is created by picking a center point and a corner point</param>
<param name="basePoint">(Point3d) Optional, A 3d base point</param>
<param name="prompt1">(string) Optional, Prompt1 of optional prompts</param>
<param name="prompt2">(string) Optional, Prompt2 of optional prompts</param>
<param name="prompt3">(string) Optional, Prompt3 of optional prompts</param>
<returns>(Point3d * Point3d * Point3d * Point3d) an Option of four 3d points that define the corners of the rectangle</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsUserinterface.RhinoScriptSyntax.GetReal.Static(System.String,System.Double,System.Double,System.Double)">
<summary>Pauses for user input of a number</summary>
<param name="message">(string) Optional, Default Value: <c>"Number"</c>
A prompt or message</param>
<param name="number">(float) Optional, A default number value</param>
<param name="minimum">(float) Optional, A minimum allowable value</param>
<param name="maximum">(float) Optional, A maximum allowable value</param>
<returns>(float option) an Option of The number input by the user </returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsUserinterface.RhinoScriptSyntax.GetPolyline.Static(System.Int32,System.String,System.String,System.String,System.String,System.Int32,System.Int32)">
<summary>Prompts the user to pick points that define a polyline</summary>
<param name="flags">(int) Optional, Default Value: <c>3</c>
The options are bit coded flags. Values can be added together to specify more than one option. 
  value description
  1     Permit close option. If specified, then after 3 points have been picked, the user can type "Close" and a closed polyline will be returned.
  2     Permit close snap. If specified, then after 3 points have been picked, the user can pick near the start point and a closed polyline will be returned.
  4     Force close. If specified, then the returned polyline is always closed. If specified, then max must bebet 0 or bigger than 4.
  Note: the default is 3, or "Permit close option = True", "Permit close snap = True", and "Force close = False"</param>
<param name="message1">(string) Optional, A prompt or message for the first point</param>
<param name="message2">(string) Optional, A prompt or message for the second point</param>
<param name="message3">(string) Optional, A prompt or message for the third point</param>
<param name="message4">(string) Optional, A prompt or message for the 'next' point</param>
<param name="min">(int) Optional, Default Value: <c>2</c>
The minimum number of points to require. The default is 2</param>
<param name="max">(int) Optional, Default Value: <c>0</c>
The maximum number of points to require; 0 for no limit. </param>
<returns>(Polyline option) an Option of a  polyline </returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsUserinterface.RhinoScriptSyntax.GetPoints.Static(System.Boolean,System.Boolean,System.String,System.String,System.Int32)">
<summary>Pauses for user input of one or more points</summary>
<param name="drawLines">(bool) Optional, Default Value: <c>false</c>
Draw lines between points</param>
<param name="inPlane">(bool) Optional, Default Value: <c>false</c>
Constrain point selection to the active construction plane</param>
<param name="message1">(string) Optional, A prompt or message for the first point</param>
<param name="message2">(string) Optional, A prompt or message for the next points</param>
<param name="maxPoints">(int) Optional, Maximum number of points to pick. If not specified, an
  unlimited number of points can be picked</param>
<returns>(Point3d array) an Option of of 3d points</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsUserinterface.RhinoScriptSyntax.GetPointOnSurface.Static(System.Guid,System.String)">
<summary>Pauses for user input of a point constrained to a surface or polysurface
  object</summary>
<param name="surfaceId">(Guid) Identifier of the surface to get a point on</param>
<param name="message">(string) Optional, Default Value: <c>"Pick Point on Surface or Polysurface"</c>
A prompt or message</param>
<returns>(Point3d option) an Option of 3d point</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsUserinterface.RhinoScriptSyntax.GetPointOnMesh.Static(System.Guid,System.String)">
<summary>Pauses for user input of a point constrained to a mesh object</summary>
<param name="meshId">(Guid) Identifier of the mesh to get a point on</param>
<param name="message">(string) Optional, Default Value: <c>"Pick Point On Mesh"</c>
A prompt or message</param>
<returns>(Point3d option) an Option of 3d point</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsUserinterface.RhinoScriptSyntax.GetPointOnCurve.Static(System.Guid,System.String)">
<summary>Pauses for user input of a point constrainted to a curve object</summary>
<param name="curveId">(Guid) Identifier of the curve to get a point on</param>
<param name="message">(string) Optional, Default Value: <c>"Pick Point On Curve"</c>
A prompt of message</param>
<returns>(Point3d option) an Option of 3d point</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsUserinterface.RhinoScriptSyntax.GetPoint.Static(System.String,Rhino.Geometry.Point3d,System.Double,System.Boolean)">
<summary>Pauses for user input of a point</summary>
<param name="message">(string) Optional, A prompt or message</param>
<param name="basePoint">(Point3d) Optional, Point3d identifying a starting, or base point</param>
<param name="distance">(float) Optional, Constraining distance. If distance is specified, basePoint must also be specified</param>
<param name="inPlane">(bool) Optional, Default Value: <c>false</c>
Constrains the point selections to the active construction plane</param>
<returns>(Point3d option) an Option of point on success</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsUserinterface.RhinoScriptSyntax.GetMeshVertices.Static(System.Guid,System.String,System.Int32,System.Int32)">
<summary>Prompts the user to pick one or more mesh vertices</summary>
<param name="objectId">(Guid) The mesh object's identifier</param>
<param name="message">(string) Optional, Default Value: <c>"Select Mesh Vertices"</c>
A prompt of message</param>
<param name="minCount">(int) Optional, Default Value: <c>1</c>
The minimum number of vertices to select</param>
<param name="maxCount">(int) Optional, Default Value: <c>0</c>
The maximum number of vertices to select. If 0, the user must
  press enter to finish selection. If -1, selection stops as soon as there
  are at least minCount vertices selected</param>
<returns>(int ResizeArray) an Option of of mesh vertex indices on success</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsUserinterface.RhinoScriptSyntax.GetMeshFaces.Static(System.Guid,System.String,System.Int32,System.Int32)">
<summary>Prompts the user to pick one or more mesh faces</summary>
<param name="objectId">(Guid) The mesh object's identifier</param>
<param name="message">(string) Optional, Default Value: <c>"Select Mesh Faces"</c>
A prompt of message</param>
<param name="minCount">(int) Optional, Default Value: <c>1</c>
The minimum number of faces to select</param>
<param name="maxCount">(int) Optional, Default Value: <c>0</c>
The maximum number of faces to select.
  If 0, the user must press enter to finish selection.
  If -1, selection stops as soon as there are at least minCount faces selected</param>
<returns>(int ResizeArray) an Option of of mesh face indices on success</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsUserinterface.RhinoScriptSyntax.GetLinetype.Static(System.String,System.Boolean)">
<summary>Displays a dialog box prompting the user to select one linetype</summary>
<param name="defaultValLinetype">(string) Optional, Optional. The name of the linetype to select. If omitted, the current linetype will be selected</param>
<param name="showByLayer">(bool) Optional, Default Value: <c>false</c>
If True, the "by Layer" linetype will show. Defaults to False</param>
<returns>(string option) an Option of The names of selected linetype</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsUserinterface.RhinoScriptSyntax.GetLine.Static(System.Int32,Rhino.Geometry.Point3d,System.String,System.String,System.String)">
<summary>Prompts the user to pick points that define a line</summary>
<param name="mode">(int) Optional, Default Value: <c>0</c>
Line definition mode.
  0  Default - Show all modes, start in two-point mode
  1  Two-point - Defines a line from two points.
  2  Normal - Defines a line normal to a location on a surface.
  3  Angled - Defines a line at a specified angle from a reference line.
  4  Vertical - Defines a line vertical to the construction plane.
  5  Four-point - Defines a line using two points to establish direction and two points to establish length.
  6  Bisector - Defines a line that bisects a specified angle.
  7  Perpendicular - Defines a line perpendicular to or from a curve
  8  Tangent - Defines a line tangent from a curve.
  9  Extension - Defines a line that extends from a curve</param>
<param name="point">(Point3d) Optional, Optional starting point</param>
<param name="message1">(string) Optional, Message1 of optional prompts</param>
<param name="message2">(string) Optional, Message2 of optional prompts</param>
<param name="message3">(string) Optional, Message3 of optional prompts</param>
<returns>(Line option) an Option of a Line</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsUserinterface.RhinoScriptSyntax.GetLayers.Static(System.String,System.Boolean)">
<summary>Displays a dialog box prompting the user to select one or more layers</summary>
<param name="title">(string) Optional, Default Value: <c>"Select Layers"</c>
Dialog box title</param>
<param name="showNewButton">(bool) Optional, Default Value: <c>false</c>
Optional button to show on the dialog</param>
<returns>(string ResizeArray) an Option of The names of selected layers</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsUserinterface.RhinoScriptSyntax.GetLayer.Static(System.String,System.String,System.Boolean,System.Boolean)">
<summary>Displays dialog box prompting the user to select a layer</summary>
<param name="title">(string) Optional, Default Value: <c>"Select Layer"</c>
Dialog box title</param>
<param name="layer">(string) Optional, Name of a layer to preselect. If omitted, the current layer will be preselected</param>
<param name="showNewButton">(bool) Optional, Default Value: <c>false</c>
Show new button of on the dialog</param>
<param name="showSetCurrent">(bool) Optional, Default Value: <c>false</c>
Show set current  button on the dialog</param>
<returns>(string option) an Option of name of selected layer</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsUserinterface.RhinoScriptSyntax.GetInteger.Static(System.String,System.Int32,System.Int32,System.Int32)">
<summary>Pauses for user input of a whole number</summary>
<param name="message">(string) Optional, A prompt or message</param>
<param name="number">(int) Optional, A default whole number value</param>
<param name="minimum">(int) Optional, A minimum allowable value</param>
<param name="maximum">(int) Optional, A maximum allowable value</param>
<returns>(int option) an Option of The whole number input by the user </returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsUserinterface.RhinoScriptSyntax.GetEdgeCurves.Static(System.String,System.Int32,System.Int32,System.Boolean)">
<summary>Prompt the user to pick one or more surface or polysurface edge curves</summary>
<param name="message">(string) Optional, Default Value: <c>Select Edges</c>
A prompt or message</param>
<param name="minCount">(int) Optional, Default Value: <c>1</c>
Minimum number of edges to select</param>
<param name="maxCount">(int) Optional, Default Value: <c>0</c>
Maximum number of edges to select</param>
<param name="select">(bool) Optional, Default Value: <c>false</c>
Select the duplicated edge curves</param>
<returns>((Guid*Guid*Point3d) ResizeArray) an Option of a List of selection prompts (curve objectId, parent objectId, selection point)</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsUserinterface.RhinoScriptSyntax.GetDistance.Static(Rhino.Geometry.Point3d,System.Double,System.String,System.String)">
<summary>Pauses for user input of a distance</summary>
<param name="firstPt">(Point3d) Optional, First distance point</param>
<param name="distance">(float) Optional, Default distance</param>
<param name="firstPtMsg">(string) Optional, Default Value: <c>"First distance point"</c>
Prompt for the first distance point</param>
<param name="secondPtMsg">(string) Optional, Default Value: <c>"Second distance point"</c>
Prompt for the second distance point</param>
<returns>(float option) an Option of The distance between the two points </returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsUserinterface.RhinoScriptSyntax.GetCursorPos.Static">
<summary>Retrieves the cursor's position</summary>
<returns>(Point3d * Point2d * Guid * Point2d) a Tuple of containing the following information
  0  Point3d: cursor position in world coordinates
  1  Point2d: cursor position in screen coordinates
  2  Guid:    objectId of the active viewport
  3  Point2d: cursor position in client coordinates</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsUserinterface.RhinoScriptSyntax.GetColor.Static(System.Drawing.Color)">
<summary>Display the Rhino color picker dialog allowing the user to select an RGB color</summary>
<param name="color">(Drawing.Color) Optional, Default Value: <c>Drawing.Color.Black</c> </param>
<returns>(Drawing.Color option) an Option of RGB color</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsUserinterface.RhinoScriptSyntax.GetBox.Static(System.Int32,Rhino.Geometry.Point3d,System.String,System.String,System.String)">
<summary>Pauses for user input of a box</summary>
<param name="mode">(int) Optional, Default Value: <c>0</c>
The box selection mode.
  0 = All modes
  1 = Corner. The base rectangle is created by picking two corner points
  2 = 3-Point. The base rectangle is created by picking three points
  3 = Vertical. The base vertical rectangle is created by picking three points.
  4 = Center. The base rectangle is created by picking a center point and a corner point</param>
<param name="basePoint">(Point3d) Optional, Optional 3D base point</param>
<param name="prompt1">(string) Optional, Prompt1 of 'optional prompts to set'</param>
<param name="prompt2">(string) Optional, Prompt2 of 'optional prompts to set'</param>
<param name="prompt3">(string) Optional, Prompt3 of 'optional prompts to set'</param>
<returns>(Point3d array) option) array of eight Point3d that define the corners of the box on success</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsUserinterface.RhinoScriptSyntax.GetBoolean.Static(System.String,System.Tuple{System.String,System.String,System.String}[],System.Boolean[])">
<summary>Pauses for user input of one or more boolean values. Boolean values are
  displayed as click-able command line option toggles</summary>
<param name="message">(string) A prompt</param>
<param name="items">((string*string*string) array) List of options. Each option is a tuple of three strings
  [n][1]    description of the boolean value. Must only consist of letters and numbers. (no characters like space, period, or dash)
  [n][2]    string identifying the false value
  [n][3]    string identifying the true value</param>
<param name="defaultVals">(bool seq) List of boolean values used as default or starting values</param>
<returns>(bool ResizeArray) Option of a list of values that represent the boolean values</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsUserinterface.RhinoScriptSyntax.GetAngle.Static(Rhino.Geometry.Point3d,Rhino.Geometry.Point3d,System.Double,System.String)">
<summary>Pause for user input of an angle</summary>
<param name="point">(Point3d) Optional, Default Value: <c>Point3d.Unset</c>
Starting, or base point</param>
<param name="referencePoint">(Point3d) Optional, Default Value: <c>Point3d.Unset</c>
If specified, the reference angle is calculated from it and the base point</param>
<param name="defaultValAngleDegrees">(float) Optional, A default angle value specified</param>
<param name="message">(string) Optional, A prompt to display</param>
<returns>(float option) Option of angle in degree</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsUserinterface.RhinoScriptSyntax.EditBox.Static(System.String,System.String,System.String)">
<summary>Display dialog prompting the user to enter a string. The
  string value may span multiple lines</summary>
<param name="defaultValString">(string) Optional, A default string value</param>
<param name="message">(string) Optional, A prompt message</param>
<param name="title">(string) Optional, A dialog box title</param>
<returns>(string Option) Option of Multiple lines that are separated by carriage return-linefeed combinations</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsUserinterface.RhinoScriptSyntax.ComboListBox.Static(System.Collections.Generic.IEnumerable{System.String},System.String,System.String)">
<summary>Displays a list of items in a combo-style list box dialog</summary>
<param name="items">(string seq) A list of string</param>
<param name="message">(string) Optional, A prompt of message</param>
<param name="title">(string) Optional, A dialog box title</param>
<returns>(string option) Option of The selected item</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsUserinterface.RhinoScriptSyntax.CheckListBox.Static(System.Collections.Generic.IEnumerable{System.Tuple{System.String,System.Boolean}},System.String,System.String)">
<summary>Displays a list of items in a checkable-style list dialog box</summary>
<param name="items">((string*bool) seq) A list of tuples containing a string and a boolean check state</param>
<param name="message">(string) Optional, A prompt or message</param>
<param name="title">(string) Optional, A dialog box title</param>
<returns>((string*bool) ResizeArray option) Option of tuples containing the input string in items along with their new boolean check value</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsUserinterface.RhinoScriptSyntax.BrowseForFolder.Static(System.String,System.String)">
<summary>Display browse-for-folder dialog allowing the user to select a folder</summary>
<param name="folder">(string) Optional, A default folder</param>
<param name="message">(string) Optional, A prompt or message</param>
<returns>(string option) selected folder option or None if selection was canceled</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsUtility.RhinoScriptSyntax.CreateInterval.Static(System.Double,System.Double)">
<summary>Converts input into a Rhino.Geometry.Interval</summary>
<param name="start">(float) The lower bound</param>
<param name="ende">(float) Uper bound of interval</param>
<returns>(Rhino.Geometry.Interval) This can be seen as an object made of two items:
  [0] start of interval
  [1] end of interval</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsUtility.RhinoScriptSyntax.CreateColor.Static(System.Int32,System.Int32,System.Int32,System.Int32)">
<summary>Converts input into a native color object if possible.
  The returned data is accessible by indexing, and that is the suggested method to interact with the type.
  Red index is [0], Green index is [1], Blue index is [2] and Alpha index is [3].
  If the provided object is already a color, its value is copied.
  Alternatively, you can also pass three coordinates singularly for an RGB color, or four
  for an RGBA color point</summary>
<param name="red">(int) Red Value</param>
<param name="green">(int) Green value</param>
<param name="blue">(int) Blue value</param>
<param name="alpha">(int) Optional, Default Value: <c>0</c>
Alpha value</param>
<returns>(Drawing.Color) a Color</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsUtility.RhinoScriptSyntax.CreateXform.Static(System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{System.Double}})">
<summary>Converts input into a Rhino.Geometry.Transform object if possible</summary>
<param name="xform">(float seq seq) The transform. This can be seen as a 4x4 matrix, given as nested lists</param>
<returns>(Transform) A Rhino.Geometry.Transform. result[0, 3] gives access to the first row, last column</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsUtility.RhinoScriptSyntax.CreatePlane.Static(Rhino.Geometry.Point3d,Rhino.Geometry.Vector3d,Rhino.Geometry.Vector3d)">
<summary>Converts input into a Rhino.Geometry.Plane object if possible</summary>
<param name="origin">(Point3d) the Plane Center or Origin</param>
<param name="xAxis">(Vector3d) Optional, Default Value: <c>Vector3d.XAxis</c>
Direction of X-Axis</param>
<param name="yAxis">(Vector3d) Optional, Default Value: <c>Vector3d.YAxis</c>
Direction of Y-Axis</param>
<returns>(Plane) A Rhino.Geometry.Plane</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsUtility.RhinoScriptSyntax.CreateVector.Static``1(``0,``0,``0)">
<summary>Converts x, y and z into a Rhino.Geometry.Vector3d if possible</summary>
<param name="x">('T) any value that can be converted or parsed to X coordinate</param>
<param name="y">('T) any value that can be converted or parsed to Y coordinate</param>
<param name="z">('T) any value that can be converted or parsed to Z coordinate</param>
<returns>(Vector3d) a Rhino.Geometry.Vector3d</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsUtility.RhinoScriptSyntax.CreateVector.Static``1(``0)">
<summary>Converts 'Vector' into a Rhino.Geometry.Vector3d if possible</summary>
<param name="vector">('T) any value that can be converted or parsed to a Vector</param>
<returns>(Vector3d) a Rhino.Geometry.Vector3d</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsUtility.RhinoScriptSyntax.CreatePoint.Static``1(``0,``0,``0)">
<summary>Converts x, y and z into a Rhino.Geometry.Point3d if possible</summary>
<param name="x">('T) any value that can be converted or parsed to X coordinate</param>
<param name="y">('T) any value that can be converted or parsed to Y coordinate</param>
<param name="z">('T) any value that can be converted or parsed to Z coordinate</param>
<returns>(Point3d) a Rhino.Geometry.Point3d</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsUtility.RhinoScriptSyntax.CreatePoint.Static``1(``0)">
<summary>Converts 'point' into a Rhino.Geometry.Point3d if possible</summary>
<param name="point">('T) any value that can be converted or parsed to a point</param>
<returns>(Point3d) a Rhino.Geometry.Point3d</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsUtility.RhinoScriptSyntax.Str2Pt.Static(System.String)">
<summary>convert a formatted string value into a 3D point value</summary>
<param name="point">(string) A string that contains a delimited point like "1, 2, 3"</param>
<returns>(Point3d) Point structure from the input string</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsUtility.RhinoScriptSyntax.SortPoints.Static(System.Collections.Generic.IEnumerable{Rhino.Geometry.Point3d},System.Boolean,System.Int32)">
<summary>Sorts the components of an array of 3D points</summary>
<param name="points">(Point3d seq) Points to sort</param>
<param name="ascending">(bool) Optional, Default Value: <c>true</c>
Ascendeing if omitted (True) or True, descending if False</param>
<param name="order">(int) Optional, Default Value: <c>0</c>
The component sort order
  Value       Component Sort Order
  0 (default) X, Y, Z
  1           X, Z, Y
  2           Y, X, Z
  3           Y, Z, X
  4           Z, X, Y
  5           Z, Y, X</param>
<returns>(Point3d seq) sorted 3-D points</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsUtility.RhinoScriptSyntax.SortPointList.Static(System.Collections.Generic.IEnumerable{Rhino.Geometry.Point3d},System.Double)">
<summary>Sorts list of points so they will be connected in a "reasonable" polyline order</summary>
<param name="points">(Point3d seq) The points to sort</param>
<param name="tolerance">(float) Optional, Default Value: <c>RhinoMath.ZeroTolerance</c>
Minimum distance between points. Points that fall within this tolerance
  will be discarded. </param>
<returns>(Point3d array) of sorted 3D points</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsUtility.RhinoScriptSyntax.Sleep.Static(System.Int32)">
<summary>Suspends execution of a running script for the specified interval. Then refreshes Rhino UI</summary>
<param name="milliseconds">(int) Thousands of a second</param>
<returns>(unit)</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsUtility.RhinoScriptSyntax.SimplifyArray.Static(System.Collections.Generic.IEnumerable{Rhino.Geometry.Point3d})">
<summary>Flattens an array of 3-D points into a one-dimensional list of real numbers. For example, if you had an array containing three 3-D points, this method would return a one-dimensional array containing nine real numbers</summary>
<param name="points">(Point3d seq) Points to flatten</param>
<returns>(float ResizeArray) A one-dimensional list containing real numbers, , otherwise None</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsUtility.RhinoScriptSyntax.Polar.Static(Rhino.Geometry.Point3d,System.Double,System.Double,Rhino.Geometry.Plane)">
<summary>Returns 3D point that is a specified angle and distance from a 3D point</summary>
<param name="point">(Point3d) The point to transform</param>
<param name="angleDegrees">(float) Angle in degrees</param>
<param name="distance">(float) Distance from point</param>
<param name="plane">(Plane) Optional, Plane to base the transformation. If omitted, the world
  x-y plane is used</param>
<returns>(Point3d) resulting point is successful</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsUtility.RhinoScriptSyntax.GetSettings.Static(System.String,System.String,System.String)">
<summary>NOT IMPLEMENTED YET.Returns string from a specified section in a initialization file</summary>
<param name="filename">(string) Name of the initialization file</param>
<param name="section">(string) Optional, Section containing the entry</param>
<param name="entry">(string) Optional, Entry whose associated string is to be returned</param>
<returns>(string array) A list containing all section names</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsUtility.RhinoScriptSyntax.Distance.Static(Rhino.Geometry.Point3d,Rhino.Geometry.Point3d)">
<summary>Measures distance between two 3D points</summary>
<param name="point1">(Point3d) The first 3D point</param>
<param name="point2">(Point3d) The second 3D point</param>
<returns>(float) the distance </returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsUtility.RhinoScriptSyntax.DistanceSquare.Static(Rhino.Geometry.Point3d,Rhino.Geometry.Point3d)">
<summary>Measures Square distance between two 3D points. Does not validate input</summary>
<param name="point1">(Point3d) The first 3D point</param>
<param name="point2">(Point3d) The second 3D point</param>
<returns>(float) the square distance</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsUtility.RhinoScriptSyntax.CullDuplicatePoints.Static(System.Collections.Generic.IEnumerable{Rhino.Geometry.Point3d},System.Double)">
<summary>Removes duplicates from a list of 3D points</summary>
<param name="points">(Point3d seq) A list of 3D points</param>
<param name="tolerance">(float) Optional,Default Value: <c>RhinoMath.ZeroTolerance</c> Minimum distance between points.
 Points within this tolerance will be discarded.</param>
<returns>(Point3d array) of 3D points with duplicates removed </returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsUtility.RhinoScriptSyntax.CullDuplicateNumbers.Static(System.Collections.Generic.IEnumerable{System.Double},System.Double)">
<summary>Removes duplicates from an array of numbers</summary>
<param name="numbers">(float seq) List or tuple</param>
<param name="tolerance">(float) Optional, Default Value: <c>RhinoMath.ZeroTolerance</c>
  The minimum distance between numbers.  Numbers that fall within this tolerance will be discarded</param>
<returns>(float ResizeArray) numbers with duplicates removed </returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsUtility.RhinoScriptSyntax.ColorRGBToHLS.Static(System.Drawing.Color)">
<summary>Convert colors from RGB to  HSL ( Hue, Saturation and Luminance)</summary>
<param name="rgb">(Drawing.Color) The RGB color value</param>
<returns>(Display.ColorHSL) The HLS color value</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsUtility.RhinoScriptSyntax.ColorRedValue.Static(System.Drawing.Color)">
<summary>Retrieves intensity value for the red component of an RGB color</summary>
<param name="rgb">(Drawing.Color) The RGB color value</param>
<returns>(int) The red color value</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsUtility.RhinoScriptSyntax.ColorHLSToRGB.Static(System.Drawing.Color)">
<summary>Converts colors from hue-lumanence-saturation to RGB</summary>
<param name="hls">(Drawing.Color) The HLS color value</param>
<returns>(Drawing.Color) The RGB color value</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsUtility.RhinoScriptSyntax.ColorGreenValue.Static(System.Drawing.Color)">
<summary>Retrieves intensity value for the green component of an RGB color</summary>
<param name="rgb">(Drawing.Color) The RGB color value</param>
<returns>(int) The green component</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsUtility.RhinoScriptSyntax.ColorBlueValue.Static(System.Drawing.Color)">
<summary>Retrieves intensity value for the blue component of an RGB color</summary>
<param name="rgb">(Drawing.Color) The RGB color value</param>
<returns>(int) The blue component</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsUtility.RhinoScriptSyntax.ColorAdjustLuma.Static(System.Drawing.Color,System.Double,System.Boolean)">
<summary>Changes the luminance of a red-green-blue value. Hue and saturation are
  not affected</summary>
<param name="rgb">(Drawing.Color) Initial rgb value</param>
<param name="luma">(float) The luminance in units of 0.1 percent of the total range. A
  value of luma = 50 corresponds to 5 percent of the maximum luminance</param>
<param name="isScaleRelative">(bool) Optional, Default Value: <c>false</c>
If True, luma specifies how much to increment or decrement the
  current luminance. If False, luma specified the absolute luminance</param>
<returns>(Drawing.Color) modified rgb value</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsUtility.RhinoScriptSyntax.ClipboardText.Static(System.String)">
<summary>Sets a text string to the Windows clipboard</summary>
<param name="text">(string) Text to set</param>
<returns>(unit) void, nothing</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsUtility.RhinoScriptSyntax.ClipboardText.Static">
<summary>Returns a text string to the Windows clipboard</summary>
<returns>(string) The current text in the clipboard</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsUtility.RhinoScriptSyntax.Angle2.Static(Rhino.Geometry.Line,Rhino.Geometry.Line)">
<summary>Measures the angle between two lines</summary>
<param name="line1">(Line) List of 6 numbers or 2 Point3d</param>
<param name="line2">(Line) List of 6 numbers or 2 Point3d</param>
<returns>(float * float) containing the following elements .
  0 The angle in degrees.
  1 The reflex angle in degrees</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsUtility.RhinoScriptSyntax.Angle.Static(Rhino.Geometry.Point3d,Rhino.Geometry.Point3d,Rhino.Geometry.Plane)">
<summary>Measures the angle between two points</summary>
<param name="point1">(Point3d) Point1 of input points</param>
<param name="point2">(Point3d) Point2 of input points</param>
<param name="plane">(Plane) Optional, Default Value: <c>Plane.WorldX</c>
  If a plane is provided, angle calculation is with respect to this plane</param>
<returns>(float * float * float * float * float) containing the following elements:
  element 0 = the X, Y angle in degrees
  element 1 = the elevation
  element 2 = delta in the X direction
  element 3 = delta in the Y direction
  element 4 = delta in the Z direction</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsUtility.RhinoScriptSyntax.ContextIsGrasshopper.Static">
<summary>Return true if the script is being executed in a grasshopper component(currently always false)</summary>
<returns>(bool) true if the script is being executed in a grasshopper component(currently always false)</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsUtility.RhinoScriptSyntax.ContextIsRhino.Static">
<summary>Return true if the script is being executed in the context of Rhino(currently always true)</summary>
<returns>(bool) true if the script is being executed in the context of Rhino(currently always true)</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsView.RhinoScriptSyntax.ZoomSelected.Static(System.String,System.Boolean)">
<summary>Zoom to extents of selected objects in a view</summary>
<param name="view">(string) Optional, Title of the view. If omitted, active view is used</param>
<param name="all">(bool) Optional, Default Value: <c>false</c>
Zoom extents in all views</param>
<returns>(unit)</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsView.RhinoScriptSyntax.ZoomExtents.Static(System.String,System.Boolean)">
<summary>Zooms to extents of visible objects in the specified view</summary>
<param name="view">(string) Optional, Title of the view. If omitted, current active view is used</param>
<param name="all">(bool) Optional, Default Value: <c>false</c>
Zoom extents in all views</param>
<returns>(unit)</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsView.RhinoScriptSyntax.ZoomBoundingBox.Static(Rhino.Geometry.BoundingBox,System.String,System.Boolean)">
<summary>Zooms to the extents of a specified bounding box in the specified view</summary>
<param name="boundingBox">(Geometry.BoundingBox) a BoundingBox class instance</param>
<param name="view">(string) Optional, Title of the view. If omitted, current active view is used</param>
<param name="all">(bool) Optional, Default Value: <c>false</c>
Zoom extents in all views</param>
<returns>(unit)</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsView.RhinoScriptSyntax.WallpaperHidden.Static(System.String,System.Boolean)">
<summary>Sets the visibility of the wallpaper bitmap in a specified view</summary>
<param name="view">(string) Title of the view. Use "" empty string for the current active view</param>
<param name="hidden">(bool) Show or hide the wallpaper</param>
<returns>(unit) void, nothing</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsView.RhinoScriptSyntax.WallpaperHidden.Static(System.String)">
<summary>Returns the visibility of the wallpaper bitmap in a specified view</summary>
<param name="view">(string) Title of the view. Use "" empty string for the current active view</param>
<returns>(bool) The current hidden state</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsView.RhinoScriptSyntax.WallpaperGrayScale.Static(System.String,System.Boolean)">
<summary>Sets the grayscale display option of the wallpaper bitmap in a
 specified view</summary>
<param name="view">(string) Title of the view. Use "" empty string for the current active view</param>
<param name="grayscale">(bool) Display the wallpaper in gray(True) or color (False)</param>
<returns>(unit) void, nothing</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsView.RhinoScriptSyntax.WallpaperGrayScale.Static(System.String)">
<summary>Returns the grayscale display option of the wallpaper bitmap in a
 specified view</summary>
<param name="view">(string) Title of the view. Use "" empty string for the current active view</param>
<returns>(bool) The current grayscale display option</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsView.RhinoScriptSyntax.Wallpaper.Static(System.String,System.String)">
<summary>Sets the wallpaper bitmap of the specified view. To remove a
 wallpaper bitmap, pass an empty string ""</summary>
<param name="view">(string) Title of the view. Use "" empty string for the current active view</param>
<param name="filename">(string) Name of the bitmap file to set as wallpaper</param>
<returns>(unit) void, nothing</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsView.RhinoScriptSyntax.Wallpaper.Static(System.String)">
<summary>Returns the wallpaper bitmap of the specified view. To remove a
<param name="view">(string) Title of the view. Use "" empty string for the current active view</param>
 wallpaper bitmap, pass an empty string ""</summary>
<returns>(string option) The current wallpaper bitmap filename</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsView.RhinoScriptSyntax.ViewTitle.Static(System.Guid)">
<summary>Returns the name, or title, of a given view's identifier</summary>
<param name="viewId">(Guid) The identifier of the view</param>
<returns>(string) name or title of the view on success</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsView.RhinoScriptSyntax.ViewTarget.Static(System.String,Rhino.Geometry.Point3d)">
<summary>Sets the target location of the specified view</summary>
<param name="view">(string) Title of the view. Use "" empty string for the current active view</param>
<param name="target">(Point3d) 3d point identifying the new target location</param>
<returns>(unit) void, nothing</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsView.RhinoScriptSyntax.ViewTarget.Static(System.String)">
<summary>Returns the target location of the specified view</summary>
<param name="view">(string) Title of the view. Use "" empty string for the current active view</param>
<returns>(Point3d) The current target location</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsView.RhinoScriptSyntax.ViewSpeedTest.Static(System.String,System.Int32,System.Boolean,System.Int32,System.Double)">
<summary>Test's Rhino's display performance</summary>
<param name="view">(string) Optional, The title of the view.  If omitted, the current active view is used</param>
<param name="frames">(int) Optional, Default Value: <c>100</c>
The number of frames, or times to regenerate the view. If omitted, the view will be regenerated 100 times</param>
<param name="freeze">(bool) Optional, Default Value: <c>true</c>
If True (Default), then Rhino's display list will not be updated with every frame redraw. If False, then Rhino's display list will be updated with every frame redraw</param>
<param name="direction">(int) Optional, Default Value: <c>0</c>
The direction to rotate the view. The default direction is Right (0). Modes:
  0 = Right
  1 = Left
  2 = Down
  3 = Up</param>
<param name="angleDegrees">(float) Optional, Default Value: <c>5</c>
The angle to rotate. If omitted, the rotation angle of 5.0 degrees will be used</param>
<returns>(float) The number of seconds it took to regenerate the view frames number of times,</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsView.RhinoScriptSyntax.ViewSize.Static(System.String)">
<summary>Returns the width and height in pixels of the specified view</summary>
<param name="view">(string) Title of the view. Use "" empty string for the current active view</param>
<returns>(int * int ) of two numbers identifying width and height</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsView.RhinoScriptSyntax.ViewRadius.Static(System.String,System.Double,System.Boolean)">
<summary>Sets the radius of a parallel-projected view. Useful
 when you need an absolute zoom factor for a parallel-projected view</summary>
<param name="view">(string) Title of the view. Use "" empty string for the current active view</param>
<param name="radius">(float) The view radius</param>
<param name="mode">(bool) Perform a "dolly" magnification by moving the camera
  towards/away from the target so that the amount of the screen
  subtended by an object changes.  true = perform a "zoom"
  magnification by adjusting the "lens" angle</param>
<returns>(unit) void, nothing</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsView.RhinoScriptSyntax.ViewRadius.Static(System.String)">
<summary>Returns the radius of a parallel-projected view. Useful
 when you need an absolute zoom factor for a parallel-projected view</summary>
<param name="view">(string) Title of the view. Use "" empty string for the current active view</param>
<returns>(float) The current view radius for the specified view</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsView.RhinoScriptSyntax.ViewProjection.Static(System.String,System.Int32)">
<summary>Set a view's projection mode</summary>
<param name="view">(string) Title of the view. Use "" empty string for the current active view</param>
<param name="mode">(int) The projection mode
  1 = parallel
  2 = perspective
  3 = two point perspective</param>
<returns>(unit) void, nothing</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsView.RhinoScriptSyntax.ViewProjection.Static(System.String)">
<summary>Return a view's projection mode</summary>
<param name="view">(string) Title of the view. Use "" empty string for the current active view</param>
<returns>(int) The current projection mode for the specified view
  1 = parallel
  2 = perspective
  3 = two point perspective</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsView.RhinoScriptSyntax.ViewNearCorners.Static(System.String)">
<summary>Return 3d corners of a view's near clipping plane rectangle. Useful
  in determining the "real world" size of a parallel-projected view</summary>
<param name="view">(string) Title of the view. Use "" empty string for the current active view</param>
<returns>(Point3d * Point3d * Point3d * Point3d) Four Point3d that define the corners of the rectangle (counter-clockwise order)</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsView.RhinoScriptSyntax.ViewNames.Static(System.Int32)">
<summary>Return the names/titles, of all views in the document</summary>
<param name="viewType">(int) Optional, Default: standard model views: <c>0</c>
The type of view to return
  0 = standard model views
  1 = page layout views
  2 = both standard and page layout views</param>
<returns>(string ResizeArray) of the view names on success</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsView.RhinoScriptSyntax.ViewDisplayModes.Static">
<summary>Return list of display modes</summary>
<returns>(string ResizeArray) strings identifying the display mode names</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsView.RhinoScriptSyntax.ViewDisplayModeName.Static(System.Guid)">
<summary>Return name of a display mode given it's id</summary>
<param name="modeId">(Guid) The identifier of the display mode obtained from the ViewDisplayModes method</param>
<returns>(string) The name of the display mode , otherwise None</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsView.RhinoScriptSyntax.ViewDisplayModeId.Static(System.String)">
<summary>Return id of a display mode given it's name</summary>
<param name="name">(string) Name of the display mode</param>
<returns>(Guid) The id of the display mode , otherwise None</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsView.RhinoScriptSyntax.ViewDisplayMode.Static(System.String,System.String)">
<summary>Set a view display mode</summary>
<param name="view">(string) Title of the view. Use "" empty string for the current active view</param>
<param name="mode">(string) Name of a display mode</param>
<returns>(string) If mode is not specified, the current mode</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsView.RhinoScriptSyntax.ViewDisplayMode.Static(System.String)">
<summary>Return a view display mode</summary>
<param name="view">(string) Title of the view. Use "" empty string for the current active view</param>
<returns>(string) the current mode</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsView.RhinoScriptSyntax.ViewCPlane.Static(System.String,Rhino.Geometry.Plane)">
<summary>Set a view's construction plane</summary>
<param name="view">(string) Title of the view. Use "" empty string for the current active view</param>
<param name="plane">(Plane) The new construction plane if setting</param>
<returns>(unit) void, nothing</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsView.RhinoScriptSyntax.ViewCPlane.Static(System.String)">
<summary>Return a view's construction plane</summary>
<param name="view">(string) Title of the view. Use "" empty string for the current active view</param>
<returns>(Plane) The current construction plane</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsView.RhinoScriptSyntax.ViewCameraUp.Static(System.String,Rhino.Geometry.Vector3d)">
<summary>Sets the camera up direction of a specified</summary>
<param name="view">(string) Title of the view. Use "" empty string for the current active view</param>
<param name="upVector">(Vector3d) 3D vector identifying the new camera up direction</param>
<returns>(unit) void, nothing</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsView.RhinoScriptSyntax.ViewCameraUp.Static(System.String)">
<summary>Returns the camera up direction of a specified</summary>
<param name="view">(string) Title of the view. Use "" empty string for the current active view</param>
<returns>(Vector3d) The current camera up direction</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsView.RhinoScriptSyntax.ViewCameraTarget.Static(System.String,Rhino.Geometry.Point3d,Rhino.Geometry.Point3d)">
<summary>Sets the camera and target positions of the specified view</summary>
<param name="view">(string) Title of the view. Use "" empty string for the current active view</param>
<param name="camera">(Point3d) 3d point identifying the new camera location</param>
<param name="target">(Point3d) 3d point identifying the new target location</param>
<returns>(unit) void, nothing</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsView.RhinoScriptSyntax.ViewCameraTarget.Static(System.String)">
<summary>Returns the camera and target positions of the specified view</summary>
<param name="view">(string) Title of the view. Use "" empty string for the current active view</param>
<returns>(Point3d * Point3d) the 3d points containing the current camera and target locations</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsView.RhinoScriptSyntax.ViewCameraPlane.Static(System.String)">
<summary>Returns the orientation of a view's camera</summary>
<param name="view">(string) Optional, Title of the view. If omitted, the current active view is used</param>
<returns>(Plane) the view's camera plane</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsView.RhinoScriptSyntax.ViewCameraLens.Static(System.String,System.Double)">
<summary>Sets the 35mm camera lens length of the specified perspective
 projection view</summary>
<param name="view">(string) Title of the view. Use "" empty string for the current active view</param>
<param name="length">(float) The new 35mm camera lens length</param>
<returns>(unit) void, nothing</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsView.RhinoScriptSyntax.ViewCameraLens.Static(System.String)">
<summary>Returns the 35mm camera lens length of the specified perspective
<param name="view">(string) Title of the view. Use "" empty string for the current active view</param>
 projection view</summary>
<returns>(float) The current lens length</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsView.RhinoScriptSyntax.ViewCamera.Static(System.String,Rhino.Geometry.Point3d)">
<summary>Sets the camera location of the specified view</summary>
<param name="view">(string) Title of the view. Use "" empty string for the current active view</param>
<param name="cameraLocation">(Point3d) A 3D point identifying the new camera location</param>
<returns>(unit) void, nothing</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsView.RhinoScriptSyntax.ViewCamera.Static(System.String)">
<summary>Returns the camera location of the specified view</summary>
<param name="view">(string) Title of the view. Use "" empty string for the current active view</param>
<returns>(Point3d) The current camera location</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsView.RhinoScriptSyntax.TiltView.Static(System.Int32,System.Double,System.String)">
<summary>Tilts a view by rotating the camera up vector. See the TiltView command in
  the Rhino help file for more details</summary>
<param name="direction">(int) The direction to rotate the view where
  0= right
  1= left</param>
<param name="angle">(float) The angle in degrees to rotate</param>
<param name="view">(string) Optional, Title of the view. If omitted, the current active view is used</param>
<returns>(unit) void, nothing</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsView.RhinoScriptSyntax.ShowWorldAxes.Static(System.String,System.Boolean)">
<summary>Shows or hides a view's world axis icon</summary>
<param name="view">(string) Title of the view. Use "" empty string for the current active view</param>
<param name="show">(bool) The state to set</param>
<returns>(unit) void, nothing</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsView.RhinoScriptSyntax.ShowWorldAxes.Static(System.String)">
<summary>Get status of a view's world axis icon</summary>
<param name="view">(string) Title of the view. Use "" empty string for the current active view</param>
<returns>(bool) The world axes display state</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsView.RhinoScriptSyntax.ShowViewTitle.Static(System.String,System.Boolean)">
<summary>Shows or hides the title window of a view</summary>
<param name="view">(string) Title of the view. If omitted, the current active view is used</param>
<param name="show">(bool) The state to set</param>
<returns>(unit) void, nothing</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsView.RhinoScriptSyntax.ShowViewTitle.Static(System.String)">
<summary>Get status of the title window of a view</summary>
<param name="view">(string) Title of the view. Use "" empty string for the current active view</param>
<returns>(bool) The state to View Title visibility</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsView.RhinoScriptSyntax.ShowGridAxes.Static(System.String,System.Boolean)">
<summary>Shows or hides a view's construction plane grid axes</summary>
<param name="view">(string) Title of the view. Use "" empty string for the current active view</param>
<param name="show">(bool) The state to set</param>
<returns>(unit) void, nothing</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsView.RhinoScriptSyntax.ShowGridAxes.Static(System.String)">
<summary>Get status of a view's construction plane grid axes</summary>
<param name="view">(string) Title of the view. Use "" empty string for the current active view</param>
<returns>(bool) The grid axes display state</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsView.RhinoScriptSyntax.ShowGrid.Static(System.String,System.Boolean)">
<summary>Shows or hides a view's construction plane grid</summary>
<param name="view">(string) Title of the view. Use "" empty string for the current active view</param>
<param name="show">(bool) The grid state to set</param>
<returns>(unit) void, nothing</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsView.RhinoScriptSyntax.ShowGrid.Static(System.String)">
<summary>Get status of a view's construction plane grid</summary>
<param name="view">(string) Title of the view. Use "" empty string for the current active view</param>
<returns>(bool) The grid display state</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsView.RhinoScriptSyntax.RotateView.Static(System.Int32,System.Double,System.String)">
<summary>Rotates a view. See RotateView command in Rhino help for more information</summary>
<param name="direction">(int) Optional, The direction to rotate the view where
  0= right
  1= left
  2= down
  3= up</param>
<param name="angle">(float) Angle to rotate. If omitted, the angle of rotation is specified
  by the "Increment in divisions of a circle" parameter specified in
  Options command's View tab</param>
<param name="view">(string) Optional, Title of the view. If omitted, the current active view is used</param>
<returns>(unit) void, nothing</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsView.RhinoScriptSyntax.RotateCamera.Static(System.Int32,System.Double,System.String)">
<summary>Rotates a perspective-projection view's camera. See the RotateCamera
  command in the Rhino help file for more details</summary>
<param name="direction">(int)
The direction to rotate the camera where
  0= right
  1= left
  2= down
  3= up</param>
<param name="angle">(float) The angle to rotate</param>
<param name="view">(string) Optional, Title of the view. If omitted, current active view is used</param>
<returns>(unit) void, nothing</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsView.RhinoScriptSyntax.RestoreNamedView.Static(System.String,System.String,System.Boolean)">
<summary>Restores a named view to the specified view</summary>
<param name="namedView">(string) Name of the named view to restore</param>
<param name="view">(string) Optional, Title of the view to restore the named view.
  If omitted, the current active view is used</param>
<param name="restoreBitmap">(bool) Optional, Default Value: <c>false</c>
Restore the named view's background bitmap</param>
<returns>(unit) void, nothing</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsView.RhinoScriptSyntax.RestoreNamedCPlane.Static(System.String,System.String)">
<summary>Restores a named construction plane to the specified view</summary>
<param name="cplaneName">(string) Name of the construction plane to restore</param>
<param name="view">(string) Optional, The title of the view. If omitted, the current
  active view is used</param>
<returns>(string) name of the restored named construction plane</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsView.RhinoScriptSyntax.RenameView.Static(System.String,System.String)">
<summary>Changes the title of the specified view</summary>
<param name="oldTitle">(string) The title of the view to rename</param>
<param name="newTitle">(string) The new title of the view</param>
<returns>(unit) void, nothing</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsView.RhinoScriptSyntax.NamedViews.Static">
<summary>Returns the names of all named views in the document</summary>
<returns>(string ResizeArray) the names of all named views in the document</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsView.RhinoScriptSyntax.NamedCPlanes.Static">
<summary>Returns the names of all named construction planes in the document</summary>
<returns>(string ResizeArray) the names of all named construction planes in the document</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsView.RhinoScriptSyntax.NamedCPlane.Static(System.String)">
<summary>Returns the plane geometry of the specified named construction plane</summary>
<param name="name">(string) The name of the construction plane</param>
<returns>(Plane) a plane on success</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsView.RhinoScriptSyntax.MaximizeRestoreView.Static(System.String)">
<summary>Toggles a view's maximized/restore window state of the specified view</summary>
<param name="view">(string) Optional, The title of the view. If omitted, the current
  active view is used</param>
<returns>(unit)</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsView.RhinoScriptSyntax.IsWallpaper.Static(System.String)">
<summary>Verifies that the specified view contains a wallpaper image</summary>
<param name="view">(string) View to verify</param>
<returns>(bool) True or False</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsView.RhinoScriptSyntax.IsViewTitleVisible.Static(System.String)">
<summary>Verifies that the specified view's title window is visible</summary>
<param name="view">(string) Optional, The title of the view. If omitted, the current
  active view is used</param>
<returns>(bool) True of False</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsView.RhinoScriptSyntax.IsViewPerspective.Static(System.String)">
<summary>Verifies that the specified view's projection is set to perspective</summary>
<param name="view">(string) Title of the view</param>
<returns>(bool) True of False</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsView.RhinoScriptSyntax.IsViewMaximized.Static(System.String)">
<summary>Verifies that the specified view is maximized (enlarged so as to fill
  the entire Rhino window)</summary>
<param name="view">(string) Optional, Title of the view. If omitted, the current
  view is used</param>
<returns>(bool) True of False</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsView.RhinoScriptSyntax.IsViewCurrent.Static(System.String)">
<summary>Verifies that the specified view is the current, or active view</summary>
<param name="view">(string) Title of the view</param>
<returns>(bool) True of False indicating success or failure</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsView.RhinoScriptSyntax.IsView.Static(System.String)">
<summary>Verifies that the specified view exists</summary>
<param name="view">(string) Title of the view</param>
<returns>(bool) True of False indicating success or failure</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsView.RhinoScriptSyntax.IsLayout.Static(System.String)">
<summary>Verifies that a view is a page layout view</summary>
<param name="layout">(string) Title of an existing page layout view</param>
<returns>(bool) True if layout is a page layout view, False is layout is a standard model view</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsView.RhinoScriptSyntax.IsDetail.Static(System.String,System.String)">
<summary>Verifies that a detail view exists on a page layout view</summary>
<param name="layout">(string) Title of an existing page layout</param>
<param name="detail">(string) Title of an existing detail view</param>
<returns>(bool) True if detail is a detail view, False if detail is not a detail view</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsView.RhinoScriptSyntax.DetailScale.Static(System.Guid,System.Double,System.Double)">
<summary>Modifies the scale of a detail object</summary>
<param name="detailId">(Guid) Identifier of a detail object</param>
<param name="modelLength">(float) A length in the current model units</param>
<param name="pageLength">(float) A length in the current page units</param>
<returns>(unit) void, nothing</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsView.RhinoScriptSyntax.DetailScale.Static(System.Guid)">
<summary>Returns the scale of a detail object</summary>
<param name="detailId">(Guid) Identifier of a detail object</param>
<returns>(float) current page to model scale ratio if model Length and page Length are both None</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsView.RhinoScriptSyntax.DetailLock.Static(System.Guid,System.Boolean)">
<summary>Modifies the projection locked state of a detail</summary>
<param name="detailId">(Guid) Identifier of a detail object</param>
<param name="lock">(bool) The new lock state</param>
<returns>(unit) void, nothing</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsView.RhinoScriptSyntax.DetailLock.Static(System.Guid)">
<summary>Returns the projection locked state of a detail viewport rectangle</summary>
<param name="detailId">(Guid) Identifier of a detail rectangle object</param>
<returns>(bool) the current detail projection locked state</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsView.RhinoScriptSyntax.DeleteNamedView.Static(System.String)">
<summary>Removes a named view from the document</summary>
<param name="name">(string) Name of the named view to remove</param>
<returns>(bool) True or False indicating success or failure</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsView.RhinoScriptSyntax.DeleteNamedCPlane.Static(System.String)">
<summary>Removes a named construction plane from the document</summary>
<param name="name">(string) Name of the construction plane to remove</param>
<returns>(bool) True or False indicating success or failure</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsView.RhinoScriptSyntax.CurrentView.Static(System.String)">
<summary>Sets the currently active view</summary>
<param name="view">(string) Title of the view to set current</param>
<returns>(unit) void, nothing</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsView.RhinoScriptSyntax.CurrentView.Static">
<summary>Returns the currently active view</summary>
<returns>(string) The title of the current view</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsView.RhinoScriptSyntax.CurrentDetail.Static(System.String,System.String)">
<summary>Changes the current detail view in a page layout view</summary>
<param name="layout">(string) Title of an existing page layout view</param>
<param name="detail">(string) Title of the detail view to set</param>
<returns>(unit) void, nothing</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsView.RhinoScriptSyntax.CurrentDetail.Static(System.String)">
<summary>Returns the current detail view in a page layout view</summary>
<param name="layout">(string) Title of an existing page layout view</param>
<returns>(string option) Option of The name  the current detail view, None if Page is current view</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsView.RhinoScriptSyntax.AddNamedView.Static(System.String,System.String)">
<summary>Adds a new named view to the document</summary>
<param name="name">(string) The name of the new named view</param>
<param name="view">(string) Optional, The title of the view to save. If omitted, the current
  active view is saved</param>
<returns>(unit) void, nothing</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsView.RhinoScriptSyntax.AddNamedCPlane.Static(System.String,Rhino.Geometry.Plane)">
<summary>Adds new named construction plane to the document</summary>
<param name="cplaneName">(string) The name of the new named construction plane</param>
<param name="plane">(Plane) The construction plane</param>
<returns>(unit) void, nothing</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsView.RhinoScriptSyntax.AddLayout.Static(System.String,System.Tuple{System.Double,System.Double})">
<summary>Adds a new page layout view</summary>
<param name="title">(string) Optional, Title of new layout</param>
<param name="size">(float * float) Optional, Width and height of paper for the new layout</param>
<returns>(Guid*string) Id and Name of new layout</returns>
</member>
<member name="M:Rhino.Scripting.ExtensionsView.RhinoScriptSyntax.AddDetail.Static(System.String,Rhino.Geometry.Point2d,Rhino.Geometry.Point2d,System.String,System.Int32)">
<summary>Add new detail view to an existing layout view</summary>
<param name="layoutName">(string) Name of an existing layout</param>
<param name="corner1">(Point2d) Corner1 of the detail in the layout's unit system</param>
<param name="corner2">(Point2d) Corner2 of the detail in the layout's unit system</param>
<param name="title">(string) Optional, Title of the new detail</param>
<param name="projection">(int) Optional, Default Value: <c>1</c>
Type of initial view projection for the detail
  1 = parallel top view
  2 = parallel bottom view
  3 = parallel left view
  4 = parallel right view
  5 = parallel front view
  6 = parallel back view
  7 = perspective view</param>
<returns>(Guid) identifier of the newly created detail on success</returns>
</member>
</members>
</doc>
